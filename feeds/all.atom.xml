<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Skydark's blog</title><link href="http://blog.skydark.info/" rel="alternate"></link><link href="http://blog.skydark.info/feeds/all.atom.xml" rel="self"></link><id>http://blog.skydark.info/</id><updated>2016-01-09T00:00:00+08:00</updated><entry><title>2015</title><link href="http://blog.skydark.info/life/2016/01/09/new-post/" rel="alternate"></link><published>2016-01-09T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2016-01-09:life/2016/01/09/new-post/</id><summary type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;bgeA304UrtSWgRQoAtRvjg==;UcaQwszmQLMvC3kbtjIDYZXnop0Q+jTLFH1PHHP03tMArOnbEC5+EXExHTGUtGYBNr1+8yDHZTwhcZQks51tFo/GTEpPJ++kLcRWse7JhZ4o7Xi09yC9N65wJpqnBRPXOkNS1BdjrpHbGA9SHkYpAYHR96N0Z4a9SSWWWXcw4zMq71wxAtIgR4cB7c/Eb6X/pEv96Vk3skBJwOy4zedCE9eQoZoB0+tqx5q4xrao4KphJBUcUThjMh1A9W3ScjEER/vlizQH0Bpxizax0nAjVEmBc0vSaJZXOs2nkwgnQ2LigLze0+CBSdOG14Vt//mRWziXwA+GD9V3g9mAN9qMJeSDQetno1fEtVishgAJqmjrmH3lqRA3DnNHm9RiBM3z5989oSHNoOzzdbI8NcjXNFzGtLsVC9+RcNFZroJgpuHLi5lyw7B6PTEwLMEkOehYBOTY5sZ+9b3ZHoRPNMGhs4xTzLOrNj79YPiNbeTMlsrmym0nPT1U+3p3M/rJY9EmXHTcCgymXpJFHZhi/8tIPbbiKUhWZgFO3E0izhM0SgZ1iR98tKyNpVUa0Ri0gVYbKIuV1bLu0S3RY1ppubV/Wx80vELgiqqcuPoXpxrZ4Tb8+Apsbr1mEnZnXvRj1V4QTmJMbG5bRSvMUF0czoJKGcYieaBs4r1Izp8sIX+gYUe3O8TkcW0RnZSy2tlwfuCu0ajBhb9z6+u8ySSzU7xB7nvTKZ2frYmu0FrF/Tbln5AQMAh8XZkWzmev/ZhfIvLh0GR+t0/iLPUS5VSHhAntsLV+IGEnFMARbjDZFWtORV0Pp1E19kqojaVJDCkneXb5NUAlkGne9zF0xFoc5O+c9oAOh65CQmmW+rc1WSJpWNVSiQ9+izxSvF5wvnaTvHfHFcpp7w4JZX6figH3xgzMMmTj3Jlft/g1GH5SXvlaRp4GN05jo87dTm5s9qxzl+NYReAGBbGQ3bFocWb7EWgCETTwquz992853HT2pulUzaX4PkiWxegsPum6InVjmTBaj/fhHpQJaPdOjbnqYJoN96dw3PczIhYaL2tdXCr4EN8bgk2wAjyh+cgCqtnj/rba64axiwjFxKy9trK94jn+vjmdWIT6WOSis6CfAiwjSsZAJ5esukNLS3VBmK/t7bW1tMn5JmIEQEpmZ4voLvQe+VbBBdhBEO8x25kwKNBjXOsqlDsrN0VNrZ6E3AIrQsXr9X2+S0CcNoMybIX0UcDhsJEbNi2Uk9HtJqI8fsL2rXWHuexzrSziGPTioKh4xM5ZfOgNsiB+b4HpqS01ynDKX45VaRs+d9kr7+Yae/qzNmWuPQJ908tprBjnVg3BbSUe1mmlwRN9mJwZwGDaVNYff1oCBZsp85pu2b1euwHMA61BB8ual5MPOL1oZbY0Vs5jO9xNcVm0R/T9D5Q8HyvSmpZbfKMVVhus1zDm8nmhoO89J+SkmaWnCmB5JpapflVCpS4bFLdUdq/6+hFVLtR2sjSD8BFDyS8A6boGSXfumCMbKgOxOwqJYqDpAJuqBCybH2NKs+ndKKtm42jBtaykP3te8P8yTtQLzRPq91hWIBynSWzlzn/svDfDNP0GNNBu+6FexCl0IwUCtz4z+yDGU3JQTEOAkc9SWy/HZi3SfsApNb3hwGG+zFDvfMYDs3+cbNbY+ISlLE4gQlDtD1VpLKy5JJtkwQFubLYTFXnt2l/6y2NWXsK2Rz8fvsQggPPKt1gu++J7VTyM2X0YisgD/GsVjKG8godw7S2sQ0inhhFmdKcw6OuAk89qm0g6m99f1NEG1copy8pYYHJSEsWxar4FBe4tK2Znl7uA8NvYp2b+gdeWHrDSQknHWYrHIKm4fqvMwdfT/G1t2yr6MQw7QwnLaAz34TMGr4VBvo3YFQsv4jDbbyEVLkDi8aTNqUfyLW0lOHnmvTPEWvv7fOOL+jW3gldYnjREZ12GRIQAnFWLDUkpFfuVQ+kJb0vKPhLnP0Hzq0WglhlyI9t7xhKyH8PzwFY1Mu5hALkBS1yhQ09jO7GuQD783FThWSS2TGBhImhprTE0sMAXL1Wyi66bItaIV5V4/oyg1lhpFGx/MeGgoXX5MkWOHXK1Gz05W2R04NMtofiMmuNnFwnBG8XPYBd5zKs6lMop82BLNLNk2Me3xpzgFpj+REEye287a9GUGV76ZsN1fmHoLYLNJOD4gsU0hh/traIkXeTY+msAWmiOZihHOKu/+6MB1C2qjFkn6X/PDWdG+u7NZj/idH0/VRUzHPTzes6eECgxT7nHnV3xx3s0ce+1gGJN5BBx1qiKGKfLS2BYqHbjsLy4KI30hNQP8mUgIOrLTqjzIa8S7u9JP0nSj3k8iKqlR8/GrocyQWY96rQZmHyuKKPFK9yiU3aYeS9FgI4fI7L0kjain4pQ/IT0JOHLzUJNJcjjvIB/fUksG8obYocH1UA8vLlXWw1OYxs1LVgapbJbg0IP+UWb2AcoE6hQ2lJ2n/Xh1fPvAhMF2M6QaR6uw/xt8W+0Nn5h+m+cgtyIEKfcEHiUIIUWZoEqZpjbkRk7kno0kwTmaadoObpg+L6ekMonq66AdtgN/I5QvjWo20fc+xKylXbn6qxtmher8/dukSkc3tA52FH4u7tIXzlCweTZiXZYZjOpuOA1XLybMlLnt7w6fFcaGCfQLwLLx/yZNLPi1jt2BMMR5uT6JuSYW8WGC8raF9pIC0gxsxYOSq3cDQHTmaT4uxMT2q1zCDfS5GduXkzTr1TBfb2/s3B+jl3oiFhEXA+YOpAzjTwN4kxS33WREvIrsFC0pZuNjn29MEE1FN8vNC0htAXApumLNqlHfdJtjRjsFg5zpy80lUVNEHrQIgqrbMWIMsMQlkUUhIjsGQBIIuAO0eWR48ylhrMWipNmYbt/7mw/JKk3AasSEqlA9szrSdAqR8vuDi5SfPLXW17L1KfoQxgHgjvEMtbicuB5u2QLYOY96CcHURmRxYKEFKlcAjpla8NgkFwsFNWrLMq0UQr2wsjfaetr/1s1HnnX9aQ5ftj9WwzrzsyqfN+uk+vnrhzmN6NdTXCDOaxeuXq5sJzj6V9pZ3/zlGLUAJzfnn0I0/TyRyadX6K3/HSmj2v8FYR0UdGRtAI/AKIey6D1wl6pi9G0xVulT1pfqFGt6g==;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form" class="form-inline"&gt;
  &lt;div class="form-group"&gt;
    &lt;label for="pec-content-password" class="control-label"&gt;请输入密码（提示：第五章标题）&lt;/label&gt;
    &lt;input type="password" class="form-control" id="pec-content-password" placeholder="Password" /&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;button type="submit" id="pec-decrypt-content" class="btn btn-primary"&gt;解密&lt;/button&gt;
  &lt;/div&gt;
&lt;/form&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</summary><category term="生活"></category></entry><entry><title>新电脑，华硕N56VV</title><link href="http://blog.skydark.info/pc/2013/11/05/n56/" rel="alternate"></link><published>2013-11-05T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2013-11-05:pc/2013/11/05/n56/</id><summary type="html">&lt;p&gt;RT，上周末华硕阿双姐那里直接柜台提的，本体6100, SSD和内存之类的加上就7000多了……[蜡烛]&lt;/p&gt;
&lt;p&gt;太长不看的结论就是：确实好机子(拇指)！&lt;/p&gt;
&lt;p&gt;本来打算买7500转硬盘版的，在阿双和柜台小哥(好评[good])的推荐下还是上了SSD.
于是光驱外置，1T硬盘改放光驱位装店里Ghost的WIN7, SSD拿回来自己装Arch.
应该说SSD对启动(无论系统还是软件)的提升确实很明显。开机从grub到桌面大约20s, Firefox的启动速度也大大提升了，虽然不全是SSD的功劳，但显然还是起了很大的作用的。
另外ArchWiki的SSD条目是要仔细看看的。&lt;/p&gt;
&lt;p&gt;屏幕1080P宽视角非常赞，虽然不得不说15寸用这个分辨率导致各种软件界面普遍字太小，视力不好的要小心。
目前用外接显示器所以没问题——这个外接显示器分辨率也才1680x1050——等回家估计就有点压力了。
另外就是打游戏的话分辨率低了也会觉得蛮浪费这块屏幕的，好在GT750m的性能还是不错的——呃，至少对我玩的游戏来说——我的英雄萨姆3终于可以在60fps下看清黑漆漆的地下关卡的细节了，而且我以前一直以为里头很多沙漠场景是真的一点草都没有做的……&lt;img src="/images/bq/roulian.gif" alt="揉脸"&gt;&lt;/p&gt;
&lt;p&gt;说到显卡，上台14r的显卡是A卡的，在内核上了3.11有了动态频率调节后真心爽爆。
考虑到Linus对NV大竖中指的场景，本来对这台双显(集显+NV)有点顾虑的。
还好事实证明压力不大，只要照着ArchWiki里bumblebee条目的说明，双卡还是很方便的。
平时用I卡基本不热，玩游戏用primus/optirun运行调用N卡性能好，玩完温度很快又降回来了。
虽然啦，像A卡那样啥事不用干自动全调节好是最爽的啦。&lt;/p&gt;
&lt;p&gt;装Linux最怕的就是驱动。除了bumblebee之外，最主要的部件基本都是开箱即用的，剩下一些细节需要自己搞下(另：我没试过挂起，因为大多用来当台式用)。
总之下面就是装Arch的时候遇到的各种小细节上的问题，记录下来以防万一：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因为装的Ghost的WIN7所以不需要考虑EFI+GPT的问题，直接MBR, 将Arch装到SSD上并装好grub+os-prober后双系统启动立刻搞定，非常方便；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;很多&lt;code&gt;Fn+XXX&lt;/code&gt;的快捷键不能使用，Google后在内核参数里加了&lt;code&gt;acpi_osi=&lt;/code&gt;，作用其实不明，因为我最终还是用openbox把大多数按键绑定到了脚本上[蜡烛]，印象里大概至少屏幕亮度调节的快捷键是被它启用的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;键盘背光灯控制在&lt;code&gt;/sys/class/leds/asus::kbd_backlight/brightness&lt;/code&gt;, 0-3共4档，将对应按键绑定到脚本上即可，效果屌炸酷炫[good]；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intel的新系列CPU(IvyBridge/Haswell)在新内核下不再使用以往的电源管理模式了，ondemand等已经没有了，只有powersave和performance两档。
这并不是退步了，而是基于&lt;code&gt;intel_pstate&lt;/code&gt;的模式下根本不需要用户干预了，类似前面说的A卡的方式，效果非常之好，&lt;code&gt;cpupower&lt;/code&gt;这类的软件包可以不用装了，&lt;code&gt;laptop-mode&lt;/code&gt;包中关于CPU的部分也得关上(不然启动的时候会提示错误)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;困扰我很久的wine下的实况2013没有声音的问题被意外顺便解决了——不要在wine中安装&lt;code&gt;dsound&lt;/code&gt;，或者给实况2013开个单独的profile要求使用wine内建的&lt;code&gt;dsound&lt;/code&gt;. 
相关的，以前没有声音的时候开场动画看不了，欧冠开始小组赛的动画也看不了(而且不能跳过只能黑屏，得切回Win下跳过)，原因竟然也是&lt;code&gt;dsound&lt;/code&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VBox意外的随机死机——不是VBox里的系统死掉，是整个外头的Arch也死掉了……
表现是鼠标键盘完全无反应，如果在放音乐，音乐会在几秒的片段中死循环，最后只能硬着头reset.
最后发现，在虚拟机设置中&lt;em&gt;关闭&lt;/em&gt;所有虚拟化相关功能即可——这是闹哪样……&lt;img src="/images/bq/roulian.gif" alt="揉脸"&gt;
好在性能感觉也不差就这样吧……
不过我连显示加速也关了，等哪天有胆了开开试试……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最困扰的问题是，关机的时候会听到硬盘很响的一声，明显像是直接断电的时候听到的声音，简直渗人……
Google到的结果大多说是老内核的bug
(也有说这样也OK你表这么敏感表用Win的思维balabala的——大哥我保证你想象到的声音肯定不是这类的……)，但我已经是3.11了……
目前未果，还好平时几乎不关机，考虑到上台机子硬盘已经有坏道了，我简直感到这是一个flag……[蜡烛]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转移数据的时候一边开着有线连外网，一边开着无线连14r(嗯，中间的热点是靠老智器Q5建立的，简直神奇……)，这种情况要记得用&lt;code&gt;ip route del&lt;/code&gt;把无线的default删掉，不然有线可能连不出去，因为默认去走无线了；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pacman -Qnq&lt;/code&gt;和&lt;code&gt;pacman -Qmq&lt;/code&gt;可以列出所有装过的软件包，把所有软件包重装一次(除了显卡驱动)，把&lt;code&gt;home&lt;/code&gt;分区几乎照样拷过来，再注意下&lt;code&gt;/etc&lt;/code&gt;里的配置，基本大多数东西就工作正常了；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;systemd-analyze plot&lt;/code&gt;可以查看开机用时示意图，效果酷炫（拇指）！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="PC"></category><category term="linux"></category><category term="arch"></category></entry><entry><title>用python给图像自动裁边</title><link href="http://blog.skydark.info/python/2013/07/03/autocrop/" rel="alternate"></link><published>2013-07-03T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2013-07-03:python/2013/07/03/autocrop/</id><summary type="html">&lt;p&gt;因为最近入了一只kpw的缘故，开始关心以前不大关心的东西了，譬如epub，譬如标题。&lt;/p&gt;
&lt;p&gt;现成的裁边软件是有的，而且还有不少。
不过秉着热衷于瞎造轮子的优良传统，我还是打算冲动地自己用&lt;a href="http://www.pythonware.com/products/pil"&gt;PIL&lt;/a&gt;玩一下。
从某些方面讲不去找文献就动手也是很有问题的，但这里不是都说了是玩么……&lt;/p&gt;
&lt;h2&gt;样本&lt;/h2&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWxJ7yH/CPFlR.jpg" alt="样本1"&gt;&lt;/p&gt;
&lt;h2&gt;难点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;本身扫描质量偏低，不是很干净；&lt;/li&gt;
&lt;li&gt;右上角的大片黑色阴影；&lt;/li&gt;
&lt;li&gt;右边的书缝线；&lt;/li&gt;
&lt;li&gt;左边的一列空白不应被裁去；&lt;/li&gt;
&lt;li&gt;最上方的漫画名可选裁去。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;找出背景色。&lt;/p&gt;
&lt;p&gt;收集最边缘的一圈宽度为&lt;code&gt;edge&lt;/code&gt;(默认为5)个像素的点的颜色，找出最常出现的颜色。&lt;/p&gt;
&lt;p&gt;考虑到漫画的特殊性，直接将颜色转化为灰度，提高重复的次数。&lt;/p&gt;
&lt;p&gt;尝试过将灰度值都近似为5的倍数以进一步提高重复率以及方便之后的处理，但提升不明显就取消了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消除背景色。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;ImageChops.difference&lt;/code&gt;比较灰度图和纯背景色之间的差别，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWDgEHe/IjwnE.jpg]" alt="消除背景色后"&gt;&lt;/p&gt;
&lt;p&gt;好处是现在背景色已经是黑色了，但直接使用&lt;code&gt;.getbbox&lt;/code&gt;取图像边界还是取不出来，因为右上角的大污点还在……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取边缘。&lt;/p&gt;
&lt;p&gt;污点是一大团不好处理，想到取边缘使一大团变成一条边，这样消除容易些。&lt;/p&gt;
&lt;p&gt;简单地高斯模糊，然后用PIL自带的边缘检测，最后用中值滤一下噪点，效果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWDfdPN/nMIIF.jpg" alt="过滤后"&gt;&lt;/p&gt;
&lt;p&gt;嗯，污点直接不见了，很赞。虽然右边那条书缝还是很坚持……&lt;/p&gt;
&lt;p&gt;发现PIL里想用canny边缘检测还要自己实现，嫌麻烦外加现在的实验效果还好就懒得弄了，
 不清楚会不会效果更好些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取边界。&lt;/p&gt;
&lt;p&gt;现在开始简单粗暴地取边界。现以上边界为例。&lt;/p&gt;
&lt;p&gt;自上而下逐行扫描像素点，参数有四个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;threshold&lt;/code&gt;: 颜色阈值，当当前点灰度值大于此值时不认为它是背景。这本扫的比较模糊，设在了15上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;max_error&lt;/code&gt;: 当一行中不是背景的点的比例大于此数值时认为这一行应该不是背景，视为error.
因为已经取过边缘，所以这个值应该很小，这里取了0.01.值太大会把如页码等细节视为背景吃掉。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;suppress&lt;/code&gt;: 当连续如此多行都error时认为达到正文区域。
扫右边缘时超过类似书缝这样的宽度就足够了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;max_edge_per&lt;/code&gt;: 最大边缘百分比，当扫描行数超过此比例时直接停止。&lt;/p&gt;
&lt;p&gt;每次找到一个方向的边界后就把确定是边界的点涂黑，比如右侧的一列如果先检测到并涂黑的话，就不会影响到上下方向的检测了。
原则上应该每个方向都这样涂黑迭代下去直到稳定的，至少应该来两圈，但是我懒所以只走了一圈，估计两圈的话效果会好些。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;裁！&lt;/p&gt;
&lt;p&gt;咔嚓！&lt;/p&gt;
&lt;p&gt;最终效果如图(&lt;code&gt;max_error=0.01, threshold=15, suppress=5, max_edge_per=0.1&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWDgm3l/cI0wN.jpg" alt="效果"&gt;&lt;/p&gt;
&lt;p&gt;还不错？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码&lt;/h2&gt;
&lt;p&gt;源码已放在&lt;a href="https://github.com/skydark/playground/blob/master/autocrop.py"&gt;github&lt;/a&gt;上。
如果碰巧有人有兴趣请随意。&lt;/p&gt;
&lt;h2&gt;实验&lt;/h2&gt;
&lt;p&gt;自玩性质，没可能也没兴趣与其他实现比较了……&lt;/p&gt;
&lt;p&gt;下面是几个测试图(原图在上)：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWDboF/nybWZ.jpg" alt="1"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWCUUe/tJupo.jpg" alt="2"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWD2wJ/DMaPH.jpg" alt="1"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWDbgm/ueamI.jpg" alt="2"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWDOl8/wYTDB.jpg" alt="1"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWE0Go/Dzajo.jpg" alt="2"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWDSmj/u0ZGN.png" alt="1"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWDy4z/y4XBa.png" alt="2"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;黑边太大，把suppress提高到了10：&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWCsMj/QzX9T.jpg" alt="1"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/skydark/CYWWD2oc/dJY6Y.jpg" alt="2"&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;
$('.entry-content').find('img').css('border', '5px solid lightblue').css('max-width', '685px');
&lt;/script&gt;</summary><category term="python"></category><category term="programming"></category><category term="dip"></category></entry><entry><title>将终端嵌入桌面</title><link href="http://blog.skydark.info/linux/2013/06/04/embed-terminal/" rel="alternate"></link><published>2013-06-04T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2013-06-04:linux/2013/06/04/embed-terminal/</id><summary type="html">&lt;p&gt;如题，效果如图:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/misc/embedterm.jpg" alt="嵌入终端截图"&gt;&lt;/p&gt;
&lt;p&gt;类似的文章其实很多，无非是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;隐藏标题栏/菜单栏/滚动条/……;&lt;/li&gt;
&lt;li&gt;利用终端自己/窗口管理器/其他工具(Devil's Pie, transset-df, etc.)等将终端设置上最大化透明置底不在任务栏显示等等属性;&lt;/li&gt;
&lt;li&gt;加入自启动。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;思路还是很清晰的。&lt;/p&gt;
&lt;p&gt;不过这些文章几乎都没有提及一个问题——当使用“&lt;em&gt;切换桌面显示&lt;/em&gt;”的时候，这个所谓嵌入桌面的终端也会被最小化。
而事实上，这是嵌入桌面的终端最有可能被使用的情景。&lt;/p&gt;
&lt;p&gt;可能的解决方案有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将“隐藏桌面”的快捷键绑定到另一个脚本上，这个脚本在完成原本的隐藏桌面的任务后随即还原桌面上的终端。
可以使用&lt;code&gt;wmctrl&lt;/code&gt;完成这系列任务，难度不大。
主要的问题是，原先“显示/隐藏桌面”的快捷键只要按两次就会恢复窗口原来的布局，而现在这个效果就无法保持了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使得终端真正“显示在桌面”。类似&lt;code&gt;conky&lt;/code&gt;和&lt;code&gt;wbar&lt;/code&gt;等软件的效果。需要提示窗口管理器这个窗口的type是desktop.
但使用&lt;code&gt;xprop/wmctrl/devilspie&lt;/code&gt;等完全没有效果。
&lt;a href="https://bbs.archlinux.org/viewtopic.php?pid=865844"&gt;这个帖子&lt;/a&gt;的7楼说明了原因：
这个hint要在窗口实际映射前设定好，如果等终端程序已经就绪窗口已经完成了再去提示窗口管理器，窗口管理器是可以无视的——openbox就是这么做的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也就是说，如果希望终端程序和&lt;code&gt;conky&lt;/code&gt;一样真正嵌入桌面，只能通过修改终端的源代码实现了。
该帖子里给了修改&lt;code&gt;urxvt&lt;/code&gt;的方法，我照葫芦画瓢也修改了&lt;code&gt;terminator&lt;/code&gt;，选择这个终端的原因是它不是我平时用的终端，而且功能非常丰富。最终效果如文首图，还是不错的。&lt;/p&gt;
&lt;p&gt;修改的时候就是将&lt;code&gt;terminatorlib/window.py&lt;/code&gt;里&lt;code&gt;Window&lt;/code&gt;类的&lt;code&gt;show&lt;/code&gt;方法开头添加如下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;startup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;present&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;property_change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atom_intern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_NET_WM_WINDOW_TYPE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atom_intern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ATOM&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PROP_MODE_REPLACE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atom_intern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_NET_WM_WINDOW_TYPE_DESKTOP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然要注意的是这样修改后就要求终端运行时就已经设定好了geometry，最大化那些hint也没有效果了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最后得说的是，很多推荐嵌入桌面终端的文章推荐&lt;code&gt;tilda/guake/yaguake&lt;/code&gt;等。但其实这几个终端最适合的使用方式是用快捷键随叫随到。
终端嵌入桌面更多是求一个气氛和极客味道(黑色壁纸更佳)，相比之下，快捷键唤出终端的实用意义才要更大一些。&lt;/p&gt;
</summary><category term="linux"></category><category term="shell"></category></entry><entry><title>备份 Google Reader 保存下来的网站历史存档</title><link href="http://blog.skydark.info/programming/2013/05/29/backup-gr-archives/" rel="alternate"></link><published>2013-05-29T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2013-05-29:programming/2013/05/29/backup-gr-archives/</id><summary type="html">&lt;p&gt;离 Google 宣布 Google Reader 要关闭的日子已经不远了。
在各种 Google Reader 替代品都逐渐稳定的现在，我已经过渡到&lt;a href="http://www.feedly.com"&gt;feedly&lt;/a&gt;上了。
老实说，虽然现在 Reader 满天飞，能真正像 Google Reader 那样舒适的着实不多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能订阅长城外的博客；&lt;/li&gt;
&lt;li&gt;访问迅速；&lt;/li&gt;
&lt;li&gt;稳定可靠；&lt;/li&gt;
&lt;li&gt;界面简洁实用；&lt;/li&gt;
&lt;li&gt;多终端支持；&lt;/li&gt;
&lt;li&gt;保存网站历史存档；&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中第一个是起码的(长城喜欢技术博不是一天两天了)，而最后那个是最难能可贵的。
对于那些已经消失了的博客站点，它们的痕迹只能残留在 Google Reader 的 RSS 列表中了。
而随着 Google Reader 的关闭，这些痕迹恐怕也会消影无踪吧。
就算有些博客没有消失，很多新的 Reader 们也只能抓到最近的文章，一些老的文章只能自己去博客上查而不能在 Reader 里看到。
对于那些发帖间隔很长但是都很值得一看的博客来说是很麻烦的。&lt;/p&gt;
&lt;p&gt;目前的替代品中，能像 Google Reader 这样保留站点历史存档的几乎没有。
Feedly 目前是基于 Google Reader 的后端所以还能看到。
他们自称有从 Google Reader 平滑迁移的计划(名字很不错，叫“诺曼底计划”)。
但是我不确定这个迁移是否包括所有历史存档——感觉如果包括历史存档的话，这个工程确实太大了。
而且考虑到像 Google 这样的公司也能作出这样的决定，还是把数据掌握在自己的手里比较放心一些。
于是还是自己随便写个爬虫抓来比较好吧。&lt;/p&gt;
&lt;p&gt;昨晚查了些资料，今早起床后写完后就运行然后去上课了，回来发现跑完了&lt;code&gt;_(:з」∠)_&lt;/code&gt;
代码在&lt;a href="https://github.com/skydark/grarchive"&gt;github&lt;/a&gt;上，
有需要的话自己改吧，我已经够用了(不负责摊手)……&lt;/p&gt;
&lt;h2&gt;使用方法(虽然我觉得除了我自己没人会用)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;基于&lt;code&gt;python2&lt;/code&gt;,需要如下扩展：&lt;code&gt;requests&lt;/code&gt;和&lt;code&gt;lxml&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;克隆仓库后，修改开始处的&lt;code&gt;USERNAME&lt;/code&gt;和&lt;code&gt;PASSWORD&lt;/code&gt;为自己的 Google 帐号；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;a href="https://www.google.com/takeout/#custom:reader"&gt;Google&lt;/a&gt;导出 Google Reader 的数据，解压其中的&lt;code&gt;subscriptions.xml&lt;/code&gt;到仓库中；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行&lt;code&gt;grarchive.py&lt;/code&gt;，然后睡一觉，如果没有出错，醒来时备份的xml会按分类和标题出现在&lt;code&gt;outdir&lt;/code&gt;目录中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;感谢&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/askedrelic/libgreader"&gt;libgreader&lt;/a&gt; 只是借用了下 Google 登录；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://adityanag.com/journal/2012/02/20/using-the-google-reader-api-to-build-a-historical-archive-of-a-site/"&gt;这篇文章&lt;/a&gt;中介绍了关于抓取 Google Reader 历史记录的方法，我的脚本里没有处理超过1000条帖子的情况(因为不属于我关心的需要备份的部分)，这里也有介绍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://linuxtoy.org/archives/inoreader.html"&gt;Linuxtoy&lt;/a&gt; 见评论区&lt;code&gt;_(:з」∠)_&lt;/code&gt;我承认我从那时起一直在头疼(生理意义上)，而且到现在还没有完全恢复(摔)……&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;已知问题&lt;/h2&gt;
&lt;p&gt;显然，就是因为我一次运行成功了就懒得做的东西，所以别指望我做……&lt;code&gt;_(:з」∠)_&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;单线程，我备份下来的文件有400M+，别问我具体用了多少时间，我说了我去上课了……；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无错误恢复过程；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只支持单层分类，多层分类会被展开——显然因为我只有单层分类……；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按标题保存文件名，在遇到特殊标题会有麻烦——如果不是&lt;code&gt;unix&lt;/code&gt;系用户，可能需要更改&lt;code&gt;grarchive.py&lt;/code&gt;中的&lt;code&gt;normalize&lt;/code&gt;函数，用于将标题转换为文件名；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OAuth登录(虽然&lt;code&gt;libgreader&lt;/code&gt;中是有的)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个博客只输出1000篇文章，如需要实现见感谢里的第二个链接；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输出修饰后的网页(而不是原始的xml——从备份角度我足够了所以懒得弄)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;……&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，这篇日志的目的就是记录下自己解决这个问题的要点和注意……啥，真有人以为那github仓库里的代码值得拿来用？(金馆长扶额脸)&lt;/p&gt;
</summary><category term="python"></category><category term="programming"></category></entry><entry><title>使用 Python 简单的自顶向下解析</title><link href="http://blog.skydark.info/programming/2013/02/24/top-down-parser/" rel="alternate"></link><published>2013-02-24T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2013-02-24:programming/2013/02/24/top-down-parser/</id><summary type="html">&lt;p&gt;译自&lt;a href="http://effbot.org/zone/simple-top-down-parsing.htm"&gt;http://effbot.org/zone/simple-top-down-parsing.htm&lt;/a&gt;, 一篇老文章了，好像没人译(因为很好懂大概)。
自己弄一遍希望能更清楚一些。&lt;/p&gt;
&lt;p&gt;Douglas Crockford 大牛的&lt;a href="http://javascript.crockford.com/tdop/tdop.html"&gt;文章&lt;/a&gt;似乎更出名些， &lt;a href="http://ghsky.com/2012/03/tdop.html"&gt;翻译&lt;/a&gt;也挺不错的。
不过那篇文章因为要实现一个 JavaScript 解析器，除了解析技术外其它部分稍有点分神。
这篇文章则更加关注于解析技术，并且更为循序渐进些。&lt;/p&gt;
&lt;p&gt;除此之外，&lt;a href="http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/"&gt;这篇相关文章&lt;/a&gt;也是很不错的。&lt;/p&gt;
&lt;hr&gt;
&lt;div markdown="1" class="alert alert-danger"&gt;
&lt;strong&gt;&lt;em&gt;Warning:&lt;/em&gt;&lt;/strong&gt;
&lt;strong&gt;我不懂翻译，下面都是我瞎编的，现在我编不下去了……&lt;/strong&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;div id='toc-here'&gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;使用 Python 简单的自顶向下解析&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://effbot.org/zone/simple-top-down-parsing.htm"&gt;http://effbot.org/zone/simple-top-down-parsing.htm&lt;/a&gt;
by Fredrik Lundh, July 2008&lt;/p&gt;
&lt;p&gt;在&lt;a href="http://effbot.org/zone/simple-iterator-parser.htm"&gt;简单的基于迭代器解析&lt;/a&gt;一文中，
我描述了在 Python 中通过传递当前词素和词素生成函数的方式来编写简单递归下降解析器的一种方法。&lt;/p&gt;
&lt;p&gt;一个递归下降解析器由一系列函数构成，通常每个函数对应一条语法规则。
这类解析器容易编写，并且足够有效率，只要语法是“前缀密集的”；
即，通过查看一个构造最开头的词素便往往足够断定该去调用哪个解析函数。
举例来说，如果你在解析 Python 代码，通过查看首个词素便可简单地识别绝大多数语句。&lt;/p&gt;
&lt;p&gt;然而，递归下降法用于表达式语法是低效的，特别对有许多不同优先级的运算符的语言来说。
介于每条规则对应一个函数，你很容易陷入重重调用中，甚至对简短、平凡的表达式亦是如此，仅仅为了达到语法中合适的层级。&lt;/p&gt;
&lt;p&gt;举例而言，这儿是 Python 的表达式语法的一个片段。
“test” 规则是一个基本表达式元素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test: or_test ['if' or_test 'else' test] | lambdef
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&amp;amp;' shift_expr)*
shift_expr: arith_expr (('&amp;lt;&amp;lt;'|'&amp;gt;&amp;gt;') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: atom trailer* ['**' factor]
trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于这个文法的一个原始的递归下降实现，为了解析一个简单的函数调用(具有形式“expression(arglist)”)，解析器将不得不一路从“test”下降到“trailer”。&lt;/p&gt;
&lt;p&gt;在七十年代初期，Vaughan Pratt 在他的论文&lt;a href="http://doi.acm.org/10.1145/512927.512931"&gt;自顶向下算符优先级(Top-down Operator Precedence)&lt;/a&gt;中发表了一种对递归下降法的优雅改进。
Pratt 的算法将语义与词素(而不是语法规则)相关联，
并使用一种简单的“绑定力(binding power)”机制来处理优先级。
传统的递归下降解析则用来处理语法中奇特或不规则的部分。&lt;/p&gt;
&lt;p&gt;在与之同名的&lt;a href="http://javascript.crockford.com/tdop/tdop.html"&gt;文章&lt;/a&gt; (以及&lt;a href="http://oreilly.com/catalog/9780596510046/"&gt;图书章节&lt;/a&gt;) 中，
Douglas Crockford 展示了怎样在 JavaScript 的一个子集中实现这个算法，
并在此过程中用它来开发一个能够解析自己的解析器。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我会稍微谦逊一些：我将简要地解释算法如何工作，讨论在 Python 中通过它实现解释器和翻译器的不同方法，
并最终使用它实现一个 Python 的表达式语法的解析器。
并且当然，还会有基准测试。&lt;/p&gt;
&lt;h2&gt;介绍算法&lt;/h2&gt;
&lt;p&gt;和其它大多数解析器一样，自顶向下解析器操作一个不同语法单元/词素构成的流。
例如，表达式&lt;code&gt;1 + 2&lt;/code&gt;可以对应于如下词素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;值为 1 的字面量
运算符 +
值为 2 的字面量
程序结束&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在自顶向下算法中，每个词素有两个相关的函数，称作“nud”和“led”；还有一个整值称作“lbp”。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nud&lt;/code&gt;函数(空指称)在词素于某个语言构造的开头出现时使用，
而&lt;code&gt;led&lt;/code&gt;函数(左指称)则用于词素出现在构造中间时(即，相对于它在结构中剩余部分的左侧)。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lbp&lt;/code&gt;值指绑定力，它控制算符优先级；
该值越高，词素与其紧随的词素间的绑定就越紧密。&lt;/p&gt;
&lt;p&gt;给出这样简短的介绍后，我们已经做好了观察 Pratt 的算法核心——表达式解析器的准备：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rbp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;rbp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lbp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Pratt 将这个函数称作&lt;code&gt;parse&lt;/code&gt;, 但我们将替而使用 Crockford 的文章中使用的名字。)&lt;/p&gt;
&lt;p&gt;这里，&lt;code&gt;token&lt;/code&gt;是一个包含当前词素的全局变量，
&lt;code&gt;next&lt;/code&gt;则是一个获取下一个词素的全局助手函数。
&lt;code&gt;nud&lt;/code&gt;和&lt;code&gt;led&lt;/code&gt;函数被描述为方法，&lt;code&gt;lbp&lt;/code&gt;则是一个属性。
最后，&lt;code&gt;left&lt;/code&gt;变量被用于将表示表达式左半部分的值传递到&lt;code&gt;led&lt;/code&gt;方法；
这可以是任何对象，例如中间结果(对解释器来说)或者一部分解析树(对编译器来说)。&lt;/p&gt;
&lt;p&gt;如果将解析器应用到之前展示的简单表达式上，它将从调用第一个词素的&lt;code&gt;nud&lt;/code&gt;方法开始。
在我们的例子中，该词素是一个字面量，可以被类似如下的类表示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;literal_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，解析器检查下一个词素的绑定力是否至少有给定的绑定力(即&lt;code&gt;rbp&lt;/code&gt;实参，代表“右绑定力”)那么大。
如果有，则调用该词素的&lt;code&gt;led&lt;/code&gt;方法。
在这里，右绑定力是零，并且下一个词素是一个如下实现的算符：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_add_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该算符有绑定力10, 且有一个&lt;code&gt;led&lt;/code&gt;方法再次调用表达式解析器，该方法传递与该算符自己绑定力相同的右绑定力。
这导致表达式解析器对子表达式使用更高的绑定力对待，并返回其值。
该方法接着将&lt;code&gt;left&lt;/code&gt;的值(在此情况下它来自字面量)与表达式解析器的返回值相加，并返回结果。&lt;/p&gt;
&lt;p&gt;程序结束由一个绑定力为零(低于所有其他词素)的特殊标记词素指示。
这确保表达式解析器在达到程序末尾时停止。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;end_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这就是整个解析器。
为了使用它，我们需要一个能够对给定源程序生成正确类别的词素对象的词法分析器。
这里是一个简单的基于正则表达式的版本，能处理我们此时已用到的最小语言：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="n"&gt;token_pat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\s*(?:(\d+)|(.))&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token_pat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;literal_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;operator_add_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unknown operator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;end_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在，让我们接通并试验它吧：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;
    &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 + 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不计入调用词法分析器的次数的话，解析器算法为解析这个表达式将总共进行四次调用；
每个词素调用一次，表达式解析器在&lt;code&gt;led&lt;/code&gt;方法中还有一次额外的递归调用。&lt;/p&gt;
&lt;h3&gt;扩充解析器&lt;/h3&gt;
&lt;p&gt;为了理解怎样扩充它，我们再来添加一点数学运算符。
我们需要更多一点类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_sub_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_mul_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_div_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;code&gt;mul&lt;/code&gt;和&lt;code&gt;div&lt;/code&gt;比起其它运算符使用更高的绑定力；
这保证当&lt;code&gt;mul&lt;/code&gt;运算符在表达式&lt;code&gt;1 * 2 + 3&lt;/code&gt;中被调用时，它仅得到字面量&lt;code&gt;2&lt;/code&gt;,而不是将&lt;code&gt;2 + 3&lt;/code&gt;视为子表达式对待。&lt;/p&gt;
&lt;p&gt;我们还需要添加词法分析器的类别：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token_pat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;literal_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;operator_add_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;operator_sub_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;operator_mul_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;operator_div_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unknown operator)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;end_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后这就成了。
解析器现在理解了四种基本数学运算，并且正确地处理它们的优先顺序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2*3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2-3*4/5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;尽管事实上我们添加了更多的语法规则，解析器仍然和以前一样产生相同数量的函数调用；
在解析器中表达式&lt;code&gt;1 + 2&lt;/code&gt;仍然由四次调用处理。&lt;/p&gt;
&lt;p&gt;然而，从代码角度来说，这与递归下降解析器相比并没那么不同。
我们仍然需要为每个词素类编写代码，并且尽管我们从表达式解析器的单独的规则中移除了大多数分发代码，
这些代码大多最终出现在词法分析器的庞大的&lt;code&gt;if/else&lt;/code&gt;语句中。&lt;/p&gt;
&lt;p&gt;在我们关注避免这类代码的方法之前，让我们给解析器再添加两个特性：
一元加/减算符，以及 Python 样式的幂算符(&lt;code&gt;**&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;为了支持一元运算符，我们所需的一切仅仅是为相关词素添加&lt;code&gt;nud&lt;/code&gt;实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_add_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_sub_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意对&lt;code&gt;expression&lt;/code&gt;的递归调用使用了高绑定力，以保证一元运算符绑定到右边紧邻的词素上，而不是表达式的剩余部分(&lt;code&gt;(-1)-2&lt;/code&gt;和&lt;code&gt;-(1-2)&lt;/code&gt;是不同的)。&lt;/p&gt;
&lt;p&gt;添加幂运算有一点小技巧；首先，我们需要调整词法分析器来识别两个字符的运算符：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;token_pat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\s*(?:(\d+)|(\*\*|.))&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;**&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;operator_div_token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个稍大的问题是该运算符是右结合性的(即它绑定到右边)。
如果你在 Python 提示符中输入&lt;code&gt;2**3**4&lt;/code&gt;，Python 将首先求值&lt;code&gt;3**4&lt;/code&gt;那部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="il"&gt;2417851639229258349412352L&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;4096&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="il"&gt;2417851639229258349412352L&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;幸运地是，绑定力机制很容易实现这个；
为了得到右结合性，只需在递归调用时将运算符的绑定力减一：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_pow_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过这种方式，解析器将把随后的幂运算符(有绑定力30)视作当前表达式的子表达式，这正是我们想要的。&lt;/p&gt;
&lt;h2&gt;构建解析树&lt;/h2&gt;
&lt;p&gt;自顶向下方案的一个很好的侧效应是它很容易构建解析树而不带来很多额外的开销；
由于词法分析器为每个词素创建一个新对象，我们可以将这些对象重用为解析树的节点。&lt;/p&gt;
&lt;p&gt;为了实现这个，&lt;code&gt;nud&lt;/code&gt;和&lt;code&gt;led&lt;/code&gt;方法得在对象上添加语法树信息，并返回对象本身。
在接下来的例子中，字面量叶节点有属性&lt;code&gt;value&lt;/code&gt;，运算符节点有属性&lt;code&gt;first&lt;/code&gt;和&lt;code&gt;second&lt;/code&gt;。
类也有&lt;code&gt;__repr__&lt;/code&gt;方法用于使结果树更容易被查看：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;literal_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(literal &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_add_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(add &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_mul_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(mul &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(实现&lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;和&lt;code&gt;pow&lt;/code&gt;被留作练习。)&lt;/p&gt;
&lt;p&gt;在新的词素实现下，解析器将返回解析树：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2+3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2*3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1*2+3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一元加在树中插入一个“一元加”节点(&lt;code&gt;second&lt;/code&gt;属性被设置为&lt;code&gt;None&lt;/code&gt;)。
如果你愿意，你可以跳过额外的节点，在&lt;code&gt;nud&lt;/code&gt;中简单返回内部表达式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;operator_add_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是否是个好主意有赖于你的语言定义(比方说Python, 一般情况下就不会把它们优化掉，以防你在不是数字的东西上使用一元加)。&lt;/p&gt;
&lt;h2&gt;简化词素类生成&lt;/h2&gt;
&lt;p&gt;我们至今为止使用的简单解析器都由许多类构成，每个词素各一个，词法分析器对它们则全都了解。
Pratt 替而使用关联数组，并将运算符与其词素关联起来。
在 Python 中，这看起来类似于：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;led&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lbp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这有点笨拙，并且从 Python 的角度看有那么点倒退。
Crockford 的 JavaScript 实现使用了不同的方法：
他使用单独的“词素类注册表”(他将其称作“符号表”)，和一个在线创建新类的工厂函数。
JavaScript 的原型模型使得这样做不可思议地简单，但在 Python 中在线生成类也不那么难。&lt;/p&gt;
&lt;p&gt;首先，让我们引入词素类型的基类，用于留个地方来塞公共行为。
我添加了用于存储词素类型名(&lt;code&gt;id&lt;/code&gt;属性)和词素值(对字面量和命名词素)的默认属性，还有一些用于语法树的属性。
这个类也是个给&lt;code&gt;nud&lt;/code&gt;和&lt;code&gt;led&lt;/code&gt;方法提供默认实现的合适场所。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;symbol_base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="c1"&gt;# node/token type name&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="c1"&gt;# used by literals&lt;/span&gt;
    &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="c1"&gt;# used by tree nodes&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Syntax error (&lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;).&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Unknown operator (&lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;).&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(name)&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，我们需要一个词素类型工厂：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol_base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;symbol-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="c1"&gt;# for debugging&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;
        &lt;span class="n"&gt;symbol_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lbp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lbp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个函数接受一个词素标识符和一个可选的绑定力，并在必要时创建一个新类。
标识符和绑定力被作为类属性插入，并将在该类的所有实例中有效。
如果该函数为一个已注册的符号调用，它仅仅更新绑定力；
这允许我们在不同的地方定义符号之行为的不同部分，我们将稍后看到。&lt;/p&gt;
&lt;p&gt;现在我们可以向注册表填入我们将要使用的符号：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;**&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(end)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了简化分发，我们使用词素字符串作为标识符；
符号&lt;code&gt;(literal)&lt;/code&gt;和&lt;code&gt;(end)&lt;/code&gt;(分别代替之前使用的&lt;code&gt;literal_token&lt;/code&gt;和&lt;code&gt;end_token&lt;/code&gt;类)的标识符是不会作为原始词素出现的字符串。&lt;/p&gt;
&lt;p&gt;我们还需要更新词法分析器，来使之使用注册表中的类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;token_pat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unknown operator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(end)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和之前一样，字面量类用作所有字面量值的公共类。
所有其他词素拥有自己的类。&lt;/p&gt;
&lt;p&gt;现在，所有剩下的事情就是为需要附加行为的符号定义&lt;code&gt;nud&lt;/code&gt;和&lt;code&gt;led&lt;/code&gt;方法。
为了完成它，我们可以将它们定义为普通函数，然后简单地将其一个个塞入符号类。
例如，这是加法的&lt;code&gt;led&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后一行从符号注册表中取得类，并将函数添加给它。
这里是更多一点&lt;code&gt;led&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它们看起来都相当相似，不是吗？唯一不同的是绑定力，所以我们可以通过将重复代码移入一个助手函数来把事情再简化一些：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过给出这个助手函数，我们现在可以将上面的&lt;code&gt;led&lt;/code&gt;函数替换为四个简单调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类似地，我们可以为&lt;code&gt;nud&lt;/code&gt;方法和右结合性提供助手函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nud&lt;/span&gt;

&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;infix_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
    &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;

&lt;span class="n"&gt;infix_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;**&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，字面量符号必须符合一个返回符号自身的&lt;code&gt;nud&lt;/code&gt;方法。
为此我们可以使用一个平坦的&lt;code&gt;lambda&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到以上大部分都是一般用途的管道装置：通过给出助手函数，实际的解析器定义浓缩为以下六行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;infix_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;**&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(end)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行它将产生和之前相同的结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2+3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2*3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1*2+3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;解析 Python 表达式&lt;/h2&gt;
&lt;p&gt;为了给出稍微大点的例子，让我们调整解析器使之能解析 Python 的表达式语法的一个子集，类似于本文开始时的语法片段给出的语法。&lt;/p&gt;
&lt;p&gt;为了做到这个，我们首先需要一个更时髦的词法分析器。
基于 Python 的&lt;code&gt;tokenize&lt;/code&gt;模块是显然的选择：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokenize_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tokenize&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cStringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;
    &lt;span class="n"&gt;type_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NUMBER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(operator)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(name)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;type_map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ENDMARKER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Syntax error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(end)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(end)&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tokenize_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# name or operator&lt;/span&gt;
            &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(name)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unknown operator (&lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个词法分析器分为两部分；
一个语言特定的解析器将源程序转换为字面量、命名和运算符的流，第二部分再将它们转换为词素实例。
后者同时在符号表中核对运算符和命名(为了处理关键字运算符)，并为所有其他命名使用伪符号(&lt;code&gt;(name)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;你可以将两个任务合并为一个函数，但是分隔开使得测试解析器变得稍微容易些，而且还使得为其它语法重用第二部分成为可能。&lt;/p&gt;
&lt;p&gt;我们可以使用老的解析器定义测试新的词法分析器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2+3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2*3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.0*2+3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;hello&amp;#39;+&amp;#39;world&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新的词法分析器支持更多种类的字面量，所以我们的解析器不必做任何额外工作也能支持了。
而且我们仍然在使用我们在本文开头介绍的 10 行的表达式实现。&lt;/p&gt;
&lt;h3&gt;Python 表达式语法&lt;/h3&gt;
&lt;p&gt;好，让我们对语法做点什么。
我们可以从之前展示的语法片段中推出正确的表达式语法，但在 Python 的语言参考的“求值顺序”一节中还有更实用的描述。
该节中的表格按优先顺序从低至高地列出了所有表达式运算符。
这儿是对应的定义(绑定力从20开始)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 三元形式&lt;/span&gt;

&lt;span class="n"&gt;infix_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;or&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;and&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;not&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;not&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# in, not in&lt;/span&gt;
&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# is, is not&lt;/span&gt;
&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;==&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;infix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;infix_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;**&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这16行定义了35个运算符的语法，并且还提供了它们中绝大多数的行为。&lt;/p&gt;
&lt;p&gt;尽管如此，符号助手定义的词素并没有固有的行为；
为了使之运转，还需要添加代码。
还有一些由于 Python 的词法分析器的限制引起的复杂性。
更多这方面的事情稍后再说。&lt;/p&gt;
&lt;p&gt;但在我们开始忙活那些符号前，我们还需要给伪词素们添加行为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(name)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(end)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在我们可以做一个快速的完整性检查：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;lt;&amp;lt;3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;括号表达式&lt;/h3&gt;
&lt;p&gt;让我们把关注点转移到剩下的符号，并从简单的事情开始：括号表达式。
它们可以通过在&lt;code&gt;(&lt;/code&gt;词素上的&lt;code&gt;nud&lt;/code&gt;方法实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;expr&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nud&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里用到的&lt;code&gt;advance&lt;/code&gt;函数是一个在获取下一个词素前检查当前词素拥有给定值的助手函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Expected &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;词素&lt;code&gt;)&lt;/code&gt;必须被注册；若不然，词法分析器将把它报告成一个无效词素。
为了注册它，只需要调用&lt;code&gt;symbol&lt;/code&gt;函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;让我们来试验一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2*3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(1+2)*3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到&lt;code&gt;nud&lt;/code&gt;方法返回内部表达式，所以&lt;code&gt;(&lt;/code&gt;节点不会出现在结果语法树中。&lt;/p&gt;
&lt;p&gt;同样提醒一下，我们在这里暂时作了个弊：
前缀&lt;code&gt;(&lt;/code&gt;在 Python 中有两种含义；
它既可以像上面那样用来分组，也可以用来创建元组。
我们下面再修复这个问题。&lt;/p&gt;
&lt;h3&gt;三元运算符&lt;/h3&gt;
&lt;p&gt;大多数定制方法看起来多少就像它们在递归下降法中对应的部分，行内&lt;code&gt;if-else&lt;/code&gt;的代码也没有什么不同：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;else&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;third&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再一次，在我们可以试验它之前我们需要注册额外的词素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;else&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 if 2 else 3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;属性与项查找&lt;/h3&gt;
&lt;p&gt;为了处理属性查找，“.”运算符需要一个&lt;code&gt;led&lt;/code&gt;方法。
为了方便，这个版本验证点号随后的是合适的命名词素(这项检查也可以在之后的步骤中进行)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(name)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Expected an attribute name.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo.bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;项访问是类似的；只需要为&lt;code&gt;[&lt;/code&gt;运算符添加&lt;code&gt;led&lt;/code&gt;方法。
由于&lt;code&gt;]&lt;/code&gt;是语法的一部分，我们还需要注册它。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;#39;hello&amp;#39;[0]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到我们正陷入大量这种形式的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;led&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;led&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这有点不方便，不是因为别的而是因为它违背了“不要重复你自己”的规则(方法名出现了三次)。
用一个简单的装饰器解决之：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;issubclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;symbol_base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个装饰器手机函数名，并将其附加到给定符号上。
它将符号名放在方法定义之前，并仅需要你写一次方法名。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在接下来的例子中将使用它。
由于另一种方式并不长多少，所以如果你需要针对 Python 2.3 或更老的版本你仍然可以使用它。
就是要小心打字错误。&lt;/p&gt;
&lt;h3&gt;函数调用&lt;/h3&gt;
&lt;p&gt;一个函数调用由一个表达式和一个在括号中的由逗号分隔的表达式列表构成。
通过将左括号视为二元运算符，解析起这个来简单易懂：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello(1,2,3)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里稍微简化了点；这个版本并不支持关键字实参和&lt;code&gt;*&lt;/code&gt;与&lt;code&gt;**&lt;/code&gt;形式。
为了处理关键字实参，在第一个表达式后查找&lt;code&gt;=&lt;/code&gt;，要是找到了，检查子树是否是一个平坦的命名，接下来再次调用&lt;code&gt;expression&lt;/code&gt;以取得默认值。
另一种形式可以被对应运算符的&lt;code&gt;nud&lt;/code&gt;方法处理，但在这个方法中处理这些大概更容易。&lt;/p&gt;
&lt;h3&gt;Lambdas&lt;/h3&gt;
&lt;p&gt;Lambdas 也相当简单。
由于&lt;code&gt;lambda&lt;/code&gt;关键字是前缀运算符，我们将通过&lt;code&gt;nud&lt;/code&gt;方法实现它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;argument_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;argument_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(name)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Expected an argument name.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lambda a, b, c: a+b+c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再一次，实参列表有一点简化；
它并不处理默认值和&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;形式。
实现提示参考上面。
同样提醒在这个实现中没有解析器层面的作用域处理。
这个话题从 Crockford 的文章中可以了解更多。&lt;/p&gt;
&lt;h3&gt;常量&lt;/h3&gt;
&lt;p&gt;常量可以被当作字面量处理；接下来的&lt;code&gt;nud&lt;/code&gt;方法将词素实例更改为字面量节点，并把词素自己作为字面量的值插入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;(literal)&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;None&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 is None&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;True or False&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;多词素运算符&lt;/h3&gt;
&lt;p&gt;Python 有两个多词素运算符，&lt;code&gt;is not&lt;/code&gt; 和 &lt;code&gt;not in&lt;/code&gt;, 但我们的解析器并没有完全正确地对待它们：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 is not 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;问题在于标准的&lt;code&gt;tokenize&lt;/code&gt;模块并不理解这种语法，所以它很高兴地将这些运算符返回为两个分隔的词素：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 is not 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;换句话说，&lt;code&gt;1 is not 2&lt;/code&gt;被处理为&lt;code&gt;1 is (not 2)&lt;/code&gt;，而这并不是同一件事：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一种修复它的方式是调整词法分析器(即，通过在原生的 Python 解析器与词素实例工厂之间插入一个组合过滤器)，
但在&lt;code&gt;is&lt;/code&gt;和&lt;code&gt;not&lt;/code&gt;运算符上通过定制&lt;code&gt;led&lt;/code&gt;方法来修复大概更容易些：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;not&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Invalid syntax&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not in&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;led&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;is not&amp;quot;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 in 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 not in 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 is 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1 is not 2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这意味着&lt;code&gt;not&lt;/code&gt;运算符能同时处理一元&lt;code&gt;not&lt;/code&gt;和二元&lt;code&gt;not in&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;元组，列表和词典表示&lt;/h3&gt;
&lt;p&gt;正如上面提醒的那样，&lt;code&gt;(&lt;/code&gt;前缀在 Python 中担当两种作用；
它被用于分组，还被用于创建元组(它也在函数调用中被用作二元运算符)。
为了处理元组，我们需要将&lt;code&gt;nud&lt;/code&gt;方法替换为能够区分元组和平坦括号表达式的版本。&lt;/p&gt;
&lt;p&gt;Python 的元组构成规则很简单；如果一对括号是空的，或者包括至少一个逗号，它是一个元组。
否则，它是一个表达式。或者换句话说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;() 是一个元组&lt;/li&gt;
&lt;li&gt;(1) 是一个括号表达式&lt;/li&gt;
&lt;li&gt;(1,) 是一个元组&lt;/li&gt;
&lt;li&gt;(1, 2) 是一个元组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这儿是实现这些规则的一个用于替换的&lt;code&gt;nud&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;comma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;comma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;comma&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="c1"&gt;# tuple&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(1)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(1,)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(1, 2)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;列表和词典稍微容易点；它们仅仅是平坦的表达式列表或表达式对。
别忘了注册额外的词素。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[1, 2, 3]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;advance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;literal&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意 Python 在创建列表、元组与词典时允许你使用可选的尾部逗号；
在收集循环开头的一个额外的&lt;code&gt;if&lt;/code&gt;语句能照顾到那种情况。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;尽管在我们可以声称完全支持 Python 2.5 的表达式语法前我们仍然还剩下一点要添加的东西，
但我们已经通过非常少的工作覆盖了语法中相当大的部分——大约 250 行代码(包含整个解析器机器)。&lt;/p&gt;
&lt;p&gt;而且正如我们贯穿本文所看到的那样，使用这种算法和实现方法的解析器是可读的，容易扩充，并且，如同我们一会儿将要看到的那样，令人惊讶地快。
尽管这篇文章关注于表达式，这种算法可以很容易地扩充到面向语句的语法上。
通过 Crockford 的文章可以了解一种完成它的方法。&lt;/p&gt;
&lt;p&gt;总而言之，Pratt 的解析算法是 Python 解析工具箱的很好的补充，本文中概括的实现策略则是快速实现那样的解析器的一种简单方式。&lt;/p&gt;
&lt;h2&gt;性能&lt;/h2&gt;
&lt;p&gt;如同我们已经看到的，解析器对每个词素仅使用很少的 Python 函数调用，这意味着它应该相当高效(或者像 Pratt 记录的，“假如不是理论上高效的话，至少实际上如此”)。&lt;/p&gt;
&lt;p&gt;为了测试实际性能，我从 Python FAQ 中挑选了一个 456 个字符长的 Python 表达式(大约 300 个词素)，并使用许多不同工具解析它。
这儿是在 Python 2.5 下的一些典型结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;自顶向下解析(到抽象语法树): 4.0 ms
内建解析(到元组树): 0.60 ms
内建编译(到 code 对象): 0.68 ms
编译器解析(到抽象语法树): 4.8 ms
编译器编译(到 code 对象): 18 ms&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们调整解析器使之能处理预先计算好的词素列表(通过运行&lt;code&gt;list(tokenize_python(program))&lt;/code&gt;获得)，
解析时间将降到仅仅 0.9 ms 以下。
换句话说，完全解析中仅有大约四分之一的时间花在了词素实例的创建、解析、构建树上。
剩下的几乎完全消耗在 Python 的&lt;code&gt;tokenize&lt;/code&gt;模块上。
通过更快的词法分析器，这个算法将达到与 Python 内置的词法分析器/解析器相比的2倍以内或差不多的时间。&lt;/p&gt;
&lt;p&gt;内建的解析测试本身相当有趣；它使用 Python 内部的词法分析器和解析器模块(二者都是用 C 写成的)，
并使用&lt;code&gt;parser&lt;/code&gt;模块(也是用 C 写成的)将内部语法树对象转换为元组树。
这很快，但结果是一个显然不可读的低级树：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st2tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;258&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;326&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;303&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;304&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;305&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;307&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;309&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;310&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;311&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;312&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;313&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;314&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;315&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;316&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;317&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))))),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;314&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;315&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;316&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;317&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))))))))))))))),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(在这个例子中，2 表示数字，14 表示加，4 表示换行，0 是程序末尾。三位数表示 Python 语法的中间规则。)&lt;/p&gt;
&lt;p&gt;编译器解析测试替而使用&lt;code&gt;compiler&lt;/code&gt;包中的&lt;code&gt;parse&lt;/code&gt;函数；
这个函数使用 Python 内部的词法分析器和解析器，然后将返回的低级结构转化为更漂亮的抽象树：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;compiler&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compiler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1+2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eval&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Const&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Const&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种转换(由 Python 完成)所需的工作被证明比用自顶向下解析器解析表达式还要多；
使用本文中的代码，我们可以使用 85% 的时间获得抽象语法树，尽管在用着一个相当慢的词法分析器。&lt;/p&gt;
&lt;h2&gt;代码注解&lt;/h2&gt;
&lt;p&gt;本文中的代码使用全局变量来维持解析器的状态(&lt;code&gt;token&lt;/code&gt;变量和&lt;code&gt;next&lt;/code&gt;助手函数)。
如果你需要一个线程安全的解析器，这些应该移动到一个上下文对象中。
这会导致轻微的性能损失，但有一些令人惊讶的为性能付出一点内存作的代价的方法来补偿。
更多这方面的内容见之后的文章。&lt;/p&gt;
&lt;p&gt;本文中展示的所有解释器和翻译器的代码都包含在本文当中了。
配套的代码范例也可以从这里获得：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://svn.effbot.org/public/stuff/sandbox/topdown"&gt;http://svn.effbot.org/public/stuff/sandbox/topdown&lt;/a&gt;&lt;/p&gt;
</summary><category term="python"></category><category term="programming"></category></entry><entry><title>鸑鷟 摩耶之纱 女警篇 DEMO</title><link href="http://blog.skydark.info/acg/2012/12/25/yue-zhuo-new-demo/" rel="alternate"></link><published>2012-12-25T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-12-25:acg/2012/12/25/yue-zhuo-new-demo/</id><summary type="html">&lt;p&gt;&lt;img src="/images/game/yz2demo.jpg" alt="Title"&gt;&lt;/p&gt;
&lt;p&gt;一切尽在不言中。&lt;/p&gt;
&lt;p&gt;能遇到鸑鷟，真的是太好了。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;@Youth-Bloom: 《鸑鷟》系列除了08年的圣诞版之外，已经完成的还有09年的免费作品《橘子传》，09年底的实体版《镜花水月》，10年的免费作品《橘子传FULL VOICE》，以及12年的圣诞版&lt;a href="http://www.youth-bloom.cn/news.php?id=55"&gt;《女警篇》&lt;/a&gt;，《摩耶之纱》制作顺利进行中，谢谢支持！&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="acg"></category></entry><entry><title>丑小鸭的天鹅湖</title><link href="http://blog.skydark.info/acg/2012/12/24/fate-stay-china/" rel="alternate"></link><published>2012-12-24T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-12-24:acg/2012/12/24/fate-stay-china/</id><summary type="html">&lt;p&gt;其实打通有几周了，但是这个月状态有问题……(老板：“作死……”)&lt;/p&gt;
&lt;p&gt;感谢&lt;a href="http://icemaple.info/"&gt;冰枫&lt;/a&gt;推荐，让我接触到这款&lt;strong&gt;&lt;em&gt;诚意满满&lt;/em&gt;&lt;/strong&gt;的作品。
没错，我觉得这是我最想给的评价。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/game/teh.jpg" alt="Cover"&gt;&lt;/p&gt;
&lt;p&gt;尽管如此，首先还是得说，光盘又喜闻乐见的打不开，然后又喜闻乐见的拜托室友了2333
虽然他读起来也困难但最终好歹还是把文件都拷出来了。
之前赤印雪本解也都是这样，还是压力蛮大的。&lt;/p&gt;
&lt;p&gt;我想我没透，或者只是闪烁其词了一下，提了一下但应该没影响的那种，但愿……&lt;/p&gt;
&lt;h2&gt;音画效果&lt;/h2&gt;
&lt;p&gt;CG质量还是蛮不错的(画风有别是因为画师不同?总之还好啦)，不过立绘个别表情略别扭。
第一次玩的时候最大的感慨是：&lt;strong&gt;两位女主的衣服好多！&lt;/strong&gt;
呃，不是说穿的太多铁壁防阵啦233
就是立绘着装的确种类蛮多的，而且都蛮适合蛮喜欢的，画师辛苦了～&lt;/p&gt;
&lt;p&gt;BGM有些还是不错的，要说最大的问题就是有时候安静的时间有点长，该BGM出马的地方没有，配合上有点问题。
此外结局前飙泪的BGM刚好在刻痕1里听过，对我个人而言稍微影响了下泪点2333&lt;/p&gt;
&lt;p&gt;丑小鸭的组图演出是最大亮点之一，效果绝赞，有种看大片的感觉XD
十分惊叹 krkr2 能够玩出这么&lt;strong&gt;惊艳&lt;/strong&gt;的效果，大呼过瘾的同时也深感佩服。&lt;/p&gt;
&lt;p&gt;缺点是组图演出部分不能存档也不方便 skip(见下)，而每当临近结局时演出段落就大增……
另外感觉演出中的部分人物和立绘出入有点大。&lt;/p&gt;
&lt;p&gt;顺便说一句虚拟机里玩看不了视频，我是等我有心情回 Win 下才补完结局动画的……(但是结局动画里带着一点剧情……)
ED 歌曲确实不错。&lt;/p&gt;
&lt;h2&gt;系统&lt;/h2&gt;
&lt;p&gt;自由行动模式和 PDA 设定很赞，不影响剧情走向但是的确很有趣。
自由行动模式估计还是顾忌难度问题(无论是对制作本身还是对玩家攻略)，除了了解一些枝节情报外并无它用，稍微有点可惜。
PDA 里面的内容则非常充实，比如每天的 KUSO 新闻、各色诡异的魔法、甚至还有充满各种冷neta的微博……能在一些小细节上琢磨这么多实在是诚意满满啊！&lt;/p&gt;
&lt;p&gt;虽然细节诚意满满，值得注意的地方也还是有的，比如 auto 没做按钮，skip 似乎也不大好用。&lt;/p&gt;
&lt;p&gt;另外扯远一句，在我接触的国产GAL中，肯在 skip 上下功夫的似乎不多——虽然完全可以理解啦。
对比 Fate, Fate 里演出效果众多，但在 skip 的时候都会高速跳过；
而国产GAL似乎都会仍然把演出按原定效果完成，对演出众多的游戏来说，skip 的效果就打了折扣。
嘛，虽然我承认我移植的时候 skip 也一向偷懒就是了2333&lt;/p&gt;
&lt;p&gt;此外，对比赤印存档太多，丑小鸭这么丰富的剧情配上这点存档&lt;strong&gt;根本不够用好吗&lt;/strong&gt;！&lt;img src="/images/bq/roulian.gif" alt="揉脸"&gt;&lt;/p&gt;
&lt;h2&gt;剧情&lt;/h2&gt;
&lt;p&gt;对于玩过 Fate 的人来说，如果说一周目天鹅之海线给人的感觉是 Fate 线的黄金别离的话，那么二周目丑小鸭涅槃线就是 HF 线的春天再临了。
也就是说一周目用一个美好的爱情故事展开设定，二周目则去揭露背后的真相。&lt;/p&gt;
&lt;p&gt;一周目引入了这个“有中国特色的魔法师社会”的设定，老实说这种轻松的设定实在是欢乐啊我喜欢XD&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/game/tehxxjc.jpg" alt="X教"&gt;&lt;/p&gt;
&lt;p&gt;最喜欢的是火星散兵坑的心理刻画。实在是太有共鸣了。&lt;/p&gt;
&lt;p&gt;另外一周目男主其实不是火星对吧(点头)XD&lt;/p&gt;
&lt;p&gt;一周目很果断的直接打通了GE，然后顺路回去回收了两个BE.
老实说，一周目给我的感觉是，“这个游戏确实不错，汐妹子也好棒好棒的，虽然好多地方还可以挖掘，结局也不难猜到，但是这样结束了也是良作了”。
看到CG列表一大半空白，于是心想可以推妹线了，进入了二周目——然后我发现我果然图样图森破2333&lt;/p&gt;
&lt;p&gt;二周目一开始因为妹妹也在的关系完全偏离了一周目的世界线，之后随着事态愈发不可收拾，整个事件背后的阴谋和脉络逐渐显露出来。&lt;/p&gt;
&lt;p&gt;最不可思议的就是在一周目中大量的疑惑在二周目几乎都有自然的解释，一开始觉得很不自然的设定竟然也是有解的，
甚至还有一部分(我认为很有价值的一部分，老实说有点映射现在贵圈的感觉口胡)在 ED 后也补完了，
可以想见为了构筑整个世界观做出了多大的努力，真心诚意满满啊！&lt;/p&gt;
&lt;p&gt;妹线我最不适应的地方是收尾有点突然……当然汐线也有这个问题，但是妹线给我的感觉是明明刚才妹妹还在崩溃的边缘，然后哥哥奔赴战场，然后结局，然后两人就已经OK了……
呃，总让我感到没法释怀有没有，总觉得妹妹还是那个状态我心里一下子转不过来很难受好吗，明明是 Happy End 为什么有种淡淡的不安感，又不是在玩狂父……&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/game/tehsiskill.jpg" alt="妹杀233"&gt;&lt;/p&gt;
&lt;p&gt;嗯，我为啥截了张序章的图?(误导向)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;还有一些剧本上安排不妥的地方，比如视角切换有点随性了，包括结局也是第三视角——虽然我倒是挺喜欢啦，比如风色幻想一代的结局那种(虽然我猜其实是模仿 Fate 春天再临)。
虽然并不难搞明白，但是如果是第三方视角的话，还是加个 interlude 或者效果提示一下比较好。&lt;/p&gt;
&lt;p&gt;汐的性格一直给人感觉有点混杂，当然她城府比较深(另外感觉汐在妹线中的表现更令人动容些)。
校园配角性格很突出，不过可能因为出境率的问题，并没能留下完整的人物形象。
比如卢卡和DJ学长，回想起来性格是很鲜明啦，但是干了啥似乎没啥感觉，尤其到了妹线后期火星远离学园生活后……嘛，虽然对比 Fate 也是这么处理的啦……
好在非校园配角爱憎分明反而让人印象深刻，话说回来好多汉子，果然是 Fate 系的风格么远目……&lt;/p&gt;
&lt;p&gt;不过总的来说，剧情我想打高分，贴近现实的世界观、有感染力的故事、不同信念的碰撞——我发现我真的一直在类比 FSN 呢。&lt;/p&gt;
&lt;h2&gt;诚意满满&lt;/h2&gt;
&lt;p&gt;回头看了下自己的胡言乱语，感觉批评反而占了不少篇幅摔……
但是认真地说，这款游戏真心让我眼前大亮，非常非常喜欢的游戏。
倒不如说，若不是因为做的实在太有诚意，怎么可能会去在细节上那么在意呢？&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/game/tehed.jpg" alt="ED"&gt;&lt;/p&gt;
&lt;p&gt;嗯，还有什么要说的么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;对于这么一款充满中国特色魔法主义的诚意满满的作品，真心不推荐对不起自己良心啊XD&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</summary><category term="acg"></category></entry><entry><title>重温 SICP</title><link href="http://blog.skydark.info/life/2012/11/28/back-to-sicp/" rel="alternate"></link><published>2012-11-28T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-11-28:life/2012/11/28/back-to-sicp/</id><summary type="html">&lt;p&gt;感谢&lt;a href="http://weibo.com/u/2042289170"&gt;小师妹&lt;/a&gt;提醒。
这学期裘老师又开 SICP 课程了，这是我本科最喜欢的课程之一(翘课率最低即是证据之一……呃，我太糟糕了233)。
感觉本科时过的有点混沌，所以趁这学期小师妹当助教就跟她说到元语言那章的时候叫我一声去蹭蹭。
没想到小师妹记性这么好今天突然发短信说裘老师讲到这里了就去蹭了，感激不尽啊嗷嗷！&lt;/p&gt;
&lt;p&gt;不过小师妹的提醒过于突然没有心理准备，因为这周讨论班的报告我还一直拖着没完成，所以我只蹭了第一节就回来了。
预计今天就是先讲完用 Scheme 实现一个 Scheme 解释器的部分，下周继续吧。&lt;/p&gt;
&lt;p&gt;这个章节的开头的介绍当时大概没有太大的感触，现在重新听裘老师说的时候就觉得的确如此，比如设计 DSL 的优点等等，当时因为觉得设计语言很麻烦根本就没太在意吧。
(结果在后来给 V5 做一个媒体中心类工具的时候反而照着这里实现了一个 DSL 2333)&lt;/p&gt;
&lt;p&gt;在课上也翻了翻 SICP 的前面，感觉自己当年真的错过了很多好东西。
很多很重要的概念在当时都是“哦，这样，挺自然的”就过去了，在各种地方接触了各种东西后重新回来才发现，原来它们早就在这里了。
所以说 SICP 确实是一个宝库啊！
有机会的话下次开课也去申助教好了XD&lt;/p&gt;
&lt;p&gt;于是随便说两句后马上洗澡继续赶ppt……光速逃……&lt;/p&gt;
</summary><category term="生活"></category><category term="programming"></category></entry><entry><title>搬离实验室</title><link href="http://blog.skydark.info/life/2012/11/24/the_end_of_lab/" rel="alternate"></link><published>2012-11-24T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-11-24:life/2012/11/24/the_end_of_lab/</id><summary type="html">&lt;p&gt;RT, 老板开学的时候就说考虑到实验室利用率和资金问题(据说和外头写字楼一个价了，学院绝壁故意的)，这学期可能会撤离实验室了。
大概老板觉得再拖下去就忘了，上周组会的时候终于发话说周一撤出实验室。&lt;/p&gt;
&lt;p&gt;其他几个师兄还好，我这边书留的略多，略多……
于是周六中午晚上各一次，每次背一个书包，左手一个包，右手俩包，总算搬的差不多了。
得到的教训是搬书用普通塑料袋是自寻死路，感觉当天手都被勒成213了……&lt;/p&gt;
&lt;p&gt;实验室的机器老板说如果想用就搬回去等毕业退还，不想用就直接过到将要搬进来的马老师的学生那里。
老实说实验室的机器性能挺233的，所以本没有留的意思。
如果能继续放在实验室的话倒是可以利用它的固定IP当个炮塔用，然则实验室大多数网口才10M所以还是算了吧。&lt;/p&gt;
&lt;p&gt;不过后来又仔细想想，觉得那个22寸的显示器还是蛮实用的，结果这周一和基友还有师兄一起把机器和显示器搬回宿舍了。
搬的时候没敢走二号楼的正门，因为感觉从保安的角度来看我们的架势略像小偷233&lt;/p&gt;
&lt;p&gt;搬回来发现没有DVI线，而且没有音箱的话声音在笔记本那边甚不方便，结果又买了条转接线和一个便宜音箱(事实证明便宜没好货，那声音简直……不过我还能忍，能忍，忍……)。
买的时候一时冲动(……)又买了个移动硬盘，于是早知道光棍节那天都买了多好23333&lt;/p&gt;
&lt;p&gt;买线的时候顺便给 AC100 买了个 HDMI 转 VGA 的线，周四动态逻辑课刚好轮我讲就直接用 AC100 上了(用的 ppt 也是用这个 blog 的 slide 功能)。
结果 AC100 和 LXDE 联合起来黑我，最后只有放弃 AC100 自己的显示屏，把显示全给投影仪才显示正常了，但是一屏保后显示就又走样了是要闹哪样……
不过总的来说也算是比较顺利的讲完了整节课。&lt;/p&gt;
&lt;p&gt;P.S.: 等都撤光了才发现还没给实验室留个纪念照……&lt;/p&gt;
</summary><category term="生活"></category><category term="PC"></category></entry><entry><title>Aqualang Notes</title><link href="http://blog.skydark.info/programming/2012/11/14/aqua_notes/" rel="alternate"></link><published>2012-11-14T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-11-14:programming/2012/11/14/aqua_notes/</id><summary type="html">&lt;p&gt;好吧，大概两个月没发东西了……从现状来看，我大概活着……
其实要是以前的话大概会没事发个现状总结给死党看，然则现在她在这儿没存在感……&lt;/p&gt;
&lt;p&gt;最近发生的比较 RP 的事情是今天知道自己在&lt;a href="http://www.ituring.com.cn/activity/details/15396"&gt;松本行弘访谈问题征集&lt;/a&gt;里中奖了!
大概是因为这辈子的 RP Point 全都积攒到了一些特殊事件上，从小到大从来没有中过什么奖，包括各种再来一瓶、再来一根、再来一袋、30% 送卤蛋什么的都是各种没中过……所以这次真心是这辈子第一次中奖2333
奖品是松本行弘签名的《松本行弘的程序世界》，虽然这书我早有一本读完了的XD&lt;/p&gt;
&lt;p&gt;&lt;img alt="签名书照" src="/images/matz_book.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;我提问的问题是这样的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class="well"&gt;设计语言的时候往往需要在很多语言特性中进行取舍，比如多继承和 Mixin，比如基于类还是基于原型等等。对 Matz 先生来说，在设计 Ruby 的时候感到最难以取舍的、考察最深入的语言特性是什么？有没有哪个特性会让您觉得“啊，当年若是选择那么做而不是这么做，虽然不会是现在的 Ruby，但应该也不错”？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之所以会问这个问题，是因为自己的确正在想实现一个语言练练手。
在考察各种语言特性的时候(当然程序语言并不是特性的堆积)，总是觉得大多数时候这些特性没有绝对的对与错，而更多的是根据语言自身的特点和目的来进行的取舍和妥协。
显然我在很多这类的地方纠结了很久很久，所以想趁机请教下 Matz 大神，看他当年在这种事情上是怎么纠结的 :)
本来觉得这问题挺个人兴趣的，被选上的确出乎意料，可惜不能当场去听回答了XD&lt;/p&gt;
&lt;p&gt;更新:
Matz 的回答在&lt;a href="http://www.ituring.com.cn/article/17487"&gt;这里&lt;/a&gt;。
Matz 首先强调最重要的选择是静态语言和动态语言，这个略出乎我意料，不过应该是我没考虑好……
“当我想设计一种编程语言作为自己的工具来用的时候，我就觉得还是动态语言实际用起来比较好用”这点的确有同感。
Matz 还强调了 Mixin, 这个在预料之中，在那个年代选择这种设计确实是比较有挑战性的。
Matz 还感慨了下从 Perl 里拿的有点过了，这个的确是很明显的，那些 Perl 里很 magic 的 $XX 就都拿过来了，要说方便是方便，但也太 magic 了点。
这个也的确值得警醒，不要从要参考的语言里拿太多XD&lt;/p&gt;
&lt;p&gt;顺便感慨句，Matz 太懂中国了233&lt;/p&gt;
&lt;p&gt;其实本来最近就想就自己对想实现的 Toy language 的各种考量写个 Note 的(记性奇烂无比，已发生过几个月前考虑过的问题不得不再考虑一次的窘境，所以干脆记下来的好)，既然挨上好事了，就先占个位子慢慢来……
当然读者必然假定是未来的自己了，如果在读这段文字的恰好是未来的我，麻烦从 金馆长脸/姚明脸/兔斯基以头抢砖 表情中选一个，现在的我推荐姚明脸……&lt;/p&gt;
&lt;p&gt;最后一次更新是 2012/11/14.
显然最近这事的优先级不高，下次更新不排除隔周啥的2333&lt;/p&gt;
&lt;hr /&gt;
&lt;p class="btn btn-primary" id="show_all"&gt;展开所有项目&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="meta-questions"&gt;Meta Questions&lt;/h2&gt;
&lt;h3 id="_1"&gt;为什么大多数问题的回答都是“因为我懒……”?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因为我现在懒……&lt;/li&gt;
&lt;li&gt;事实是我急着睡觉，而大部分问题我嫌敲起来麻烦还没整理到这里……&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;为什么问题明显不足，有些问题明显标题都没起好?&lt;/h3&gt;
&lt;p&gt;因为我懒……&lt;/p&gt;
&lt;h3 id="aqua"&gt;为何起名为 Aqua?&lt;/h3&gt;
&lt;p&gt;一开始有想法的时候其实想起名为 Jade 的，因为曾经在绯月上看过 haibara 大他们的讨论，说过“既然日本有 Ruby，中国就叫 Jade 吧XD”，不过 Jade 已经是比较知名的语言了所以作罢。&lt;/p&gt;
&lt;p&gt;后来一直在用的称呼是 Lotus, 因为打算之后在其上构建一套叫 Dark Crow 的系统，熟悉加速世界的应该能对这个典故一目了然……
缺点很明显，大名鼎鼎的 Lotus Note 已经占掉了 Lotus Script 这个名号，所以在真正开始实现之前只是以此为代名。
(P.S.:最近刚听说 IBM 要把 Lotus 撤了？)&lt;/p&gt;
&lt;p&gt;Matz 在他的程序世界一书中曾强调名字的重要性，王培在他的通用人工智能课程上也强调为组合概念起名字的重要性，这方面我一直深感赞同。
没有名字的东西是没法深入讨论的，只有起了名字，才能脱离原有的表面的理解，去探究更多细致的特性。
连代号都没有的话，心里想“这个语言要满足这样的特点”的时候，就只能“这个”“这个”的叫，也怪别扭的。&lt;/p&gt;
&lt;p&gt;现在这个名字 &lt;em&gt;Aqua&lt;/em&gt; 是某天晚上决心开始动手时紧急起的，一方面比较简单易记，一方面似乎没有太出名的重名语言。
水本身既沉稳安逸，也有灵活多变的一面，也符合我希望这个语言满足的特点。
此外 Aqua 也是黑暗星云的成员之一，而我的星座也是瓶子。
做为毫无艺术细胞的我，这样随便撞脑门起了这样的名字，似乎也算是合格了吧。&lt;/p&gt;
&lt;h2 id="implement"&gt;Implement&lt;/h2&gt;
&lt;h3 id="vm"&gt;为何选择 VM 而不是解释或编译?&lt;/h3&gt;
&lt;p&gt;从个人感受而言，我是认为真正的程序语言是解释的，编译是根据可以静态推断的信息进行的一种优化。
不过这里的语言，应该是指脱离了纯文本语法层面的语言，至少在 AST 层面上的。&lt;/p&gt;
&lt;p&gt;话虽这么说，设计程序语言这种事情就是要做各种 trade off 的……
从现阶段来说，使用 VM 实现我能想象到的好处有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我可以在 VM 这边玩很长时间而不用去考虑 parser 和 bytecode compiler 的实现: 前端那边因为语法未定而变化很快，而 VM 这边确定主要特性后基本可以动手了，也不必担心前端变化带来的影响太大。&lt;/li&gt;
&lt;li&gt;移植方便，parser 不移植都可以，只要用 aqua 自己写一个 parser 就可以了，这一点后头还会提到。&lt;/li&gt;
&lt;li&gt;事实上，上面都是骗人的……其实是以前我在脑补 continuation 的实现的时候基于 VM 的方式几乎是立刻想到了，但是基于 AST 解释的方式卡在了奇怪的地方，然后我恰好选择在这个时候第一次动手了……虽然后来我又不打算实现 continuation 了233333333&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="python"&gt;为何选择使用 Python 实现?&lt;/h3&gt;
&lt;p&gt;基于高级语言实现的最大优势是站的高看的远，很多时候不必在细节上浪费功夫。
尤其是现在还在设计阶段，大把大把的变化，放在 Python 里能省不少笔墨。&lt;/p&gt;
&lt;p&gt;基于高级语言的最大缺点就是性能。
对于设计阶段的 Aqua 来说，开发快速原型并迅速更改，要比效率问题重要太多了。
另一方面，PyPy 在设计动态语言方面表现突出，具体可以看他们的 &lt;a href="http://doc.pypy.org/en/latest/extradoc.html"&gt;paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;另一个问题是可移植性。Python 还算平台众多。而且最关键的是这只是个原型设计，重写在必要时是会提上议程的，前提是用户不再只是我一个，这个有点不现实233&lt;/p&gt;
&lt;p&gt;嘛，其实我又在骗人了……我只是不想考虑 GC 而已233333
虽然从现在的实现来看，如果考虑 GC 的确会很折寿……
这至少说明使用 Python 减少了我因为实现难度而放弃特性的可能。&lt;/p&gt;
&lt;h2 id="syntax"&gt;Syntax&lt;/h2&gt;
&lt;h3 id="python_1"&gt;为何选择接近 Python 的语法?&lt;/h3&gt;
&lt;p&gt;首先，接近 Python 显然是因为我很喜欢 Python 风格的代码，清晰易读废话少:)&lt;/p&gt;
&lt;p&gt;至于为什么接近到很多地方几乎完全兼容，其实主要是因为我有个很233的想法，就是希望 parser/bytecode compiler 既是合法的 Python(甚至 RPython) 代码，也是合法的 Aqua 代码。
这样的话就可以实现在 VM 层之上的 bootstrap 了。
而且这个 parser 也可以直接拿到 Aqua 里当作 eval 的一部分，也可以在没有 Aqua 的机器上使用 Python 直接为 Aqua 输出字节码，总之好处多多。&lt;/p&gt;
&lt;p&gt;至于 VM 端，如果可能也是 Python/Aqua 通吃的话那也最好，但考虑到还有运行时，另外 class 等的设计可能和 Python 有很大出入，大概不是很指望了。&lt;/p&gt;
&lt;h3 id="python_2"&gt;为何保留 Python 的缩进语法?&lt;/h3&gt;
&lt;p&gt;TODO: 整理中&lt;/p&gt;
&lt;p&gt;因为希望能让 Python 来启动 bootstrap, 自然要保留缩进XD
不过即使不考虑这个，我也会希望保留这点。&lt;/p&gt;
&lt;p&gt;处理缩进、调整 Tab 和空格、为了防止对错位置而折叠代码并提供参考线等功能明显应该是编辑器的工作。&lt;/p&gt;
&lt;p&gt;使用缩进规定语法的语言也有不少了，除了 Python, Haskell, F# 和 CoffeeScript 等语言也在用，我最喜欢的数据存储格式 YAML (这才是给人读的的格式！) 也在用。&lt;/p&gt;
&lt;p&gt;实际上，我认为语句中的大括号和表达式中的小括号一样，应该是一种类似调整优先级、消除歧义的功能。
大括号在需要的时候(缩进表达不清楚)可以加上，在不需要的时候(靠缩进就足够清楚)完全可以去掉。&lt;/p&gt;
&lt;p&gt;对于缩进的坏处，我见过的最靠谱的驳斥来自&lt;a href="https://yinwang0.wordpress.com/2011/05/08/layout/"&gt;王垠&lt;/a&gt;。
王垠认为在使用 Layout Syntax 时，由于对齐问题，导致犯错成本太低。
在移动代码块时，重新缩进变得不得不立刻操作。
而其优点，譬如代码更短、更少的括号更清晰等，又不甚明显。&lt;/p&gt;
&lt;p&gt;Parse 不方便。&lt;/p&gt;
&lt;p&gt;Layout Syntax 的另一个问题是嵌入其它语言中时很不方便，比如 Web 页面的模板。
不过这方面 Python 自己就有很多示范。
显然这个问题是能解决的，虽然大多嵌入的语言都做了一定的修改来适应。
我觉得这个问题还是个“大括号在缩进表达不清楚时可以加上”的问题。
只不过 Python 没有去考虑这个问题，导致模板语言设计者自己去解决了。&lt;/p&gt;
&lt;p&gt;总的来说，缩进本身自然是好的。
而将缩进强制规定到语法层面，和很多其它选择一样是一种 trade off.
而我认为这种交易是值得的。&lt;/p&gt;
&lt;h2 id="function-block"&gt;Function &amp;amp; Block&lt;/h2&gt;
&lt;h3 id="_3"&gt;有关变量作用域的判定&lt;/h3&gt;
&lt;p&gt;在各个语言中随便试验了一下与下面代码类似功能的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;               &lt;span class="c1"&gt;# x1&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 哪一个 x?&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;             &lt;span class="c1"&gt;# 是否找的到 x?&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;           &lt;span class="c1"&gt;# x2&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;g 中的 x 指 x1: lua 和 go —— 不过 golang 在有不使用的变量的时候是无法通过编译的，所以要在比如 x2 后头 println 一下 x 什么的;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;g 中的 x 指 x2: python, scheme(使用&lt;code&gt;define&lt;/code&gt;) 和 javascript(nodejs). Python 在第一次调用 g 时会因为 x2 尚未赋值而抛出异常。Scheme 这边，guile 的行为类似 python, racket 则类似 javascript;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态作用域: perl(local);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不需要考虑这类问题: lisp 等，因为&lt;code&gt;let&lt;/code&gt;的作用域很明确; C 等也不需要考虑，因为没有嵌套函数;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ruby(lambda/proc) 和 coffee 有点特别。coffee 中类似这样写的话，x2 处的&lt;code&gt;x = 2&lt;/code&gt;实际上指的是给 x1 赋值为 2,所以 g 中的 x 指 x1, 但运行显示的是&lt;code&gt;12&lt;/code&gt;. Ruby 的 lambda/proc 和 coffee 这样设计应该是希望尽量&lt;a href="http://coffeescript.org/#lexical_scope"&gt;避免同名覆盖&lt;/a&gt;，不过也有令人困惑的地方：对 ruby 来说，还可以用&lt;code&gt;def&lt;/code&gt;来屏蔽作用域；但对于 coffee，至少我直到看到翻译后的 javascript 代码前确实没有预料到这里的&lt;code&gt;x = 2&lt;/code&gt;竟然是那样的作用，这样反而意外地修改了外部的 x 的值，尽管在需要闭包的地方的确会方便的多。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="macro"&gt;Macro?&lt;/h3&gt;
&lt;p&gt;因为我懒……&lt;/p&gt;
&lt;h3 id="_4"&gt;模式匹配&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;模式匹配的价值&lt;/li&gt;
&lt;li&gt;有序/无序匹配&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="exception"&gt;Exception&lt;/h2&gt;
&lt;h3 id="_5"&gt;关于异常和返回值&lt;/h3&gt;
&lt;p&gt;这个问题几乎是 Go 语言掀到风头浪尖的。
Go 语言中取消了异常，转而使用 C 风格的返回值进行错误处理(尽管 Go 中仍然保留了 panic 用于从深层调用中跳出，但一般要求限制在包内部)。
Go 社区对此已有过&lt;a href="https://groups.google.com/forum/#!topic/golang-nuts/kqGL_2p_VCc/discussion[1-25]"&gt;热烈的争论&lt;/a&gt;
与此相关的文章也有很多。我个人最赞同&lt;a href="http://www.yosefk.com/blog/error-codes-vs-exceptions-critical-code-vs-typical-code.html"&gt;这篇文章&lt;/a&gt;的观点，即:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无论是使用异常还是使用返回值，人都是可能犯错的;&lt;/li&gt;
&lt;li&gt;一般情况下，使用异常相对而言更安全;&lt;/li&gt;
&lt;li&gt;但对严肃的、关键的、被严格审查的代码而言(尤其系统编程中)，使用返回值的代码更容易控制。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是因为人天性是懒惰的，因此在不严肃的编程中(尤其脚本编程中)，忘记处理返回值和忘记处理异常都是可能的。
相比而言，忘记处理异常所产生的错误更为明显。
但是当需要仔细审查的时候，随处都有可能抛出异常的代码的控制流显然更加难以琢磨。
对于以 C 语言为主要对手(虽然现实是更多的脚本小子更有转行的看法XD)的 Go 语言而言，选择使用返回值处理错误完全可以理解。
因为对严肃的应用，非确定性的异常抛出是灾难性的。
但对于不严肃到那种程度的场合，使用异常相对而言是要痛快些，而且有些时候主线也更清晰。
Aqua 的定位还是一个 Script Language，所以我还是更希望保留异常系统的。&lt;/p&gt;
&lt;h3 id="finally"&gt;对 finally 和异常的看法&lt;/h3&gt;
&lt;p&gt;关于 finally 代码块的含义，一般被认为是“保证某段代码执行结束时一定会调用的代码”。
其作用一般是清洁工作，保证资源在任何情况下都被正常释放等。
但当 finally 代码块中包含流程跳转时——特别地，可能抛出异常时——其含义变得不甚符合直觉了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Python 在 finally 中可以使用 return 和 break, 也可以抛出异常。&lt;/p&gt;
&lt;p&gt;如果使用了 return, 进入 finally 前试图返回的值会被这里替换。&lt;/p&gt;
&lt;p&gt;如果进入 finally 前正在抛出异常，该异常抛出的行为会因为 finally 中的 return/break 而中断，也会被 finally 中抛出的异常所覆盖，这些通常不是想要的结果(Java 和 Ruby 也有相同的问题)。&lt;/p&gt;
&lt;p&gt;特殊地，Python 不允许在 finally 块中使用 continue, 称为是 CPython 的实现问题。
猜测大概是因为 CPython 中 continue 在字节码层面上被直接实现为 GOTO 的缘故(对应地，break 有单独的字节码，并且所需信息在 SETUP_LOOP 中已经存储)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Golang 中倾向使用错误返回值，但也可以使用 panic 和 recover 实现非局部跳转。
    Golang 中的 defer 从某些意义上部分近似于 finally.&lt;/p&gt;
&lt;p&gt;Golang 中的 defer 可以直接修改返回值。
defer 后跟着的是函数，因此不需要考虑 return/break/continue 等。&lt;/p&gt;
&lt;p&gt;Golang 总是保证所有 defer 执行完毕，就算是 defer 中产生 panic 也不例外——此时 golang 会选择中断这个 defer 去执行下一个 defer，并且将原先打算抛出的 panic 信息替换为此次 defer 发生 panic 的信息(尽管 golang 应该是记得之前 panic 的信息的，因为如果一直不 recover, 最后会打印所有 panic 的信息)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dlang 是比较特别的语言，它同时包括了 finally 和 defer(scope).&lt;/p&gt;
&lt;p&gt;Dlang 要求 finally 和 defer 中不能有 return/break/continue 等，也不允许使用 goto 再入，defer 中甚至要求不得 throw——尽管如此，它实际上不可能保证不在 defer 中抛出异常。&lt;/p&gt;
&lt;p&gt;Dlang 的 defer 中抛出异常和 golang 一样，要保证所有 defer 按 LIFO 的顺序执行完毕，但是 defer 中出现的异常会靠 Throwable.next 串起来，最后抛出的异常仍然是第一个发生的异常——尽管有忘记处理 .next 的风险。
Finally 中抛出的异常也会这样串在后面。&lt;/p&gt;
&lt;p&gt;(P.S.: Dlang 比较奇特的是 1/0 运行时直接浮点数例外，1.0/0.0 运行时是 inf，都不是异常……估计前者是类C，为了效率;后者是浮点数精度问题。)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实际上在有异常的系统中，有些地方是不应该出现异常的，对于 finally/defer/析构函数等，它们应该做的是收尾的操作，&lt;em&gt;本不应&lt;/em&gt;抛出异常。实际上，这种地方抛出异常应当视为&lt;em&gt;错误&lt;/em&gt;。而且如上面所说的，在抛出异常的过程中经过 finally 的时候如果发生异常，其行为可能是超出预期的。
同样的，捕获异常的 catch/except 等中实际上也是不应该发生异常的——我能想到的范围中，只有将异常重新包装并继续向上传播是符合预期的行为，在捕获异常的过程中意外发生的异常本身也应该是&lt;em&gt;错误&lt;/em&gt;。&lt;/p&gt;
&lt;p class="last"&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;script type="text/javascript"&gt;
(function(){
  $('h3').addClass('js-toggle-next dropdown');
  $('h3').each(function(i){
    $(this).nextUntil('h2,h3,p.last').wrapAll('&lt;div class="well"&gt;');
  });
  var is_show = false;
  $('#show_all').click(function(){
    if (is_show) {
      $('h3.js-toggle-next').next().hide();
      is_show = false;
      $('#show_all').text('展开所有项目');
    } else {
      $('.js-toggle-next').next().show();
      is_show = true;
      $('#show_all').text('闭合所有项目');
    }
  });
})();
&lt;/script&gt;</summary><category term="programming"></category><category term="aqua"></category></entry><entry><title>智器T20</title><link href="http://blog.skydark.info/mobile/2012/09/14/smartqt20/" rel="alternate"></link><published>2012-09-14T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-09-14:mobile/2012/09/14/smartqt20/</id><summary type="html">&lt;h2&gt;动机&lt;/h2&gt;
&lt;p&gt;开学后迎来新舍友，比我大6岁，所以“不如你们年轻人那么经得起折腾”(大概是原话的等价说法)，晚上睡眠比我早不少而且非常不抗干扰。
于是我现在就拿伊苏7(买了还没玩233)的大盒子挡在电脑屏幕侧面遮光(而且键盘和鼠标的声音还是要避免的)，效果还不错。&lt;/p&gt;
&lt;p&gt;几天前心想，要么试试干脆窝在被窝里远程。
手头的AC100其实服役良好——除了连不上我笔记本建的Adhoc网络……
于是好奇用意，去微博问了下炮神最近有啥能用来用的跑Ubuntu的机器(也就是非纯玩物性质的，很多说“能”跑Ubuntu的手机基本没法真正拿来用)。
果不其然炮神推荐了智器T20(以及只有壕会推荐的华硕TF201……).
其实本来只是打算打探下现在的市场情况，然后炮神接着表示自己手头恰好有台智器借给他的，于是我果断选择接盘XD&lt;/p&gt;
&lt;p&gt;炮神实验室在物美那边，赶过去等了一会儿，看到一个面带壕者之气笑容如阳光般灿烂的帅哥迎面走来，果断刺瞎并怒拜之&lt;img src="/images/bq/bai.gif" alt="跪拜"&gt;
炮神最近也在通雪本解境篇中，跟我小聊了下机器和解境篇就去物美壕の采购了，但炮神亲切而高大的背影已经深深烙刻在吾心中……(以下省略感言60万字)&lt;/p&gt;
&lt;h2&gt;初试&lt;/h2&gt;
&lt;p&gt;想想自己也好久没碰智器的新产品了(其实是所有数码产品基本都没怎么尝鲜了，手头经常服役的就是上课用的AC100和看片用的智器V5)，作为现在还挂着个智器粉丝团超版号的家伙感到压力很大。&lt;/p&gt;
&lt;p&gt;初拿到手的感觉是有点沉，炮神也提醒过所以算有心理准备了，不过感觉快和AC100有一拼了，AC100可是带键盘的。
后来一查参数，AC100有860g，T20给的参数是730g……
考虑到AC100一般是放桌上/腿上用的，长时间举着T20对妹子可能有压力……&lt;/p&gt;
&lt;p&gt;沉归沉，东西是对的起这个重量的，1.5G的双核 TI OMAP4460, 1G 内存，16G 闪存，10寸 1280x800 的多点电容 IPS 屏，7500mAh 的电池……
我是不知道现在数码圈里对配置讲究到啥程度啦，但这和我这正在服役的 1G Tegra2 + 512M 内存的 AC100 比算是碾压了。
对比 AC100 跑 Ubuntu 的实力，我对 T20 是很放心的。&lt;/p&gt;
&lt;p&gt;官方 Ubuntu 下载在&lt;a href="http://www.smartdevices.com.cn/support/download/T20/FirmWare/201206/14-1684.html"&gt;这里&lt;/a&gt;，是和 Android 系统捆在一起的。
文件比较大，系统镜像解压后有3G.
安装照着说明来就可以了，很顺利。
不过因为我不怎么用 Android，所以也懒得去尝试新的 Android 固件能不能和这个固件一样与 Ubuntu 和平共处了。&lt;/p&gt;
&lt;p&gt;另外官方俩提示：&lt;/p&gt;
&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;每次启动Ubuntu系统前，必须插入含有uImage文件的TF卡，否则Ubuntu系统将无法启动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ubuntu系统可以触摸使用。因Ubuntu下部分窗口按钮较小，为了更好的体验效果，建议连接鼠标操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;装完 Android 后先试了下，4.0的系统(最新固件是4.1的)，我承认我个人原因确实对 Android 用不习惯，不过在复制 Ubuntu 镜像的时候打了会儿小鸟还是蛮惬意的。&lt;/p&gt;
&lt;p&gt;另外这机器确实屏幕&lt;em&gt;相当不错&lt;/em&gt;，可惜我卡上大多数视频分辨率不高，用的时候感觉有点浪费这块高分 IPS 好屏了XD&lt;/p&gt;
&lt;h2&gt;Ubuntu&lt;/h2&gt;
&lt;p&gt;接了炮神的T20，当然是奔着 Ubuntu 去的。
而 Ubuntu 没网显然是不行的，于是不幸的是 T20 和 AC100 一样不认我笔记本建的 Adhoc 网络……&lt;/p&gt;
&lt;p&gt;关于无线网络这块儿纠结了我一晚上，于是实验结果是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我笔记本建立的网络 T20 和 AC100 都无视了；&lt;/li&gt;
&lt;li&gt;祭出智器 Q5 竟然建立了我笔记本和 AC100 都能识别的网络，不过奇怪的是 T20 无法连接它；&lt;/li&gt;
&lt;li&gt;之前买了块水星的 MW150U 无线网卡，用网上说的关于 hostapd 的各种文章试了一遍，都无法建立 AC100 和 T20 能连的网络；&lt;/li&gt;
&lt;li&gt;最后解决方案：在 VBox 的XP虚拟机中挂上那块 MW150U，然后装上买它的时候的那张驱动盘里的软件，成功打开 AC100 和 T20 都能连上的网络……#FML&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之这只是我这边的纠结情况233333
有网络之后生活就幸福了，在虚拟机里用 putty 和 winscp 就可以免去前期调教的各种烦恼了——呃，但是得先在 T20 上装上 ssh 服务……
本以为这种东西他们一定会留着的，结果竟然没有自带，虽然 apt-get 一个很容易就是了。&lt;/p&gt;
&lt;p&gt;机子里一开始装的是 Unity，开机占用350M+?我没仔细看。
AC100 一开始装 Ubuntu 也是 Unity，但它只有 512M 的内存，所以这简直是自杀行为，想用还是得上 LXDE.
对比 T20 在 Ubuntu 下总内存大约有 700 M+, 大概剩下的是给硬解视频用了？
不过 T20 跑 Unity 没觉得太慢，大致和 AC100 跑 LXDE 相当，看得出硬件配置摆在那里。
不过老实说，Unity 这货虽然确实在界面上给平板做了不少优化，但是很多地方还是坑爹向，所以我干脆切回 LXDE 重新调教去了。&lt;/p&gt;
&lt;p&gt;装 LXDE 直接参考 AC100 的攻略：&lt;a href="http://ac100.grandou.net/ubuntu_deubuntuization"&gt;http://ac100.grandou.net/ubuntu_deubuntuization&lt;/a&gt;
不过我没装 nodm/tint2 之类的东西。
把&lt;code&gt;/etc/X11/default-display-manager&lt;/code&gt;改为&lt;code&gt;/usr/sbin/lxdm&lt;/code&gt;，然后把&lt;code&gt;/etc/lxdm&lt;/code&gt;下的配置文件对应改改就好。
然后记得删除&lt;code&gt;~/.dmrc&lt;/code&gt;，不然开机会报错再继续。
开机内存占用大约 130M，速度非常爽快，还是很愉悦的。&lt;/p&gt;
&lt;p&gt;然后就是调教之旅。
因为电容屏的原因，小按钮(比如刚装上 Unity 的时候窗口左上角的X)基本没法点，这也是官方推荐外接鼠标的原因。
不过因为习惯了用电阻屏的智器 V5 的原因，我早已完全习惯手指(准确地说，手指甲)控制触屏了。
于是就把所有字体和高度都调大了，然后基本就可以用手指上了——当然手指甲还是不行的。&lt;/p&gt;
&lt;p&gt;原来默认的自动隐藏的滚动条是要做死，在触屏机上完全没法用，怒删之：
&lt;code&gt;sudo apt-get remove overlay-scrollbar liboverlay-scrollbar3-0.2-0 liboverlay-scrollbar-0.2-0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后把滚动条调粗、按钮调大，编辑&lt;code&gt;~/.gtkrc-2.0&lt;/code&gt;(没有就新建一个)，内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;style "my-scroll-bar" {
    GtkScrollbar::slider_width = 40
}
widget_class "*Scrollbar" style "my-scroll-bar"
gtk-icon-sizes="gtk-menu=32,32:gtk-small-toolbar=32,32:gtk-large-toolbar=32,32:gtk-dnd=32,32"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后用&lt;code&gt;xev&lt;/code&gt;查三个按键的keycode，分别是115(电源键)、122(音量减)、123(音量加)。
用&lt;code&gt;xmodmap&lt;/code&gt;将它们映射到&lt;code&gt;Meta(Alt)&lt;/code&gt;,&lt;code&gt;Prior(PageUp)&lt;/code&gt;,&lt;code&gt;Next(PageDown)&lt;/code&gt;上。
这套按键本是 Q5 和 V5 上的，不得不承认这种安排确实非常合适，Alt 本来默认就可以用来拖动窗口，而 Alt 作为组合键也可以配合两个翻页键用。&lt;/p&gt;
&lt;p&gt;然后在 Openbox 的配置里加了一个 Alt + 鼠标左键 模拟鼠标右键的功能。
用&lt;code&gt;xdotool&lt;/code&gt;很容易实现，我以前在 Q5/V5 上的时候还不知道&lt;code&gt;xdotool&lt;/code&gt;，所以自己写了一个类似的东西，放到 T20 上编译了也还能用。
用来弥补 T20 没法直接触屏右键还不错(Q5/V5 上长按左键就可以模拟右键了，好像调X配置也可以？我又懒了……)。
不过别忘了电源键长按20s会强制断电。&lt;/p&gt;
&lt;p&gt;屏幕键盘&lt;code&gt;onboard&lt;/code&gt;还可以，不过还是怀念当年 V5 上那个全屏透明键盘。
V5 因为性能问题调出那个键盘有时会卡，但是 T20 绝对不会有这问题了。
那种键盘在这个屏幕上大概可以做到盲打了。不知道智器有没有兴趣移过来了。&lt;/p&gt;
&lt;p&gt;单独提到屏幕键盘还有个原因，就是&lt;code&gt;fcitx&lt;/code&gt;输入法与&lt;code&gt;onboard&lt;/code&gt;不能配合，使用&lt;code&gt;onboard&lt;/code&gt;无法在&lt;code&gt;fcitx&lt;/code&gt;里输入中文。
本来想把那要死的&lt;code&gt;ibus&lt;/code&gt;切换成&lt;code&gt;fcitx&lt;/code&gt;，结果因此作罢(V5 那个触屏键盘是基于&lt;code&gt;matchbox-keyboard&lt;/code&gt;的，当年和&lt;code&gt;fcitx&lt;/code&gt;配合的很好)。
其实显然智器也尝试过这事，&lt;code&gt;apt-get&lt;/code&gt;的时候能注意到&lt;code&gt;fcitx-modules&lt;/code&gt;啥的没卸干净……
好在 T20 的性能不是问题，用&lt;code&gt;ibus&lt;/code&gt;倒也暂时无恙。&lt;/p&gt;
&lt;p&gt;卸 Unity 前在&lt;code&gt;gnome-control-center&lt;/code&gt;里能找到屏幕亮度调节，换 LXDE 后不知道咋调节屏幕亮度了，以为往/sys/class/backlight/... echo就行，结果发现完全没效果……&lt;/p&gt;
&lt;p&gt;视频播放器原先的&lt;code&gt;totem&lt;/code&gt;是效果不错的，不过全屏后性能有些下降。
&lt;code&gt;gnome-mplayer&lt;/code&gt;性能不错但不能缩放画面。
&lt;code&gt;vlc&lt;/code&gt;和&lt;code&gt;smplayer&lt;/code&gt;大概需要好好调一下设置才能用，我懒得调就又卸了。
感觉比 Android 下视频性能要差些，不过比几乎我平时放在卡上看的都不能放的 AC100 那是好上太多太多了(虽然 AC100 用 chromium 看 youtube 啥的还是能看的)……
嘛，其实智器是很重视视频性能的，毕竟当年 Q5 在这上面栽过跟头，我相信 Android 下能力应该是妥妥的。
另外 Ubuntu 下声音只在耳机里有。&lt;/p&gt;
&lt;p&gt;浏览器自带了 FF 和 Chrome. 因为平时用 FF 所以就试了试 FF，性能确实没压力——不过还是希望智器能把之前的屏幕键盘弄过来啊23333……
网络跑的妥妥的，连接和速度都很稳定。
另外从方便角度考虑，推荐试试&lt;code&gt;midori&lt;/code&gt;，轻量而且界面摸起来更方便。&lt;/p&gt;
&lt;p&gt;最后谈一下备份。
T20的Ubuntu很好备份，就是复制到&lt;code&gt;/mnt/sdcard&lt;/code&gt;的那个&lt;code&gt;ubuntu.img&lt;/code&gt;，那实际上是一个硬盘映像，可以直接拿&lt;code&gt;fdisk&lt;/code&gt;看分区，也可以当作 loop 设备 mount 的(不过要加偏移，见&lt;a href="http://www.andremiller.net/content/mounting-hard-disk-image-including-partitions-using-linux"&gt;http://www.andremiller.net/content/mounting-hard-disk-image-including-partitions-using-linux&lt;/a&gt;)。
所以这里干脆把自己折腾了两下的系统放出来算了，免得后来人麻烦。
下载是：&lt;a href="http://pan.baidu.com/share/link?shareid=32966&amp;amp;uk=1124565063"&gt;http://pan.baidu.com/share/link?shareid=32966&amp;amp;uk=1124565063&lt;/a&gt;
和官方 Ubuntu 一个刷机办法，和官方不一样的就是&lt;code&gt;ubuntu.img&lt;/code&gt;，详情见官方固件说明吧。&lt;/p&gt;
&lt;p&gt;上两张图看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/misc/T20lxde.jpg" alt="LXDE桌面"&gt;
&lt;img src="/images/misc/T20lxdefm.jpg" alt="文件管理器"&gt;&lt;/p&gt;
&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;老实说，T20 跑 Ubuntu 确实很轻松愉快。
我拿 AC100 都基本当工作用小本了，相比之下 T20 跑起来更轻松而且娱乐性也更好，这个性能和这个屏幕不跑桌面确实蛮浪费的。
总之，如果冲着 Ubuntu 去，肯花点心思调教，T20 应该是个不错而且实用的选择。&lt;/p&gt;
</summary><category term="mobile"></category><category term="linux"></category></entry><entry><title>雪之本境解境篇</title><link href="http://blog.skydark.info/acg/2012/09/11/snowtrap_final/" rel="alternate"></link><published>2012-09-11T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-09-11:acg/2012/09/11/snowtrap_final/</id><summary type="html">&lt;p&gt;国产原创同人 Galgame 制作组 &lt;a href="http://sp-time.com/"&gt;SP-time&lt;/a&gt; 出品的《雪之本境 - 解境篇》是对其悬疑推理系前作《雪之本&lt;a href="" rel="tooltip" title="基"&gt;境&lt;/a&gt;》的解答/补完。&lt;/p&gt;
&lt;p&gt;我是6月份预订，昨天(9月10日)下午送到的。 其间经历过一次(难得的)跳票，到发货时小仆又病了，结果又多吊了几天胃口，算是好事多磨吧。&lt;/p&gt;
&lt;p&gt;放张照片，99元版的，不要吐槽细节……&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/game/snowtrap1.jpg" alt="实物图" /&gt;&lt;figcaption&gt;实物图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;作品本身质量上乘，送的东西也很实在，绝对物超所值，强烈推荐收豪华版(壕们还有壕版在看着你们啊亲～)。&lt;/p&gt;
&lt;p&gt;一开始比较囧的是收到的3张CD中只有解境篇的CD我直接打开了，雪本EX和解境OST我这边都无法挂载，特意切到 XP 和 Win7 下都被识别为空刻录盘。 我一度&lt;a href="" rel="tooltip" title="幸运用户什么的你懂的"&gt;担(qi)心(dai)&lt;/a&gt;真的是忘刻了的空盘…… 然后等大我6年的新舍友回来后拿他的机器竟然怒读出来了，虽然那光驱的声音让我不禁想到了拖拉机……【姚明脸】 看吧里也有个反映类似情况的，希望仆叔能重视啊。&lt;/p&gt;
&lt;p&gt;折腾完这些事后已经十点多了，然后安装解境篇(EX以后再回味233)，结果wine到标题画面就跳出。 于是抱着&lt;span class="label"&gt;丫的今天还真就跟我干上了是么你以为劳资还怕你不成么看我跟你战个痛快&lt;/span&gt;的精神怒开VBox，然后就……久违地通宵了…… 早上一歪脖子就是八点一刻，睡了三个钟头去实验室再去上课(而且发现那课属于逻辑系那边的讨论班性质结果听了一节课就疾走了……)整个就是在神游状态，总之大家一定要珍爱生命远离通宵啊远目…… (虽然我保证我想哪说哪随时跑题的风格绝对不是因为通宵的缘故233)&lt;/p&gt;
&lt;p&gt;关于对雪本解境篇的评价，直接从结论说起的话就是：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;em&gt;赞！&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;怒赞！&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;瀑布赞！&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
&lt;img src="/images/game/snowtrap2.jpg" alt="title" /&gt;&lt;figcaption&gt;title&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;总感觉想表达点什么，但是完全整理不出头绪。 从某些方面讲希望给别人介绍自己喜欢的东西，另一方面却又清楚自己没那本事。 所以还是让其他人做(无剧透的)介绍，我回归小时候的老习惯想到哪儿说到哪儿吧，条理什么的还给&lt;a href="" rel="tooltip" title="体育老师"&gt;语文老师&lt;/a&gt;就好。&lt;/p&gt;
&lt;p&gt;所以：&lt;/p&gt;
&lt;h2 id="以下随处都是剧透不想瞎的别点" class="js-toggle-next dropdown"&gt;以下随处都是剧透，不想瞎的别点&lt;/h2&gt;
&lt;div markdown="1"&gt;
&lt;p&gt;某些可能影响比较大的透我还是小心点吧，免得不小心有人点进来……&lt;/p&gt;
&lt;p&gt;开玩前忍着没玩试玩版，不过看过PV，主题曲非常赞，已加入高等级的播放列表。 当然这曲子也基本上确定了整部作品杯具基调。 顺提PV极赞，怒拜幻雪飘飘&lt;img src="/images/bq/bai.gif" alt="跪拜" /&gt;&lt;/p&gt;
&lt;p&gt;说到歌曲，解境篇的 BGM 非常入境，尤其是很多感人场景的 BGM，感动加成非常高。 还有很多 BGM 能给人非常强烈的印象，比如庭雪出场时带人声“啊”的 BGM，还有接近结局时重新响起的旧雪本 OP 等等。 有点小不适应的是日常时比较欢快的那个 BGM，虽然整作中笑点相当的多，但有部分用这个 BGM 的场景感觉气氛并没有欢快到那个程度……&lt;/p&gt;
&lt;p&gt;总的游戏时间已经提过，大约 9~10 个小时。 一共三个结局(基佬结局请无视)，去掉公共路线大约会少一个小时(虚拟机我只给了单核+512M，快进有压力……)。 总的来说分量的确蛮足的，而且如果再加上雪本EX的话时间大概可以翻倍。&lt;/p&gt;
&lt;p&gt;选项颇多，但是分支比较清晰。 第一次通关强制进入归海线BE，通后开启明眸篇，完成明眸篇后开启另外两个ED,在最终和归海回到屋中后分叉。 除了首次限定和某个只有基佬会选的选项外，进入ED主要受两个变量影响：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;归海枫的好感度：准确地说是对比好感度，因为有时选择某些超WS的选项也会大幅增加归海的好感度——这应该解释为&lt;a href=""&gt;谁&lt;/a&gt;{:rel=&amp;quot;tooltip&amp;quot; title=&amp;quot;庭雪&amp;quot;}的好感度减少了才更合理……&lt;/li&gt;
&lt;li&gt;推理度/觉醒度：推理越准确越有可能觉醒，虽然就算推错了最后也都会纠正回来，所以并不会直接影响主线走向。另外最后逼问伪境主的时候如果犯二犯的太厉害，归海枫会试图给你最严厉的惩罚——“罚他到SP-time做一辈子的游戏”2333……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此三个结局的分歧在于：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;觉醒度太低，会直接进入归海BE；&lt;/li&gt;
&lt;li&gt;达到一定觉醒度，也有很高的对归海的好感度，进入归海GE；&lt;/li&gt;
&lt;li&gt;达到一定觉醒度，对归海的好感度不高(还是提醒少选WS选项，因为归海的好感度本来就挺好积累的……)，进入庭雪END.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实我非常想直接把庭雪END称为庭雪TE(从 Title 画面和几个结局的信息量来看也是……)，虽然从雾本的角度看归海GE才算完美犯罪吧，而且归海GE的确是看起来最幸福的结局(并欢迎我大FFF团团员团购燃烧瓶烧死那只端现充！)。&lt;/p&gt;
&lt;div class="btn btn-danger js-toggle-next dropdown"&gt;
境主身份透
&lt;/div&gt;
&lt;div class="well" markdown="1"&gt;
&lt;p&gt;有关境主身份，其实在雾本揭露世界观后最怀疑的就是悠悠和小雪，然后悠悠离队后基本锁定小雪(绝对不是因为粉毛或者女友身份啥的！)，结果当伪.境主基本锁定为小雪时就迷茫了： 若解境篇中剩下的6人(不算庭雪)中有境主，且旧本境和解境篇是同一境主，那么旧本境里的黑锅常舍青、新本境里的黑锅(显然必然是黑锅)江城雪、旧本境里结局前死亡的叔桐山与归海枫、旧本境中的存活黑锅/新本境中和端贤冲直接较量过的季愁然都不会是境主，于是就只剩下一个入戏最深的发指的家伙了…… 虽然按雪之境主在雾本里的表现来看，这(xian)货(chong)一定是个伪装的很深的伪娘吧233(玩笑) 嘛，虽然老实说没有他这一层直接伪境主上任其实也没问题。&lt;/p&gt;
&lt;p&gt;感觉小仆绝对受 Infinity 系作品影响很深。 当初看到小仆到 Remember11 吧宣传雪本解境篇的时候还单纯以为只是因为都是雪山背景(或者就是受到过 Remember11 的启发设定的场景)，现在看来整部游戏都散发着浓郁的 Ever17 + Remember11 的味道，从某些角度讲甚至可以视作对 Remember11 的一种解读，到 Remember11 吧宣传实在是再合适不过了。 因为 Infinity 系是不能剧透的，具体就不说更多了，同时玩过二者的应该会有感觉吧。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;嘛，虽然我对这类游戏/小说基本也都是一种冬川心风格的态度：太麻烦的不管，只要选择相信浪漫的一方就好，所以到底境主的设定在这几年是不是有变化，某人是不是后来故意安排为境主的也无所谓了。 雪境中每个人都有自己的目的，每个人也都有自己的苦衷，悲伤与挣扎的场景实在是太多了。&lt;/p&gt;
&lt;p&gt;对比雾本，雪本并没有一个特别直接的现实社会问题为背景。 如果说雾本是试图反映社会问题的话，雪本则是通过众人面对信念与现实的冲突时的抉择来展现人性的善恶。 其实赤印也试图谈这个，但是解境篇基调以亮居多，角度也更为丰富。&lt;/p&gt;
&lt;p&gt;另一方面，与雾之境主的目的相比较，雪之境主的目的是报仇，从各种意义上来讲也的确是前者更让人钦佩些。 但是因为庭雪，故事最终离开了复仇的线路。即使残酷如雪之境主，也有他不能舍弃的人，也有心中的善。&lt;/p&gt;
&lt;div class="btn btn-warning js-toggle-next dropdown"&gt;
境主手段透
&lt;/div&gt;
&lt;div class="well" markdown="1"&gt;
&lt;p&gt;雪之境主的手法倒不是高明到不可思议，他最大的武器就是身处暗处却清楚每个人的心境，并且把这一点利用的淋漓尽致。 雪之境主隐藏自己的方式就是不直接出手，而通过心理和局势诱使他人出手，即所谓的“势”。 诱导他人的江城雪已经相当隐蔽，但也不如境主安全。&lt;/p&gt;
&lt;p&gt;话说回来，虽然小雪在对阵归海枫那段中(再想想雪本中对应的一段……#FML)显得格外冷酷残忍，但果然真心是个人妻型的好女孩啊。 在小雪心目中，无论何时最优先考虑的都是他，其实她本来对端现充就下不了手吧。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;归海存在感爆棚直接攀升女友地位(雾？没雾？)，比起小雪的人妻属性，归海则是助手般的战友属性令人难以……不行我明明不是傲娇控明明不是傲娇控……(揉脸) 虽然在归海BE里直接黑成由乃了……但是黑了依然很萌很可靠啊怎么办不行我明明不是傲娇控我明明不是傲娇……(揉烂脸)&lt;/p&gt;
&lt;p&gt;季愁然戏份大增啊，想必阿卡林也会很欣慰(嗯)……虽然基本都是卖萌刷存在感，不过也是补充了一些她的背景。 另外我还是强烈建议对端现充进行斩手……&lt;/p&gt;
&lt;p&gt;男性人物普遍刷黑，一方面画风感觉还是前作更显硬朗，另一方面大家似乎不是搞基就是黑脸…… 且不谈颜艺帝成启言，常舍青和叔桐山俩大老爷们讨论枪和子弹还脸红个大头娃娃啊！ 果然除了现充外的男人们都被雪之本基了么……&lt;/p&gt;
&lt;div class="btn btn-warning js-toggle-next dropdown"&gt;
境主手段透
&lt;/div&gt;
&lt;div class="well" markdown="1"&gt;
&lt;p&gt;鸾渊和白悠悠这次大面积洗白。 鸾渊在雪本中没显得像解境中这么高尚，感觉如果没玩过雪本，看到境主揭露她试图谋害自己丈夫绝对会非常震惊； 白悠悠则一贯是在关键时刻降低气温，一度让人觉得有境主嫌疑(虽然因为太显眼反而值得排除才是)，这次不仅解释了原因还把她送走了TAT……&lt;/p&gt;
&lt;p&gt;新人物庭雪怒刷存在感，并且靠上帝视角多次打破推理僵局——其实就是提醒玩家，若是想破解手法，最重要的线索就是两次本境之局的不同之处。 唉，要是知道外头就有个长得和人妻一模一样的萌妹子等着救援我我冻死也要往外跑啊嗷嗷！ 还有庭雪END到底是要闹哪样小仆你这人到底有多喜欢这类折磨人一生的童话故事啊(捶地)……&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;系统很出色，美观实用，要说的话就是 Notes 在 1024x576 的显示模式下有点显小……&lt;/p&gt;
&lt;p&gt;总的评价是上佳之作，本来在体验雪本雾本后期望就很高，没想到实际体会解境篇后还是能超出自己的期待，的确是不容错过的作品，SP-time 你们好样的！&lt;/p&gt;
&lt;p&gt;如果还是非要去找缺点的话，没有CV算么？嗯，说实话还是很期待将来能听到庭雪的声音的XD&lt;/p&gt;
&lt;/div&gt;
</summary><category term="acg"></category><category term="sptime"></category></entry><entry><title>shaarli</title><link href="http://blog.skydark.info/programming/2012/08/21/shaarli/" rel="alternate"></link><published>2012-08-21T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-08-21:programming/2012/08/21/shaarli/</id><summary type="html">&lt;p&gt;上篇的最后推荐了一个叫&lt;a href="http://sebsauvage.net/wiki/doku.php?id=php:shaarli"&gt;shaarli&lt;/a&gt;的个人网址管理工具。&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/misc/shaarli.jpg" alt="Screenshot for shaarli"&gt;&lt;/p&gt;
&lt;p&gt;优点就是 Simple &amp;amp; Fast, 找个能跑 php 的地方就成，支持 Tag, Picture Wall, RSS, 带 QRCode 的 Permalink, Private Link...&lt;/p&gt;
&lt;p&gt;在系主页上布置的时候遇到的一点问题，记录一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;需要有写权限。系里的主页大家都公用，彼此都能看到对方的家目录因此默认755, 部署的时候至少要把 data, tmp, cache 三个目录打开写权限，不然第一次登录的页面都看不到;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shaarli 自带了一个书签，在 tools 里，放到书签栏可以快速保存。不过我这边一般都不显示书签栏……照着&lt;a href="https://addons.mozilla.org/zh-CN/developers/docs/how-to/getting-started"&gt;帮助&lt;/a&gt;做了个右键菜单扩展，不过工具栏按钮不知为何怎么也做不上……&lt;a href="http://blog.csdn.net/z6482/article/details/7433460"&gt;这个&lt;/a&gt;中文帮助看起来写的不错。自用所以直接把地址写死了就不放出来丢人了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Picture Wall 功能对 U2B, flickr 之类的国外站点支持不错，国内显然是无视的。为了方便收藏 B 站视频试图给 shaarli 添加 B 站缩略图支持。
B 站的 api 可以在&lt;a href="http://www.bilibili.tv/api.txt"&gt;http://www.bilibili.tv/api.txt&lt;/a&gt;看到，appkey 不用申请其实也能用。&lt;/p&gt;
&lt;p&gt;Shaarli 使用函数 &lt;code&gt;computeThumbnail&lt;/code&gt; 求缩略图地址，对 U2B 这类的站点可以直接从网址求出来缩略图地址；
对 flickr 这样要通过 api 得到缩略图地址的(作者在注释里还对此狠命吐槽了一番……)，就先返回 &lt;code&gt;index.php?do=genthumbnail&lt;/code&gt; 这样的地址再进行 Ajax 调用，当然这样可以把缩略图 cache 到 cache 目录中。&lt;/p&gt;
&lt;p&gt;本地测试OK，然后实际部署时发现系里的服务器没有连上外网，而且连 ipv6 都没有233……最后只好又重新布置到实验室的电脑上了……&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="programming"></category><category term="php"></category></entry><entry><title>笑傲江湖</title><link href="http://blog.skydark.info/life/2012/08/19/legendary-swordsman/" rel="alternate"></link><published>2012-08-19T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-08-19:life/2012/08/19/legendary-swordsman/</id><summary type="html">&lt;section class="" directive="toggle"&gt;
&lt;header class="js-toggle-next dropdown alert alert-info"&gt;摘要已经言明了……&lt;/header&gt;
&lt;article&gt;
&lt;div&gt;
&lt;p&gt;好吧，本想就这么结束了这个post，考虑自己已经一个半月多没有写东西，还是再胡言乱语几句吧。&lt;/p&gt;
&lt;p&gt;好久没写文字其实也没什么奇怪的，大抵就是因为没什么可写的，也就是说这两个月过的颇为平淡，无论是生活还是学术。&lt;/p&gt;
&lt;p&gt;老实说我也不好意思用“学术”这个词，毕竟自己在这些方面是个比令狐冲还要随性而为的家伙，平均每日在这方面耗时委实少的很。&lt;/p&gt;
&lt;p&gt;整个假期倒是花了一点(呃，只好意思用“一点”这个词了，因为在外人眼里看来我的做法其实根本没诚意)时间在控制体重上，比上次写博客倒是减   了 有8公斤。
当然家里知道的数据要少4公斤，因为一开始隐瞒不报的缘故，后来家父赶来无法隐瞒……= =\|\|(家母不会开机家父不会上网在这里说说倒无   妨 ……)
家母现在的说法是，“每次你回家都(因为weight)没法做好吃的给你，干脆这次你就努把力，到中秋回来吧做好吃的吧”。
对我这种毫无节制(差点打成节操)的家伙来说，这大概是第二次在无监管的情况下体重中幅下降吧。
那天和师妹跑步，说道自己眼中只有“比自己还胖的”和“瘦子”两种人，倒也真心不假。&lt;/p&gt;
&lt;p&gt;当然因为固守帝都，好友倒是见了不少，呆子位老大非人锅巴，还有最常见面的某大屎货，短信里和ZM也有联系过，感觉大家都好有活力，自己顿   时 愈发觉得自己213了。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;已然离题太远，最近睡眠不济，最好还是赶快随便吐槽完再说……&lt;/p&gt;
&lt;p&gt;大概就是昨晚一时手贱点开了 &lt;code&gt;笑傲江湖.txt&lt;/code&gt;，然后不知不觉花了大约十七八个钟头看完了。&lt;/p&gt;
&lt;p&gt;我一粗人本来就不怎么读书，至于文学作品那更是唯恐避之不及，武侠更是几乎未沾过(疑，好似有些河图什么的？)。
笑傲江湖小时似乎曾在书柜里拾到过，应是后半卷，只随意看过数眼，因此剧情完全连不上，
只记得在令狐冲在地板上习得吸星大法，率众人上少林救盈盈时从暗道逃走，以及和盈盈、向问天、任我行一起成为雪人等几幕，肯定是因为这几   处 容易形成画面感吧。&lt;/p&gt;
&lt;p&gt;令狐冲这样的性格是很讨我喜欢的。
从某些角度讲，如果我大胆外向些，估计是会比这家伙还随性而为的。
我在绯月一直用着风色幻想SP男主角修的头像，便是因为修和令狐冲性格里有着相仿的地方，若是用一个字形容的话，那便是“风”；若再加一字  ， 那 便是“义”(不过这方面修曾遇到过帮挚友还是的保住爱自己的妖精女王的两难局面，就我观察在女性玩家中甚受恶评)。
在小场面上不愿拘泥于成规，在大关头时则坦坦荡荡，宁可舍生取义；视名利于无物，却视享受人生为真谛。
令狐冲曾对杀人医生说道，若为苟生数日而不能畅饮自在，那多活又有何意义，这坦然面对生死的潇洒已是大侠之风。
也只有像他这样潇洒随意之人，才能使的来同样无招无形的独孤九剑吧。&lt;/p&gt;
&lt;p&gt;持有傲娇和大小姐属性的任盈盈本不应是我喜欢的菜(我才不是因为傲娇喜欢助手的啊嗷嗷&amp;gt; &amp;lt;!)，但读完竟意外觉得真是理想的妻子——  考  虑到我是打算光棍的，而武侠被我视为三次元，我觉得这算是很高的评价了。
令狐冲的出场便煞费苦心从各个角度描述他的为人，而盈盈的出场则更是费功夫，先是只闻琴声不闻其人，还一直被当作老婆婆，一直不许令狐冲   回 头看自己的长相，直到倒影中现露真形，却没想到是一个娇滴滴的少女。
虽出场甚晚，“她才是女主角”的气场暴露无疑。&lt;/p&gt;
&lt;p&gt;任盈盈大概是最适合称得上“红颜知己”一词的了。
她从一开始便知令狐冲对小师妹的迷恋并因此反而恋上令狐冲，却从未将小师妹视之为情敌，反而主动出手相助；
她用聪慧才智和武艺多次为令狐冲解围，为救令狐冲甚至不惜陷身少林；
她尊重令狐冲的选择，看起来小气倔强，实则大度包容的很。
她最让我动容的一句便是，“直到此刻我才相信，在你心中，你终于是念着我多些，念着你小师妹少些。”
一直无怨无悔地和令狐冲共闯江湖的她，终于用自己的真挚赢得了他的想念。
到后来更无处不是默契与尽在不言中，这两人合奏一曲笑傲江湖倒真是绝配
——大概我喜欢助手，也是因为她对冈伦一次次相助与看似斗嘴的默契吧。
所谓伴侣，所谓知己，不正是如此么。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;另外推荐一个叫&lt;a href="http://sebsauvage.net/wiki/doku.php?id=php:shaarli"&gt;shaarli&lt;/a&gt;的个人网址管理工具，
php 写的，不需要数据库，相当轻巧，我已经放到自己的系主页上代替 delicious 用了，目前正在缓慢转移 ReadItLater(Pocket) 里的链 接——由此可见我果然把 ReadItLater 当作 ReadItNever 用了233&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;
&lt;/section&gt;</summary><category term="PC"></category><category term="生活"></category></entry><entry><title>赤印</title><link href="http://blog.skydark.info/acg/2012/06/29/crimson-imprint/" rel="alternate"></link><published>2012-06-29T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-06-29:acg/2012/06/29/crimson-imprint/</id><summary type="html">&lt;div class="label label-info"&gt;
想了想，还是删节一下，反正 git 有历史不担心。
&lt;/div&gt;
&lt;p&gt;&lt;a href="http://www.hollowings.com"&gt;赤印&lt;/a&gt;是由 Hollowings 组最近发售的一款国产同人游戏。 因为一些特殊原因，最近作为话题作被炒的沸沸扬扬。&lt;/p&gt;
&lt;p&gt;这篇算是一些感受。 如果涉及剧透，我会标注出来，请点击查看。&lt;/p&gt;
&lt;h2 id="预订期" class="js-toggle-next dropdown"&gt;预订期&lt;/h2&gt;
&lt;div markdown="1"&gt;
&lt;p&gt;赤印的宣传力度非常大。早在几个月前就在KF挂上了广告，并且还举办每日送游戏的活动。&lt;/p&gt;
&lt;p&gt;当时的介绍是“毁灭与救赎的恋爱ADV”，并标注&lt;em&gt;15X&lt;/em&gt;. 考虑到国产游戏走偏猎奇的甚多，该作简介又像是杀手故事，因此我对此并未上心。 我之前对 Hollowings 组也并不熟悉，仅知道他们制作过应是纯爱作的紫罗兰系列，并且似乎也颇有名气。 看到画风颇为合意，抱着&lt;em&gt;对KF的信任&lt;/em&gt;和&lt;em&gt;对国产的支持&lt;/em&gt;，我预订了这款游戏。&lt;/p&gt;
&lt;p&gt;预订后不久发生了一件诡异的事情。 Hollowings 官网开始搭售一款名为“大拔翁”的游戏。 无论从命名还是从简介上来看，大拔翁都毫无疑问是一款 18X 拔作。 这种铤而走险的举动让我感到非常困惑。 直到它从官网上消失为止，我也没有搞清楚它到底算是代理日本方面的产品还是其它什么的。 总之这件事搞得我当时一度想取消预订，但最终我还是抱持着善意移开了鼠标，继续着某个信任和某个支持。&lt;/p&gt;
&lt;p&gt;转瞬间，约定的6月24日到了。 看到别人提醒，我也去看了下自己的淘宝，上面显示“卖家已发货”。 与此同时，官网放出了体验版的&lt;a href="http://www.hollowings.com/download.html"&gt;下载&lt;/a&gt;。 我至今也没有去下载和试玩体验版，因为在我获知体验版的存在前，它的剧情就已经被传的沸沸扬扬了。&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="试玩版发布序章剧透警告" class="js-toggle-next dropdown"&gt;试玩版发布(序章剧透警告)&lt;/h2&gt;
&lt;div markdown="1"&gt;
&lt;p&gt;最早看到的剧透在&lt;a href="http://bbs.9gal.com/read.php?tid=338939"&gt;KF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;图就不放了，部分甚至官网都放着。 随便节选点文字：&lt;/p&gt;
&lt;div class="well" markdown="1"&gt;
&lt;ul&gt;
&lt;li&gt;女主在&lt;em&gt;12岁&lt;/em&gt;生日那天被12个&lt;a rel="tooltip" title="我们先不管为啥在 CG 上流浪汉们都白胖白胖的"&gt;流浪汉&lt;/a&gt;轮了&lt;/li&gt;
&lt;li&gt;琳其实是男孩子，&lt;em&gt;8岁&lt;/em&gt;那年被切了那啥&lt;/li&gt;
&lt;li&gt;女主在被轮之后得了艾滋病，然后和33个人OOXX过了，&lt;a rel="tooltip" title="谁能帮忙算一下和33个人OOXX并让其中至少32个染上 HIV 并且都死的比女主早的概率有多少，要知道数院一共三种人，我反正肯定不是会数数的那种"&gt;目前死了32个&lt;/a&gt;，程楠被男主打的负伤中&lt;/li&gt;
&lt;li&gt;女主他爸看到女主被轮之后很开心&lt;a rel="tooltip" title="这什么人渣"&gt;（这什么人渣&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;并且截图中可以看到被轮的&lt;em&gt;具体描写和CG&lt;/em&gt;. 官网上也更新了 &lt;a href="http://www.hollowings.com/image.html"&gt;隐晦的CG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;对于此事贵圈多个制作组发表了声明，比如&lt;a href="http://tieba.baidu.com/p/1687506306"&gt;YouthBloom组的声明&lt;/a&gt;，&lt;a href="http://tieba.baidu.com/p/1690839921"&gt;蓝天使组的声明&lt;/a&gt;和&lt;a href="http://tieba.baidu.com/p/1692401925"&gt;SP-time的声明&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;概括一下：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;大家对赤印的质量都没有任何评价，因为大家关注的不是赤印的质量，而是赤印中的越线行为；&lt;/li&gt;
&lt;li&gt;大家并不是因为赤印中的越线行为&lt;em&gt;自己&lt;/em&gt;无法接受而惊讶，而是因为那些行为已经触犯了道德底线，即使在日本也是违法的，他们却敢在大环境未成熟且更加危险的我朝做这些事情——简单地说大家担心的是因此而引发上面的注意，进而产生危及圈子的潜在危险性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为什么他们敢将大拔翁和赤印一起销售。因为他们&lt;strong&gt;本来&lt;/strong&gt;就是想试探底线。 从各个同人团体的回应来看，还不至于有跟风的队友。 但如果 Hollowings 组这次能够侥幸逃过一劫，从这次事件的宣传效果来看，他们毫无疑问会做更进一步的试探，而其支持者则会对别人的警告更加不以为然，事件的发展只会越来越糟。 从这个角度考虑，我反而更希望它早点被举报了，尽管我显然懒得这么做——毕竟，不能让其他队友为这种屁事担哪怕万分之一的风险。&lt;/p&gt;
&lt;p&gt;顺便说一句，为啥没人鸟大拔翁？呃，在火坑边伸腿的咱还可以劝劝，抱着油桶往里冲的怎么救……&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说到宣传效果，我经常看到有人说，“很多人只玩了体验版/甚至连体验版都没玩过只是听说过 就来批评太不负责任了”。 &lt;strong&gt;那不好意思，我一预订党就敢不玩体验版过来喷！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单地说，我预订的时候铺天盖地的宣传说的是什么？ 别跟我说“毁灭与救赎”就是被轮与去势； 别跟我说 21X 可以这么被你们指导为 15X； 别跟我说你们联系KF的时候还没想好让女主被轮； 别跟我说你们最后才去画那几张CG因此来不及放到网上； 别跟我说你们&lt;strong&gt;非要在淘宝上点下发货后才放出试玩版，然后点下发货后的第三天才真的发货！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不得不承认，你们的宣传非常成功。我几乎可以想象到你们抱着“反正都会被喷，干脆闹个大的”的心态放上试玩版的笑容。 说实在的，我并非不可以接受这样的剧情片段(虽然这不代表别人能够接受，更不代表这样做没有问题) —— 我 blog 首页的标题 Logo 就是一个 21X 游戏的女主角(这还是我唯一一次参与汉化的作品)，那个游戏比起你们的作品重口十倍以上。 如果你们提前告知我，我至少拥有选择的权力。 但你们选择了&lt;em&gt;耍小聪明&lt;/em&gt;，把精力全花在炒作和欺骗玩家下单上，以试图蒙骗他人的善意与金钱。 那不好意思，无论这次赤印制作的有多好销量有多成功，&lt;strong&gt;我也不愿意再和&lt;a rel="tooltip" title="应该是策划+剧本的 cexo，其他参与制作的人似乎都被他算计了"&gt;算计我的人&lt;/a&gt;打交道了&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;有关 Hollowings 组的背景，感谢基翅大发来的&lt;a href="http://bbs.sumisora.org/read.php?tid=228761"&gt;CK的链接&lt;/a&gt;。 虽然我尚未玩过紫罗兰，也没有办法完整了解整个事件的上下文(而且那个帖子删楼改楼情况严重)，但在这个帖子中我注意到了两点：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;紫罗兰的硬伤在组长 cexo 主笔的剧本上，且紫罗兰中就已经有&lt;strong&gt;某类场景&lt;/strong&gt;的文字描写了；&lt;/li&gt;
&lt;li&gt;这是我见到的唯一一个自己公然承认自己制作游戏时&lt;em&gt;为了名声而放弃了爱&lt;/em&gt;的同人游戏制作者。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不做功课是我的错误。但愿下次买国产的时候不需要做太深的功课。&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="alert alert-warning js-toggle-next dropdown"&gt;
最后，我很后悔在刚发售不久的时候去看了一眼赤印吧。
&lt;/div&gt;
&lt;div markdown="1"&gt;
&lt;div class="alert alert-danger js-toggle-next dropdown"&gt;
下面请允许我使用脏话。
&lt;/div&gt;
&lt;div class="well" markdown="1"&gt;
&lt;p&gt;赤印刚发售不久时的赤印吧内经常会看到一些狂热的家伙们，他们持有一种非常让人感到不可思议的思维方式(现在吧里好多了)。 我猜他们狂热的动力之一是“哦艹，这边弱势我们要保护它！你们都是没玩就来喷的坏人！”， 可能还有“这货是国产第一黄油，是我们这批冲破枷锁的新生代势力的代表！” 反正在他们心目中只有两种人，一种是代表正义向往自由的勇者(自己)，一种是不远万里专程来找茬的213.&lt;/p&gt;
&lt;p&gt;比如，&lt;a href="http://tieba.baidu.com/p/1691214661"&gt;这贴的5楼&lt;/a&gt;是我见过的最混帐的回复之一：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;说真の，进去了，能判多久？出来一样继续！&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是，这事和你伟岸的人生无关，只要你还有毛片看，只要你还有噱头游戏玩，谁进去了谁出来了谁这辈子毁了关你屁事是不？&lt;/p&gt;
&lt;p&gt;人家告诉他注意安全，他骂人家是个&lt;a rel="tooltip" title="这智商得多堪忧才能把别人的话理解成这样"&gt;维护体制&lt;/a&gt;的懦夫， 到最后好心提醒的都被死喷， &lt;a href="http://tieba.baidu.com/p/1691050040?pn=2"&gt;这贴的55楼&lt;/a&gt; 最后都不得无奈地说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你们到底对法院有多少意见，我不会管，我也管不着&lt;br /&gt;
我来这里发这个贴，是为了尽我最大的努力，避免这个组被请喝茶&lt;br /&gt;
当然对于某些人来说，有东西就行，制作组就是消耗品&lt;br /&gt;
神狐被抓了？换一个就是了&lt;br /&gt;
对于你们，我无话可说，你们爱怎么黑法院怎么黑，爱怎么黑体制怎么黑。&lt;br /&gt;
黑我个人？我不奉陪了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顺提，这位提醒者也是玩 21X 的。 事实上越是玩这类边缘游戏多的人，就越是清楚&lt;em&gt;保持这个圈子低调有多重要&lt;/em&gt;。 反而是第一次接触这些以为自己了不起的家伙们更容易兴奋不已地说“这哪里重口哪里犯罪啊？主流价值观弱爆了！”&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id="正式版"&gt;正式版&lt;/h2&gt;
&lt;p&gt;正式版中午收到的。圆通速度很快。&lt;/p&gt;
&lt;p&gt;包装是目前买过的同人游戏中最豪华的。 手边没有相机，直接拿摄像头代替了。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/game/cicover.jpg" alt="封面" /&gt;&lt;figcaption&gt;封面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src="/images/game/ciitems.jpg" alt="内容" /&gt;&lt;figcaption&gt;内容&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;一开始插进去光盘读不出来不知何故，不得不重启进 Windows 把安装文件复制到了硬盘上。 wine 对 krkr2 一直效果不错，除了有些字号变化的字体很奇怪的只能看到点，看回想可以看到，不知是否是 wine 的问题。 另外完全没有加密。&lt;/p&gt;
&lt;h3 id="剧情显然剧透" class="js-toggle-next dropdown"&gt;剧情(显然剧透)&lt;/h3&gt;
&lt;div markdown="1"&gt;
&lt;p&gt;流程有点短，我全通花了不到5小时。单线，主线分三个章节(其中序章在试玩版中已放出)，外带3个SP(其中第一个SP在试玩版中已放出)。&lt;/p&gt;
&lt;p&gt;如果不考虑违规问题，整体评价属于良作，其中剧本单独评价中上(我兼容性比较好)。 剧本感人但略黑暗，但最终也算有所救赎。 部分反映了社会阴暗面，但有些地方为黑而黑，洗白反而过于苍白，而且有些地方我感觉纯粹是毛片看多了……&lt;/p&gt;
&lt;p&gt;有些地方句子处理的不够细致，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，目前这个班级的状态对于我完成任务除了没有什么干扰和阻碍。 或许还能起到一定程度的辅助作用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外有些细节有些奇怪，比如在主篇中女主说自己在12岁前两年时洪老爷子就突然对其细心照顾了，但是到了争议最大的SP中对应的事件又变成了12岁前三个月； 另外第三章中洪老爷子给男主搞庆功宴也有点奇怪，毕竟男主是被当作和自己女儿之死有直接挂钩的，当然可以解释为下面的观众都知道老爷子找咒术师男主无痕杀女儿的事，虽然感觉这事不应该让别人知道，尤其还刻意举办让别人知道的庆功会，当然最终他的目的算达成了； 至于 HIV 的传染力和杀伤力就更懒得吐槽了， 不过女主得了 AIDS 这事没啥值得洁身党吐槽的，反正不去推不是，虽然剧本这里还非要丧心病狂地打擦边球……&lt;/p&gt;
&lt;p&gt;网上宣扬的最热烈的体验版SP，我认为完全没有添加的必要。 主情节提及女主被轮上 HIV 就已经足够苦13了，还非要把别人最苦13的事情的细节放到附录里供玩家仔细品味，是觉得玩家都和当时底下看的人一样丧心病狂么。 至于琳设定为8岁被割我就更看不出其意义所在了。&lt;/p&gt;
&lt;p&gt;顺提完全没必要把男女主角设定为18岁以下(男主在第三章过18岁生日)，非要让他俩办假身份证伪装20岁去租房么……当然就算这么设定H场景也是不可能的就是了，所以只是顺提。&lt;/p&gt;
&lt;p&gt;个人感觉，假如xo把炒作的精力多用点在剧本上，这本身可以是个好作品。 我只能说你这是在自己糟蹋同伴们的努力。&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;序章(In the Concrete Forest)描述主要角色和设定，到男主打倒程少一伙，女主介绍自己的过去为止。&lt;/p&gt;
&lt;p&gt;作为背景介绍和人物介绍不错。组织的概貌、主要人物的性格也算一目了然。 原本宣传介绍里男女主角的对话显得颇为中二(缩略版：“我来杀你的”“(按了一下赞)”)，这里结合两人的性格和男主的能力就没那么唐突了。 事实上，男女主角的个性都很突出，两个人的交互非常有趣。 至于半路杀出来又杀回去的程少，只能说你助攻辛苦了……(虽然画册里又把程少洗白了……)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二章(Pureland)描写男女主角逃到临镇相亲相爱的故事，到最终女主不治而亡为止。&lt;/p&gt;
&lt;p&gt;假如前一章还有些紧张气氛的话，这一章就很 Love Love 了(敞开心扉后的夜的确很萌，AIDS 娘也可以很萌的你们不要黑她)，直到后期女主的病愈发恶化为止。&lt;/p&gt;
&lt;p&gt;有两处擦边，第一处描写女主试图和男主结合，但在结合前因为自己有 HIV 不想传给男主而停止了。 第二处是男主帮女主在浴室擦身。&lt;/p&gt;
&lt;p&gt;老实说，第一处其实感情变化比较自然，只是作为国产商业作品，麻烦修饰下文字和图片，虽然你们的确“修饰”了图片，但是单拿出来谁都会觉得那是 HCG. 就算你在剧本里吐槽某些事情写出来“R15 就要变成 R18 了”也是一样的。&lt;/p&gt;
&lt;p&gt;最后男主因无力挽救女主而最终选择完成任务的那段确实很虐心，配合SP2和最终 title 伤人效果十分显著。 谁都会觉得这样一个纯净的夜不应该被这么邪恶的诅咒沾染，然而最终男主也无力改变命运。 和当初琳的离去不同的是，这次他选择陪在她身边直到最后一刻。&lt;/p&gt;
&lt;p&gt;本作介绍是“毁灭与救赎”，那么这里就是毁灭中的救赎。至少夜在最终获得了她的幸福。虽然如果就此结束的话，就是男主被毁灭的结局了。&lt;/p&gt;
&lt;p&gt;另外组织还真放心让男主去做这事啊，到了第三章我仍然这么觉得。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三章(Elegy)描写男主在女主身亡后继续执行真正的任务，最终在洪老爷子的庆功会上愤怒的情绪失控暴走，最终在被他救下的女孩那里得到救赎的故事。 这章的前半段相当于上一章的尾声，后半段相对独立一些，同时也挖了个大坑。&lt;/p&gt;
&lt;p&gt;这里出现了一处被调教的幼女的擦边场景。&lt;/p&gt;
&lt;p&gt;最后任务从杀夜转变到杀洪老爷子既是一个大坑(整个事件背后真正的委托人到底是哪个大佬？)，也是一个给玩家发泄的理由，毕竟就算洪老爷子怎么说自己在“为善”，玩家也会觉得牙齿痒痒的。&lt;/p&gt;
&lt;p&gt;洪老爷子在给男主办的庆功宴(P.S.:男主光棍节生日还真是辛苦了)上用侮辱女主和送给男主调教过的幼女让她当众表演来刺激男主的神经，最后使男主疯狂地杀掉了在场的所有恶人。 这段也算是给洪老爷子洗白了一点，因为这才是他对台下那些衣冠禽兽们蓄意已久的报复。 男主最后的疯狂杀戮实际上是给屏幕前的玩家宣泄的机会，虽然边杀戮边到处挖坑的行为仍然是不对的……&lt;/p&gt;
&lt;p&gt;空在男主疯狂前不停地在他耳边远程提醒他冷静和最后不得不请求支援的那段话外音效果处理的很赞，配合bgm完美地烘托出了紧张的气氛。当然从纯系统的角度考虑我希望能把这些纯语音的对白加入到 history 中……&lt;/p&gt;
&lt;p&gt;我倒是非常诧异组织竟然如此重视男主，在如此重大的过错面前竟然只是几乎象征性地惩罚了一下。从SP3中可以看出这里又是个大坑。&lt;/p&gt;
&lt;p&gt;男主曾经被至爱所救赎，然而她们却也都在救赎后离去。 只有这一次，他拯救了幼女，却也同时被幼女拯救了已死的心。 这样的结局使得整个故事最终不至于太过阴暗，至少还留有一点光明的未来，算是对剧中不断出现的葛平大叔般的天音“孩子，你还在期待这个世界的善吗”的回应吧。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第一个SP(Before The Age of 12)讲述的是女主角12岁生日那天发生的悲剧。 这是争议最大的一部分，我还是之前的见解，&lt;em&gt;这部分完全可以去掉&lt;/em&gt;。 有关女主童年的悲剧，完全可以对比空轨中玲的故事(顺便对比空轨SC和TC也可以看出审查的尺度)，在主线中暗指即可。 在SP中如此详尽地描写这部分故事，即不让人感动也不让人愉悦，事实上也没有所谓那种“实用性”，&lt;em&gt;除了吸引眼球恶意炒作外没有任何意义&lt;/em&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二个SP(Dream of Night)是从女主角度描写她临死前的幻想。 蛮虐心的，有点让我想起秽翼里小动物的那个附录，另一种意义上的丧心病狂啊丧心病狂(捶地)！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三个SP(Memories of Air)是从空的角度描写她的过去和第一次见到男主时的心境变化。 这段我承认我大段大段地看不懂。如果不是和前作相关，那显然是和后作相关了——反正续作是十有八九了，如果 H 组没被查水表的话。 这作流程不长，坑倒是挖了一大堆233……&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后，可攻略角色有点少——嘛本来就是单线，虽然还有空前辈(大姐头：“……”)。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="图像"&gt;图像&lt;/h3&gt;
&lt;p&gt;画师水准非常高。当初预订的原因之一就是画风。&lt;/p&gt;
&lt;p&gt;万语千言不如一图，给张全通后的 title 画面吧：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="/images/game/cititle.jpg" alt="Title" /&gt;&lt;figcaption&gt;Title&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;立绘表情也很丰富。&lt;/p&gt;
&lt;p&gt;另外夜捧着馒头的画面太噗了，虽然那张画面中感觉夜的发色被天空渲染成蓝的了……&lt;/p&gt;
&lt;h3 id="系统"&gt;系统&lt;/h3&gt;
&lt;p&gt;系统感觉算是赤印的短版。&lt;/p&gt;
&lt;p&gt;标题页面和开始游戏的按钮与窗口大小相比偏小了点，感觉怪怪的。&lt;/p&gt;
&lt;p&gt;所有转场、切换的地方都颇缓慢，而且没法跳过，有时有点抓狂。&lt;/p&gt;
&lt;p&gt;Skip 无论该段章节我是否读过，点下去都没有任何反应。&lt;/p&gt;
&lt;p&gt;Save/Load 画面感觉太素了点。顺提，以故事的容量来看10×8的存档容量有点没必要……&lt;/p&gt;
&lt;p&gt;同样 Option 菜单给人感觉也太素了，都是纯文字+方格。&lt;/p&gt;
&lt;p&gt;在全通后 CG 鉴赏始终显示 99%, 最后反复对比后发现是 cg_p_6.bmp 未显示，然后追查到脚本的 day6.ks 的 768 行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[eval exp=&amp;quot;sf[&amp;#39;cg_p_5&amp;#39;] = true&amp;quot;]
[eval exp=&amp;quot;sf[&amp;#39;cg_p1_6&amp;#39;] = true&amp;quot;]
[eval exp=&amp;quot;sf[&amp;#39;cg_p_7&amp;#39;] = true&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看来一定没黑盒测试过……&lt;/p&gt;
&lt;p&gt;附加：看 CG 99% 的问题一直没人管就自己修正了一下：&lt;a href="http://tieba.baidu.com/p/1698606720" class="uri"&gt;http://tieba.baidu.com/p/1698606720&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;呃，115挂了，也不知道是百度抽我地址还是吧主抽我地址，总之补丁下载地址更新：&lt;a href="http://pan.baidu.com/netdisk/singlepublic?fid=806906_4249005341" class="uri"&gt;http://pan.baidu.com/netdisk/singlepublic?fid=806906_4249005341&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="音乐cv"&gt;音乐/CV&lt;/h3&gt;
&lt;p&gt;音乐比较优秀，总体质量中上，而且和气氛融合的挺好的。 不过有时还是会感觉一大段时间耳边太静。&lt;/p&gt;
&lt;p&gt;title 曲感觉嘈杂了些。很喜欢全通后的 title, 和画面配合效果很好——尽管画面让人忍不住哀伤，音乐却能把思绪引导到更平静的方向上。&lt;/p&gt;
&lt;p&gt;OP 曲中规中矩，ED 相对好些，主要原因可能还是不习惯妹子的歌声……&lt;/p&gt;
&lt;p&gt;CV 表现的超出预期，可以打高分了。 女角色有时还是会有点读课文的感觉，男角色普遍放的很开，洪老爷子和程少的语气与角色都很贴合。&lt;/p&gt;
&lt;p&gt;空虽然是前辈，但是总感觉第一印象里声音应该更软一些，不过听多了觉得这姐姐一样的声音也蛮好的。 夜前期不带感情的声音感觉还可以更好(不带感情的声音其实蛮难配的)，后期我很佩服妹子对某些话能配的如此淡定大家都懂的……&lt;/p&gt;
&lt;p&gt;总而言之，赤印的配音是可以给作品加不少分的。&lt;/p&gt;
&lt;h2 id="总结"&gt;总结&lt;/h2&gt;
&lt;p&gt;能力和人品不见得是正相关的。 Hollowings 组的综合实力值得肯定，xo利益至上的人品值得怀疑。&lt;/p&gt;
&lt;div class="js-toggle-next"&gt;
Last Story
&lt;/div&gt;
&lt;div class="well" markdown="1"&gt;
&lt;p&gt;有这样一个小镇，镇民们特别偏爱品尝美味，以至于镇外的人经常误把他们当作吃货来笑话，但淳朴的他们并不在意。&lt;/p&gt;
&lt;p&gt;镇民中有些人家特别擅长做菜，就邀请镇民来品尝自己做的菜，也希望能以此向其他镇民展示自己心目中的美味是什么样子的； 也有些人家做菜比较花费精力，邀请的同时也会收点小钱，不指望赚钱，但求客人吃完能露出满意的笑容。&lt;/p&gt;
&lt;p&gt;几个月前，小镇上一户擅长做火锅的人家宣布他们即将推出一道新的火锅。 男主人非常高调，在镇里广发传单，保证即将推出的新火锅是全镇上最好的火锅，它既健康又好吃。&lt;/p&gt;
&lt;p&gt;家人们都非常努力，对材料精挑细选。 很多期待的镇民都预订了第一批火锅，就连邻居们也纷纷帮忙打广告了。&lt;/p&gt;
&lt;p&gt;终于到了发布的那天。 家人们笑容满面。他们虽然觉得新火锅味道偏咸，量也偏少，总归也是花费了大家无数努力，真正用心的好作品。 看到主厨的他端着它走了出来，他们与台下的镇民们一样都瞪直了眼睛。&lt;/p&gt;
&lt;p&gt;男主人说，“我们这道菜还差最后一道原料，是我自己创造的独门材料，大家看好了！”&lt;/p&gt;
&lt;p&gt;然后，老板往锅里扔进了好几块罂粟壳。&lt;/p&gt;
&lt;p&gt;当菜汤溅到周围的人的身上时，他们还不敢相信。&lt;/p&gt;
&lt;p&gt;离得近的镇民很清楚那是什么东西。没想到自己本来订的东西竟然是这个，下面愤怒的声音、惊恐的声音不绝于耳。&lt;/p&gt;
&lt;p&gt;有些年轻人却突然欢呼起来，“那是什么材料？好像很有趣的样子！”“从来没见过这样的做法，快来尝尝！”“你看大家的反应，肯定是超新奇的东西，咱们去试试！”……&lt;/p&gt;
&lt;p&gt;预订的人有的愤怒地离开，有的默默地忍受。 帮着做菜、帮着宣传的人担心自己会为此负责。 而因为好奇而来的人却络绎不绝。 虽然有人尝出了新材料的那种危险的香味，但是还是固执地说，这火锅味道鲜美，新材料虽然听说有点危险，反正味道挺好的，总应该去尝试一下嘛(“你看隔壁镇上卖麻醉药多久了也没人抓啊”)。更何况这火锅本来味道也是不错的，因为你连这点东西都受不了就否了一整锅也太过分了吧。上面那些XX局的老混蛋们接受不了新味道，怎么能听他们的呢。&lt;/p&gt;
&lt;p&gt;诚然，这的确本是道好菜。&lt;/p&gt;
&lt;p&gt;如果，新加的材料，不是&lt;em&gt;“那个”&lt;/em&gt;的话。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;也许这个小镇太小，很长时间上面都不会来管它。 也许这道菜热卖以后，会有人家也因为想卖的火热加进同样的材料。&lt;/p&gt;
&lt;p&gt;只是希望那个主厨，还记得这个镇上大家分享美味的初衷——不是为了门庭若市，不是为了盆满钵盈，仅仅是为了给自己、给这个本来就小的不能再小的小镇带来些许快乐罢了。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;在淘宝评价上思考再三最终没有写进评论的话，我还是留在这里吧：&lt;/p&gt;
&lt;div class="well" markdown="1"&gt;
&lt;p&gt;&lt;strong&gt;少在宣传上耍小聪明，少在内容上试探底线，脚踏实地做游戏，这本可以是款上佳的作品。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;26th Apr 2013:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tieba.baidu.com/p/2290130487" class="uri"&gt;http://tieba.baidu.com/p/2290130487&lt;/a&gt;&lt;/p&gt;
</summary><category term="acg"></category><category term="贵圈真乱"></category></entry><entry><title>newLISP 是如何令我惊愕忘形的</title><link href="http://blog.skydark.info/programming/2012/06/28/newlisp/" rel="alternate"></link><published>2012-06-28T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-06-28:programming/2012/06/28/newlisp/</id><summary type="html">&lt;p&gt;偶然看到&lt;a href="http://www.taoeffect.com/blog/2010/01/how-newlisp-took-my-breath-and-syntax-away/"&gt;这篇文章&lt;/a&gt;， &lt;a rel="tooltip" title="不然一个英语爆烂的非 Lisper 怎么会翻译一篇 Lisp 文章呢"&gt;感到非常有意思&lt;/a&gt;，忍不住想翻译一下。&lt;/p&gt;
&lt;p&gt;原文标题是“How newLISP Took My Breath (And Syntax) Away”，非常漂亮的一个标题，但是不知道怎么翻译好，就随便编了一个句子上来了……= =&lt;/p&gt;
&lt;p&gt;newLISP 是一种奇特的 LISP 方言，有非常鲜明和有趣的特点，这篇文章的作者以亲身经历对这些特点做了一个简要的概述。&lt;/p&gt;
&lt;p&gt;另外必须强调的是，尽管我清楚我英文(和汉语)是如此之烂(从高二高三没上过课到大学没翻过书)，但是因为确实感到很有趣，我还是忍不住想编一下…… 所以，如果&lt;strong&gt;英文水平在高一以上，或者熟悉 Lisp，推荐直接看原文好了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当然欢迎指正，如果这自High的私家地有人看的话……&lt;/p&gt;
&lt;p&gt;废话少说，&lt;strong&gt;&lt;em&gt;下面开始正文&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="alert alert-danger"&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Warning:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我不懂翻译，下面都是我瞎编的，现在我编不下去了……&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="newlisp-是如何令我惊愕忘形的"&gt;newLISP 是如何令我惊愕忘形的&lt;/h2&gt;
&lt;p&gt;作者：&lt;a href="http://www.taoeffect.com/blog/2010/01/how-newlisp-took-my-breath-and-syntax-away/"&gt;taoeffect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;几年前，一个鲜为人知的名为 &lt;strong&gt;newLISP&lt;/strong&gt; 的语言彻底地改变了我对什么样的程序语言才是“好的”的理解。&lt;/p&gt;
&lt;h3 id="为何是-newlisp"&gt;为何是 newLISP?&lt;/h3&gt;
&lt;p&gt;在说其它话之前，我愿意提出一个我的一些熟悉 LISP 的读者们可能会立刻询问的问题： &lt;strong&gt;为何是 newLISP? 为何不是 Clojure, Scheme, 或者 Common LISP?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答案是，在评估这些 LISP 方言之后，我得出的结论是， &lt;em&gt;newLISP有几处重要的优势超过了其它 LISP&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;在今天，不幸地是，每当有人在其它 LISP 的信徒们经常光顾的在线论坛上提及 newLISP 的时候，总是会爆发一场帮派战火。 一种特定方言的信徒(通常从没用过 newLISP)，会用污秽的话语吼叫， &lt;strong&gt;“newLISP 背弃了 LISP 取得的几乎所有优点”&lt;/strong&gt;，或者 &lt;strong&gt;“动态作用域是邪恶的！”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些情绪诞生的历史背景对那些观战者来说大多是未知的。 进而真相淹没于尘埃，讨论就此崩溃，混战因而散去，旁观者们继续回去啜饮他们的&lt;a rel="tooltip" title="Java是一种咖啡"&gt;Java&lt;/a&gt;，或者吃它们的&lt;a rel="tooltip" title="Python的原意是蟒蛇"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;我想值得庆幸的是，我对这门语言的介绍并没有从这些战斗中突然冒出来。 它在大多数部分上是基本没有偏见的。&lt;/p&gt;
&lt;h3 id="被称作-lisp-的东西"&gt;被称作 LISP 的东西&lt;/h3&gt;
&lt;p&gt;在就读于佛罗里达大学的时候，我选了一门有关人工智能的课程。 我们的教授不出所料地给班级介绍了一门名为 &lt;a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)"&gt;LISP&lt;/a&gt; 的程序语言。&lt;/p&gt;
&lt;p&gt;到那时为止，常见的那些不熟悉这门语言的人的传言和训诫构成了我对 LISP 的认识：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“喜欢它的人都是疯狂的痴迷者，认为自己超于常人！”&lt;/p&gt;
&lt;p&gt;“它主要用于人工智能方面的工作。”&lt;/p&gt;
&lt;p&gt;“没人把它用在实际用途中。”&lt;/p&gt;
&lt;p&gt;“它主要当作一门研究语言来使用。”&lt;/p&gt;
&lt;p&gt;“它代表‘&lt;a rel="tooltip" title="这句话的缩写恰好是 LISP"&gt;许多令人愤怒的愚蠢的括号&lt;/a&gt;’。哈哈！”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你想的对。 我对于它到底是什么没有丝毫头绪，但令我激动的是，我最终被迫到不得不揭示它的地步。 毕竟，我的成绩依赖它。&lt;/p&gt;
&lt;p&gt;我的发现是， LISP 实际上不负于其狂信者赋予它的令人畏惧的盛名。 简单地接触一些 LISP 的基本概念和哲学立刻对我作为一个程序员的能力产生了积极的影响。&lt;/p&gt;
&lt;h3 id="语法程序员的头号敌人"&gt;语法：程序员的头号敌人&lt;/h3&gt;
&lt;p&gt;LISP &lt;a href="http://www.taoeffect.com/blog/wp-content/uploads/2009/12/LISP-in-a-nutshell2.gif"&gt;相对缺乏语法&lt;/a&gt;可能是其最深刻的见解，因为我立刻对此感到如释重负。 我意识到绝大多数程序错误的根源正是语法。 语法创造了我简直未意识到的下意识的负担： 它引发错误、缺陷，并且使得将我的想法转换为代码的工作变得困难。 尽管我有多年使用基于 C 的语言的经历，并且密切熟悉它们的语法， 我仍然意识到它依然是拖慢我和其他每个人的完全无必要的负担。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是像 Lisp 一样的语言的一个巨大优势： 它们仅有非常少的方式构造复合表达式，并且几乎没有语法结构…… 在我们忘记语言的语法细节(因为没有)后不久便在实际问题上取得了进展。&lt;/p&gt;
&lt;p&gt;——Abelson 和 Sussman&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里的关键不是语法的大小，而是你能拿它做什么。 LISP 能使用其列表、函数、符号等基本概念做的事情，在像 PHP、Python 和 Ruby 这样的语言中需要一层特殊的语法。 它能用更优雅的方式做其它语言能做的任何事情， 并且仍然有足够的技巧去挽起袖管完成在其它语言中根本&lt;em&gt;不可能&lt;/em&gt;做到的壮举。&lt;/p&gt;
&lt;h3 id="common-lisp-一系列不幸的错误"&gt;Common LISP: 一系列不幸的错误&lt;/h3&gt;
&lt;p&gt;尽管有所有这些令人激动的发现，我仍然有一种不安的感觉。&lt;/p&gt;
&lt;p&gt;Common LISP (CL) 是对我之前认识的一种巨大偏离， 但它充满了文物的恶臭； 更糟糕的是，它的语法简直没有很好地考虑过。 它所渴求的“禅”一样的完美消失了。 这是一种 Mac 用户都太熟悉了的感觉： &lt;strong&gt;有太多的按钮，而且其中大多数都没必要&lt;/strong&gt;。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://www.taoeffect.com/blog/wp-content/uploads/2010/01/CL-in-a-nutshell.gif" alt="CommonLisp&amp;#39;s syntax" /&gt;&lt;figcaption&gt;CommonLisp's syntax&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;对比 C++，这很美妙。话又说回来，与 C++ 相比，&lt;em&gt;大多数&lt;/em&gt;语言都显得值得称赞。 在尝过丢弃 C/C++/Java 的语法转到 CL 所提供的自由的味道后，我看不出来&lt;em&gt;为何&lt;/em&gt;所有这些语法都是必要的，而且事实上，大多不是的。&lt;/p&gt;
&lt;p&gt;每一小段引入语言的语法都增加了程序员的精神负担，无论他是否意识的到。 我并不打算花费精力学习 Common Lisp ——如果能找到更好的选择的话。&lt;/p&gt;
&lt;div class="well"&gt;
&lt;h4 id="你说的语法是什么意思"&gt;你说的“语法”是什么意思？&lt;/h4&gt;
&lt;p&gt;你可能反对我将函数&lt;code&gt;defvar&lt;/code&gt;,&lt;code&gt;=&lt;/code&gt;,&lt;code&gt;eq&lt;/code&gt;,&lt;code&gt;eql&lt;/code&gt;等列入其中，因为它们是&lt;em&gt;函数&lt;/em&gt;。 我包括它们是因为它们构成了不能被 LISP 自身语法表达的低级功能。 换句话说，函数&lt;code&gt;=&lt;/code&gt;和&lt;code&gt;eq&lt;/code&gt;是必须在 LISP 语言的自身实现中定义的低级原语， 它们的含义和用法是不能从其它已有的 LISP 语法中演绎出来的。&lt;/p&gt;
&lt;p&gt;考虑 PHP 的&lt;code&gt;!=&lt;/code&gt;和&lt;code&gt;!==&lt;/code&gt;，它们都是&lt;em&gt;运算符&lt;/em&gt;，并且用相同的方式使用，然而这并没有告诉你任何有关它们之间的区别是什么的事情。 没有办法从语言的现有语义演绎出它们的含义，因此它们分别表示一种必须习得的新的语法。&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="我是怎样发现-newlisp-的"&gt;我是怎样发现 newLISP 的&lt;/h3&gt;
&lt;p&gt;教授向我们透露了我们的“主要课程项目”：我们要实现一个文字版本的&lt;a rel="tooltip" title="Chainshot"&gt;消同色&lt;/a&gt;游戏。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://www.taoeffect.com/blog/wp-content/uploads/2009/12/chainshot.png" alt="一个消同色游戏的实现" /&gt;&lt;figcaption&gt;一个消同色游戏的实现&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;消同色从一个充满带颜色的格子的网格开始。 你的目标是通过点击每个格子来清空盘面。 如果有与被点击的格子临近的同样颜色的格子，它们会一起消失。 这种效果会扩散到所有那些与它们相邻的格子上，如此下去。 接下来其它格子会掉落到消失的格子所留下的空档中。 如果有一整列消失了，那么所有该列右侧的格子都会左移来填补它。 在 OS X 上，有它的一个美妙和免费的实现叫做 &lt;a href="http://www.macupdate.com/info.php/id/24493/otis"&gt;Otis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;在期中时我们要做一个能让人玩的版本，然后到期末时我们得写一个 AI 来玩这个游戏。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“多说一句……”他说，“如果你用 LISP 完成它，你会得到 10% 的奖励。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而问题在于，大多数课程关注于 AI 的不同的算法和理论。 那些想得到这 10% 的奖励的人将不得不自学这门语言。&lt;/p&gt;
&lt;p&gt;多数学生选择放弃奖励而去使用一门他们已经熟悉的语言， 和大多数学生一样，我只有很少的时间， 所以我也偏向于那种情绪。 然而，我还是决定去 Google 搜索一下，看看我能不能发现一种更开胃的 Common LISP 的替代品。&lt;/p&gt;
&lt;p&gt;令我高兴的是我找到了一种似乎在所有选项上都符合的语言， 而且令人惊讶的是它竟然不是 &lt;a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)"&gt;Scheme&lt;/a&gt; (尽管那也是一门美妙的语言)。 像 Scheme 一样，这门语言极大地简化了 Common LISP 的语法， 但它同时又带有一个满载着用来完成现代化脚本任务的实用函数的标准库， 而且你运行它时所需要的所有东西就是单个轻巧的可执行文件！&lt;/p&gt;
&lt;h2 id="探索-newlisp"&gt;探索 newLISP&lt;/h2&gt;
&lt;p&gt;这是最终使我转为一个 &lt;a href="http://www.newlisp.org/"&gt;newLISP&lt;/a&gt; 爱好者的原因。&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://www.taoeffect.com/blog/wp-content/uploads/2009/12/newlisp-logo-horizontal-240x100.png" alt="NewLispLogo" /&gt;&lt;figcaption&gt;NewLispLogo&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我们有几个月的时间完成项目的第一部分， 在截止日期前的晚上，我还没有完成它的任何一个完整的&lt;em&gt;单个部分&lt;/em&gt;。 我在其它事情上花了一晚上，然后花了大概一小时那么些的时间去查看 newLISP 的网站并了解它。&lt;/p&gt;
&lt;p&gt;第二天，在我要提交我的可玩的完成版消同色的大约四个小时前，我在桌前坐下，戴上我的耳机，并着手在使用 newLISP 制作这款游戏的&lt;em&gt;同时&lt;/em&gt;学习它。&lt;/p&gt;
&lt;p&gt;我大约在 &lt;strong&gt;3 小时&lt;/strong&gt;内完成了，其中只有大约十分钟花在调试上。 我傻眼了。我发现了一种新东西，一门允许我迅速地写出(在多年与基于 C 的语言打交道之后)看似&lt;em&gt;恰好够用的几乎“无缺陷的代码”&lt;/em&gt;的语言。 这是一门我在短短数分钟内就接近&lt;em&gt;掌握&lt;/em&gt;的语言，而我在此之前从来没使用过它！ 在我学完 newLISP 而且用它写一个基于文本的游戏的时间里，我大概只够学完 Ruby 或 Python 的教程。&lt;/p&gt;
&lt;h3 id="newlisp-的力量"&gt;newLISP 的力量&lt;/h3&gt;
&lt;p&gt;我在这篇文章的开头声称newLISP有几处重要的优势超过了其它 LISP. 这些优势都可以总结为下面的话： &lt;strong&gt;如果你想要一门基于 Lisp 的脚本语言，选择 newLISP.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在深入到细节之前，让我先警告一下：&lt;/p&gt;
&lt;div class="well"&gt;
&lt;p&gt;&lt;strong&gt;newLISP &lt;em&gt;不&lt;/em&gt;是一门通用用途的程序语言。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;你不会用 JavaScript 去写一个 iPhone 应用(有人&lt;a href="http://www.nimblekit.com/"&gt;持不同的看法&lt;/a&gt;)，同样意义下， 你也不会用 newLISP 去写一个操作系统，或一个像 iTunes 一样的音乐播放器，或者一个像 Firefox 一样的网页浏览器。 对于这样的努力，我毫不犹豫地推荐 Clojure, Scheme, C, Objective-C 或者其它的语言——换句话说，那些适合于解决复杂、低层次问题，越快越好的语言。&lt;/p&gt;
&lt;p&gt;在 newLISP 的站点上最开头的话陈述道(强调部分是我自己添加的)：&lt;/p&gt;
&lt;div class="well"&gt;
&lt;p&gt;&lt;strong&gt;newLISP 是一门类 LISP 的，通用用途的&lt;em&gt;脚本&lt;/em&gt;语言。&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在很久以前，计算机还很慢的时候，LISP 社区被那些使用 C 和汇编的同行们所无情的嘲笑，因为它那&lt;em&gt;太慢&lt;/em&gt;的罪过。 自那以后性能问题一直是 LISP 社区的痛处，我敢说，这点仍然有待于完全恢复。 其焦点转向编译，并以此向世界证明它一样可以很快。 结果，似乎很少有人注意到对解释型和脚本化的通用用途的 LISP 的需求。&lt;/p&gt;
&lt;p&gt;幸运的是，newLISP 似乎相当适合这种角色。 它是一个通用用途的解释型脚本语言。 我个人的理解是，因为它是如此的动态，使得它甚至不能被编译为字节码(尽管这并不意味着它不快)。&lt;/p&gt;
&lt;p&gt;离开这种见解，它的一些设计决策将没有意义。 为何选择 f表达式替代宏？为何使用动态作用域而非词法作用域？ 为何使用&lt;a rel="tooltip" title="One-Reference-Only" href="http://www.newlisp.org/MemoryManagement.html"&gt;唯一引用&lt;/a&gt;的内存管理方式，而不是垃圾收集？&lt;/p&gt;
&lt;h3 id="设计与语法"&gt;设计与语法&lt;/h3&gt;
&lt;p&gt;newLISP 包含在单个轻巧的 200+KB 的二进制文件中。 在我尝试过的所有 LISP 的派生中，它是最容易安装、部署和开发的。 不知为何这么轻巧的包中不仅囊括了完整的语言，还包括各种函数，如读写文件、解析文本、正则表达式、并行运行代码、网络等等。 我是班上唯一一个在期末项目中提交了完全并行求解每个格子的 AI (可伸缩到任意数量的核心)的人。 我实现了它的唯一理由是因为我可以毫不费力地做到。 newLISP 实现它简单到令人乏味，这是因为它拥有 &lt;a href="http://www.newlisp.org/downloads/CodePatterns.html#toc-19"&gt;actor&lt;/a&gt; 和 &lt;a href="http://www.newlisp.org/downloads/CodePatterns.html#toc-18"&gt;Cilk&lt;/a&gt; 的功能。&lt;/p&gt;
&lt;p&gt;newLISP 的语法简约而深思熟虑。 为了与 Common LISP 的语法卡片对比，我已保持大多数属性(例如字号)一致：&lt;/p&gt;
&lt;figure&gt;
&lt;img src="http://www.taoeffect.com/blog/wp-content/uploads/2009/12/newLISP-in-a-nutshell2.gif" alt="NewLisp&amp;#39;s syntax" /&gt;&lt;figcaption&gt;NewLisp's syntax&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;函数不需要任何 &lt;code&gt;&amp;amp;rest&lt;/code&gt;, &lt;code&gt;&amp;amp;optional&lt;/code&gt; 的标记。 简单地传进变量或反之，没有得到值的形参将置为 &lt;code&gt;nil&lt;/code&gt;，多余的部分可以通过函数 &lt;code&gt;(args)&lt;/code&gt; 或符号 &lt;code&gt;$args&lt;/code&gt; 获取到。&lt;/p&gt;
&lt;p&gt;函数像大多数其它东西那样对自己求值。 你不需要一个特殊的 &lt;code&gt;#’&lt;/code&gt; 语法来存取它们。 函数也是&lt;em&gt;真正的列表&lt;/em&gt;。 这意味着你可以在它们已经被定义好后取得它们的&lt;a href="http://www.newlisp.org/downloads/newlisp_manual.html#source"&gt;源码&lt;/a&gt;，甚至&lt;em&gt;&lt;a href="http://kazimirmajorinc.blogspot.com/2009/04/crawler-tractor.html"&gt;在它们正在执行时修改它们&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id="f表达式与求值"&gt;f表达式与求值&lt;/h3&gt;
&lt;p&gt;作为宏的替代，newLISP 选择使用 &lt;a href="http://en.wikipedia.org/wiki/Fexpr"&gt;f表达式&lt;/a&gt;——根本不对其参数进行求值的函数(尽管有些令人懊恼的是，newLISP 称呼它们为宏)。 这项决定是有道理的，因为在一个解释型 LISP 中，几乎每件事情都在运行时发生， 在有些情况下 f表达式比宏执行的要快很多。 这也意味着 newLISP 的“宏”不需要特殊的反引号语法，使得它们更容易读写。&lt;/p&gt;
&lt;p&gt;你可能听说过在其它语言中反对使用 &lt;code&gt;eval&lt;/code&gt; 的训诫。 在 newLISP 中这是不适用的。 newLISP 的 &lt;a href="http://kazimirmajorinc.blogspot.com/2008/12/speed-of-newlisp-eval-test-v100.html"&gt;eval 比其它 LISP 都要快&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这导致了许多后果，其中一个是有时 newLISP 的 f表达式可以&lt;a href="http://kazimirmajorinc.blogspot.com/2009/04/on-macro-expansion-evaluation-and.html"&gt;比在其它 LISP 中编译后的宏还要快&lt;/a&gt;， 而这也意味着使用 &lt;code&gt;eval&lt;/code&gt; 不再是令人皱眉的事情，这开辟了各种编码的可能性。&lt;/p&gt;
&lt;h3 id="相等与内存管理"&gt;相等与内存管理&lt;/h3&gt;
&lt;p&gt;值得注意的是，只有一种相等算符——等号。 newLISP 能够逃脱是因为其称为&lt;a href="http://www.newlisp.org/MemoryManagement.html"&gt;唯一引用(ORO)&lt;/a&gt;的内存管理模型。&lt;/p&gt;
&lt;p&gt;简而言之，大多数东西都是&lt;em&gt;传值&lt;/em&gt;的，所以你最终不再需要那些荒谬的比较函数。 如果两个东西有相同的值，它们就是相等的——就是这样(除了 &lt;a href="http://www.taoeffect.com/blog/2009/12/introducing-objective-newlisp/"&gt;Objective newLISP&lt;/a&gt; 的情况)。&lt;/p&gt;
&lt;p&gt;这并不像听起来那样疯狂。 在内部， newLISP 通过引用在内建函数中传递数据，并且还做其它的优化。 你可以通过&lt;a href="http://www.newlisp.org/downloads/CodePatterns.html#toc-3"&gt;上下文和符号&lt;/a&gt;来使用引用传递数据，或者使用 &lt;a href="http://www.taoeffect.com/blog/2009/12/introducing-objective-newlisp/"&gt;Objective newLISP&lt;/a&gt;. newLISP 的 ORO 也意味着&lt;a rel="tooltip" title="newLISP’s ORO also means repeatable code execution times"&gt;可重复的代码执行次数&lt;/a&gt;； 你永远也不会经历“垃圾收集地狱”，因为根本没有垃圾收集器。&lt;/p&gt;
&lt;h3 id="动态作用域"&gt;动态作用域&lt;/h3&gt;
&lt;p&gt;newLISP 对&lt;a href="http://en.wikipedia.org/wiki/Scope_%28programming%29#Dynamic_scoping"&gt;动态作用域&lt;/a&gt;的使用经常被小题大作。 的确，动态作用域&lt;em&gt;可以是危险的！&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在相同意义下，&lt;em&gt;指针和酒精也可以是危险的！&lt;/em&gt; 但这不意味着你永远不应该使用 C 编程或者在聚会上享受。 你应当检查 &lt;code&gt;NULL&lt;/code&gt;，不要酒后驾车，并且当心“自由变量”。&lt;/p&gt;
&lt;p&gt;记住，newLISP 是一门解释语言。 newLISP 的作者 Lutz Mueller 做了一个简单的成本/收益分析，然后选择了动态作用域，因为它比词法作用域更快，而且动态作用域的潜在陷阱很容易被避免。 比起这样做：&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode scheme"&gt;&lt;code class="sourceCode scheme"&gt;(&lt;span class="kw"&gt;define&lt;/span&gt;&lt;span class="fu"&gt; &lt;/span&gt;(my-unsafe-func)
    (println my-var)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;替代为这样做：&lt;/p&gt;
&lt;div class="sourceCode"&gt;&lt;pre class="sourceCode scheme"&gt;&lt;code class="sourceCode scheme"&gt;(&lt;span class="kw"&gt;define&lt;/span&gt;&lt;span class="fu"&gt; &lt;/span&gt;(my-safe-func my-var)
    (println my-var)
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个很小的用来改善性能的代价，并且通常情况下拥有动态作用域的确是相当方便的(特别是在与不再被忌讳的 &lt;code&gt;eval&lt;/code&gt; 组合的时候)。 如果你仍然需要词法作用域，newLISP 也&lt;a href="http://www.newlisp.org/downloads/newlisp_manual.html#expand"&gt;照顾&lt;/a&gt;&lt;a href="http://www.newlisp.org/downloads/newlisp_manual.html#letex"&gt;到了&lt;/a&gt;&lt;a href="http://www.newlisp.org/downloads/newlisp_manual.html#contexts"&gt;你&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="并行处理"&gt;并行处理&lt;/h3&gt;
&lt;p&gt;newLISP 使用一种有趣的方式并行运行代码。 Clojure 使用&lt;a href="http://clojure.org/refs"&gt;高级方法来使用多线程和确保安全性&lt;/a&gt;， 而 newLISP 则简单地利用其小巧的体积来让操作系统完成所有该做的事情！&lt;/p&gt;
&lt;p&gt;没有线程。 通过 &lt;a href="http://www.newlisp.org/downloads/CodePatterns.html#toc-19"&gt;actor&lt;/a&gt; 和 &lt;a href="http://www.newlisp.org/downloads/CodePatterns.html#toc-18"&gt;spawn/sync&lt;/a&gt; 很容易写出安全的并发代码，因为 newLISP &lt;em&gt;简单地 &lt;a rel="tooltip" title="UNIX 中用 fork 来复制当前进程产生新进程，并用写时复制来减少其开销。不知道如何翻译，感觉直接叫原名大家更熟悉……"&gt;fork&lt;/a&gt; 它自己&lt;/em&gt;。 其谦逊的身材使得这项操作变的相当的低廉，并允许操作系统处理调度和内存保护。 试试 fork 一个 JVM…… :P&lt;/p&gt;
&lt;h3 id="优秀的文档和社区"&gt;优秀的文档和社区&lt;/h3&gt;
&lt;p&gt;newLISP 的文档是&lt;a href="http://www.newlisp.org/downloads/manual_frame.html"&gt;我曾见过的优秀文档中最好的范例之一&lt;/a&gt;，简直超越了我所意识到的所有其它 LISP 的文档。 你不需要掏钱买一本书学习它，因为它不需要书！ 包括参考文档在内的简短手册是你学习这门语言所需要的所有东西。 它的文档是我能够成功拖延我的期中考试的主要原因之一。&lt;/p&gt;
&lt;p&gt;如果我不得不挑一个词来描述 &lt;a href="http://newlispfanclub.alh.net/forum/index.php"&gt;newLISP 的社区&lt;/a&gt;，这个词可能会是&lt;strong&gt;“惬意”&lt;/strong&gt;(对 Common LISP而言，这个词可能是“粗暴”)。 每个人的问题都会被听取并且快速而友善地回答，不需要拘谨。 Lutz Mueller 往往会回答你的问题或者直接将你的建议采纳到语言中。 这是一个小社区，没错，但它也是敏捷的，并且能够快速地变化而不需要什么政策约束。&lt;/p&gt;
&lt;h3 id="其它优点"&gt;其它优点&lt;/h3&gt;
&lt;p&gt;还有&lt;strong&gt;其它许多优点&lt;/strong&gt;，我将不会详细地论述它们：&lt;/p&gt;
&lt;div class="well"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.newlisp.org/downloads/newlisp_manual.html#eval_rules"&gt;两种逐字字符串的语法&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://newlispfanclub.alh.net/forum/viewtopic.php?f=16&amp;amp;t=2770&amp;amp;p=15571#p15571"&gt;REPL 中带 tab 补全的 Readline 支持&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.newlisp.org/downloads/newlisp_manual.html#unicode_utf8"&gt;完整的 Unicode 支持，字符串为 UTF8&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.newlisp.org/downloads/CodePatterns.html#toc-21"&gt;简单强大的分布式计算&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.newlisp.org/downloads/CodePatterns.html#toc-22"&gt;内置的 web 服务器&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.newlisp.org/downloads/newlisp_manual.html#indexing"&gt;数组、列表和字符串的隐式索引与切片&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.newlisp.org/downloads/newlisp_manual.html#loading_contexts"&gt;简单的状态存储与读取&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.newlisp.org/downloads/CodePatterns.html#toc-23"&gt;简单的 C 接口&lt;/a&gt;(意味着你绝不会错过高速的库)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="结论-相关链接"&gt;结论 + 相关链接&lt;/h2&gt;
&lt;p&gt;newLISP 是一块货真价实的璞玉，尽管它缺乏炒作，但仍然美丽动人。&lt;/p&gt;
&lt;p&gt;如果你觉得这篇文章很有趣，你可能会觉得下面这些链接值得一看：&lt;/p&gt;
&lt;div class="well"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.newlisp.com/"&gt;newLISP 的主页&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.rundragonfly.com/"&gt;Dragonfly——一个 newLISP 网页框架&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://kazimirmajorinc.blogspot.com/"&gt;Kazimir Majorinc 的博客&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://unbalanced-parentheses.nfshost.com/"&gt;Cormullion 的博客&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.newlisp.org/index.cgi?Code_Contributions"&gt;更大的一张 newLISP 相关链接的清单&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Twitter: @&lt;a href="http://twitter.com/newlisp"&gt;newlisp&lt;/a&gt;, @&lt;a href="http://twitter.com/taoeffect"&gt;taoeffect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="lisp"></category><category term="programming"></category></entry><entry><title>我的移植汇总贴</title><link href="http://blog.skydark.info/transplant/2012/06/25/transplant/" rel="alternate"></link><published>2012-06-25T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-06-25:transplant/2012/06/25/transplant/</id><summary type="html">&lt;p&gt;详情见&lt;a href="http://tieba.baidu.com/p/1683675420"&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;总之就是某位机锋实习纠察同志把秽翼移植贴手滑掉了。
有点哭笑不得，大概是刚拿到权力不久又正义感太强吧。&lt;/p&gt;
&lt;p&gt;想了想，还是先在自己这边留个备份吧，怒求别查水表……&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;我的移植玩具&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;2009/07/01 鸑鷟橘子传(未发布)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2009/07/10 &lt;a href="/pages/fate.html"&gt;Fate Stay Night&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2011/01/20 &lt;a href="/pages/3days.html"&gt;3days&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2011/04/25 &lt;a href="/pages/realsister.html"&gt;实妹相伴的大泉君&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2011/05/30 雪之本境(未发布)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2011/06/12 雾之本境试玩版(未发布)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2011/06/19 &lt;a href="/pages/eustia.html"&gt;秽翼的尤丝蒂亚&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="ons"></category><category term="3days"></category><category term="type-moon"></category></entry><entry><title>为什么 Lisp 经久不衰</title><link href="http://blog.skydark.info/programming/2012/06/15/why-lisp/" rel="alternate"></link><published>2012-06-15T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-06-15:programming/2012/06/15/why-lisp/</id><summary type="html">&lt;div markdown="1" class="alert alert-danger"&gt;
&lt;strong&gt;&lt;em&gt;Warning:&lt;/em&gt;&lt;/strong&gt;

你将看到的是毫无价值的胡言乱语，现在按 Ctrl-W 还来得及！&lt;/div&gt;&lt;hr&gt;
&lt;div class="alert alert-warning"&gt;
我警告过你了。&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;div id='toc-here'&gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;其实一开始想拟的题目是“为何程序员都应该了解 Lisp”，然后仔细考虑了一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我不是程序员。实际上，我连码农都不是。更准确地，我没记得自己写过啥实际可用的东西。我唯一算能用的语言是 python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我不了解 Lisp. 大三下半年听裘宗燕教授讲过一学期的 SICP，虽然&lt;a rel="tooltip" title="大学的考试大家都懂的"&gt;成绩倒说的过去&lt;/a&gt;，但实际上确实很多地方啪啪啪的就过去了，而且习题做的极少，我是很怀疑自己还记得多少真谛的。而且 SICP 是&lt;a rel="tooltip" title="虽然现在改 python 了"&gt;以 Scheme 为工具&lt;/a&gt;，以讲程序设计思想为主，并且&lt;a rel="tooltip" title="如果不是这样，就更说明我没仔细看书了"&gt;刻意避开了宏&lt;/a&gt;。除此之外，我对 Lisp 的理解基本都是因为兴趣无意中看到的各种文章。所以事实上，我的确是不了解 Lisp 的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我甚至并没有打算继续深入 Lisp. 我认为 Lisp 是必须了解的程序语言之一，但我不认为必须要学会 Lisp，尽管如果我心血来潮可能会试着读一下 On Lisp. 我是说，心血来潮的话。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以以自己的实力来说，写这样一篇文章显然是在胡说八道；
而胡说八道放在公开的地方(虽然这里我不以为算太公开就是了……)等于立活靶子。
不过我想，给将来的自己留点反思和笑料总是好的。
上面说这么多废话的目的就是强调，这篇文章是为了给自己吐槽的。
所以总之，别当真。&lt;/p&gt;
&lt;p&gt;附：下面主要使用 Scheme.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;历史悠久的 Lisp&lt;/h2&gt;
&lt;p&gt;1958年诞生的 Lisp 是至今仍被人们广泛使用的高级语言中资历第二老的前辈(第一是1957年诞生的 Fortran)。
它的设计者，今年刚逝世的人工智能之父 John McCarthy，最初是在一篇谈论计算理论的论文中设计了 Lisp，并仅仅将它当作一种计算模型.
出乎 J. McCarthy 的意料，他的学生意识到这种理论模型完全可以实现为一个真正的程序语言，并真正实现了 Lisp 的编译器。&lt;/p&gt;
&lt;p&gt;Lisp 诞生的时代仍然是过程式语言的天下，在这种情况下横空而出的 Lisp 显得格外不可思议。
超前许多的 Lisp 在近代对编程语言的影响愈发深远——if-then-else、递归、动态类型、垃圾收集、一类函数、惰性求值、闭包……
实际上，很多优秀的近代语言都在追求用更让程序员习惯的语法来实现 Lisp 最常用的功能。
最具有代表性的例子大概是 Ruby，Ruby 是如此的借鉴和接近 Lisp，以至于可以将 Ruby 视为一种包装了优美语法糖的裁剪过的 Lisp 方言——&lt;a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/179642"&gt;MatzLisp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;但实话实说，Lisp 的思想虽然与当时的高级语言如此格格不入，其实也并不是一件特别值得惊奇的事情——因为 Lisp 一开始就不是为具体的一台机器设计的。
&lt;em&gt;Lisp 并不是程序语言，而是数学模型。&lt;/em&gt;
而当时的其他程序语言并不是如此，它们是基于机器模型设计的。
“程序语言是表达人的思想的，而不是表达机器的操作的”这样的想法，在当时硬件紧缺的时代并没有得到重视。
J. McCarthy 一开始就超脱机器思考问题，是 Lisp 超前于同时代其他程序语言的关键。&lt;/p&gt;
&lt;p&gt;Lisp 的背后是数学，是递归论和 lambda 演算。
一门程序语言能保持50余年的兴旺实属不易，而这样的事情对于数学来说反而并不奇怪。
J. McCarthy 是在深刻理解&lt;em&gt;计算&lt;/em&gt;的本质后设计的 Lisp 语言，它经久不衰是必然的。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;简单优雅的 Lisp&lt;/h2&gt;
&lt;p&gt;假如评选世界上形式最简单易学的程序语言的话，Lisp 应该能排到前列——如果不是最前面的话。&lt;/p&gt;
&lt;p&gt;事实上，直到写这篇胡言乱语之时，我才意识到 Lisp 是我了解的第一门计算机语言。&lt;/p&gt;
&lt;p&gt;我小学五年级的时候曾经买过一本(实际上是上下两册)名为《数学游戏》的书，它是《科学美国人》杂志上有关数学部分的文章的集锦。
在那本书上有很多关于计算机的内容，其中有连续若干篇(大概3篇，记不清了)文章介绍了 Lisp 语言，顺便示范了怎样求解阶乘和汉诺塔。
那时连计算机什么样子都没见过的我不仅看的津津有味，而且还真的看懂了。
考虑到我一向愚笨，这大概能说明 Lisp 有多简练。&lt;/p&gt;
&lt;p&gt;但为什么我一直没有意识到自己了解的第一门语言是 Lisp 而不是 Basic 或 Foxbase 呢？
一个很好的理由是：那时对数学最感兴趣的我，根本没有把这门语言视为计算机语言，而确实地如那本书的标题所言，将其视为了一种“数学游戏”。
数学追求的是简单优雅的至美(“我的工作总是努力将真与美统一起来；但是，如果只能选择其中之一，那么我选择美。”——H. Weyl)，对计算机毫无背景的我能从 Lisp 上嗅到这种味道。&lt;/p&gt;
&lt;p&gt;Lisp 使用 S-表达式来存储代码和数据。
不严格地说，S-表达式就是符号或者符号/S-表达式的列表(用括号包起来并用空格分开每个元素)罢了。基本上只要见过 Lisp 程序的人都能读——这里是说能读出层次，而不是读出含义。&lt;/p&gt;
&lt;p&gt;而在 S-表达式之上，我们只需要定义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;atom, eq: 对原子符号的判断;&lt;/li&gt;
&lt;li&gt;car, cdr, cons: 对 S-表达式的操作;&lt;/li&gt;
&lt;li&gt;quote: 对数据的标记;&lt;/li&gt;
&lt;li&gt;cond: 条件判断;&lt;/li&gt;
&lt;li&gt;lambda, label: 对函数的构建和标记。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就能实现一个最基本的 Lisp 解释器了。
SICP 中就用 Scheme 实现了一个 Scheme 解释器。
实际上，在很多近代高级语言中，实现一个最最基本的 Lisp 解释器都不必花太多精力。&lt;/p&gt;
&lt;p&gt;然而，设计简单并不意味着能力弱。
我们知道，即使是一个只能做加一减一和条件跳转的计算系统也可以是图灵完备的。
Lisp 不仅是图灵完备的，而且还能很容易的实现自己。
而对比图灵机模型，实现通用图灵机却相当艰辛。
那是因为通用图灵机将图灵机视为数字，然后大量工作都在对这个数字做 parse；
而 Lisp 告诉我们，只要代码和数据都使用同一个模型同一套处理方法，做这些事情易如反掌。
Lisp 的简单优雅由此可见一斑。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;没有语法的 Lisp&lt;/h2&gt;
&lt;p&gt;见过的对 Lisp 的抱怨中最常见的就是“Lisp 的语法咋这么别扭呢”、“那堆括号不会觉得密集恐惧症么”等等。
但实际上，我们通常认为 &lt;em&gt;Lisp 是弱语法的&lt;/em&gt;，或者可以更通俗地直接当作没有语法的。&lt;/p&gt;
&lt;p&gt;关于 Lisp “语法”的意见，一方面是关于 S-表达式的括号的意见，一方面是关于 S-表达式的前缀表示法的意见——简单地说，都是关于 S-表达式的意见。&lt;/p&gt;
&lt;p&gt;但是事实上，S-表达式与其说是 Lisp 程序的&lt;em&gt;语法&lt;/em&gt;，不如说是 Lisp 程序的&lt;em&gt;存储格式&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;我们对比一下，
大多数程序语言使用纯文本保存源代码，
而来自数学的 Lisp 本来就使用 S-表达式 表示源代码，只是我们不得不再次将其转换为纯文本进行读写罢了。
J. McCarthy 一开始关心的就是计算本身，设计的本来就是一种抽象模型，根本就没有考虑过 parse 的事情。
就像 RDF，它本来也只是一个关系模型而已，只是恰好选择了用 XML 表示而已。
它完全可以用其他方式表示，只是可读性的差别罢了。
Lisp 也是类似的。&lt;/p&gt;
&lt;p&gt;事实上，Lisp 和 XML 之间有很清晰的关系。
&lt;a href="http://www.defmacro.org/ramblings/lisp.html"&gt;这篇&lt;/a&gt;介绍 Lisp 的文章(很容易找到中文版)一开始就从 XML 入手，然后告诉大家 XML 和 S-表达式本质上是很接近的。
纯文本格式通常描述平坦结构，基于纯文本的 XML 和 S-表达式表达的则是一种层次结构。
只是 XML 更侧重于数据，而 S-表达式既可能是数据，也可能是代码——考虑到语法总是用来表达语义的，而单纯的一个 S-表达式你根本无从判断它是代码还是数据，所以将 S-表达式视为存储格式而非语法是恰当的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;现在站在 S-表达式的层面上来看 Lisp 的语法，那么 Lisp 的语法只剩下前面构造 Lisp 使用的几个关键词(各种方言有自己的扩展所以还有更多的一些词)。
但是通过 Lisp 的宏，你甚至可以重定义其中的一些关键词。
所以 Lisp 的语法是非常弱的。
如果经常在宏上工作，你甚至意识不到 Lisp 语法的存在。&lt;/p&gt;
&lt;p&gt;S-表达式实际上相当于一棵被解析过的语法树。
更进一步，我们考虑任意一种编译语言(解释语言等其实也是类似的，这里为了方便而已)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;S-表达式可以用来表示&lt;em&gt;任何&lt;/em&gt;语言的语法树；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个编译器(的后端)将代码树翻译为机器代码，这个过程是可计算的——显然，否则这个编译器就无法实现；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个翻译过程可以用 Lisp 实现，因为 Lisp 是图灵完备的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这意味着：你可以将任何语言的语法树不加修改的直接传递给 Lisp，而 Lisp 自然的视之为数据进行处理，翻译为 Lisp 代码执行。
更进一步的：&lt;/p&gt;
&lt;p&gt;4.这个翻译过程可以用 Lisp 的宏实现。&lt;/p&gt;
&lt;p&gt;这就意味着，你甚至不需要将这棵语法树当作数据处理，&lt;em&gt;直接当作代码执行&lt;/em&gt;都是可行的。
所以说，Lisp &lt;em&gt;没有语法&lt;/em&gt;，它天然是构建 DSL 的终极武器。&lt;/p&gt;
&lt;p&gt;对于其他语言来讲，构建元语言的步骤也是类似的。
我们拿以元编程能力为豪的 Ruby 为例(再次提醒，Ruby 继承了 80% 的 Lisp)。
Ruby 可以使用&lt;em&gt;自己的语法&lt;/em&gt;构建一套外表非常漂亮的 DSL.
但是问题就在于，你&lt;em&gt;只能&lt;/em&gt;使用 Ruby 的语法——无论它看起来多么赏心悦目，它还是 Ruby 的那套语法。
关键点是，只能使用固定的语法实际上也就意味着只能表达固定语法所能表达的语义。&lt;/p&gt;
&lt;p&gt;比如说在没有 Until 的 Python 中，如果需要添加能表达 Until 语义的关键词，就不得不修改 Python 的语法。
在 Ruby 中，如果我们假设 Ruby 删掉了 Until，那么可以通过 Block 显得优雅的实现它。它是基于 Block 的特性实现的。
这也就意味着 Block 的局限也会限制这种语法的表达。我们再看另一个例子。&lt;/p&gt;
&lt;p&gt;我们试着构造一个 or 函数，它的含义正如其名。
我们希望 &lt;code&gt;or(False, True, 1 + 0) = True&lt;/code&gt;.
这很容易，大多数高级语言都可以完成。&lt;/p&gt;
&lt;p&gt;好，现在我们希望这个 or 具有短路求值的功效，
即 &lt;code&gt;or(False, True, 1/0) = True&lt;/code&gt; 而不是出错。
这意味着我们要对每个参数进行惰性求值。
如果语言没有内置惰性求值，我们就不得不自己实现它，但这往往会破坏代码的外观。&lt;/p&gt;
&lt;p&gt;简单起见，拿 Ruby 为例，在 Ruby 中我能想到的最好的实现方法是：&lt;/p&gt;
&lt;p&gt;提醒：我的 Ruby 和 Scheme 水平堪忧。
{:.alert .alert-warning}&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己实现一个惰性求值函数 lazy，它接受一个 Block 并将其保存下来(P.S.: Scheme 的标准文档中提供了一个 lazy 的宏实现，也可以与这里做对比，但我想没这个例子这么突出，因为 Block 确实是一个很漂亮的语法形式);&lt;/li&gt;
&lt;li&gt;对 or 的每个参数用 lazy 和 Block 包装起来——为什么不能直接把每个参数用 Block 包装起来然后 or 保存下来惰性求值？因为 Ruby 只能显示地接受单个 Block。通过保存 Block 为 Proc 可以存储多个 Block——而这正是 lazy 函数做的事情。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以用 Ruby 实现的话，最终短路求值的 or 将被写成(暂且不提 lazy 的实现)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;or_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Ruby 中 or 是关键字且不能更改，这里改叫 or_new)&lt;/p&gt;
&lt;p&gt;很明显的，Ruby 的语法限制了表达能力。&lt;/p&gt;
&lt;p&gt;来看一下无语法的 Lisp. 我们只需要把上面那句话的翻译成 S-表达式表示的语法树(scheme 中已经有 or 了，所以这里叫做 or-new 避免混淆，但你仍然可以直接定义成 or)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or-new&lt;/span&gt; &lt;span class="no"&gt;#f&lt;/span&gt; &lt;span class="no"&gt;#t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;/ &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后想想怎么定义 or 宏：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define-syntax &lt;/span&gt;&lt;span class="nv"&gt;or-new&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;syntax-rules &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;or-new&lt;/span&gt; &lt;span class="nv"&gt;exp1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;exp1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;or-new&lt;/span&gt; &lt;span class="nv"&gt;exp1&lt;/span&gt; &lt;span class="nv"&gt;exp2&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nv"&gt;exp1&lt;/span&gt;
          &lt;span class="no"&gt;#t&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;or-new&lt;/span&gt; &lt;span class="nv"&gt;exp2&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It works!&lt;/p&gt;
&lt;p&gt;更进一步，你甚至可以用 Lisp 写出这样的东西然后拿宏去解析它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sql&lt;/span&gt; &lt;span class="nv"&gt;select&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;some-table&lt;/span&gt;
            &lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="nv"&gt;column1&lt;/span&gt; &lt;span class="nv"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Yes&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;and &lt;/span&gt;&lt;span class="nv"&gt;column2&lt;/span&gt; &lt;span class="nv"&gt;like&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;some%string%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者甚至用 &lt;code&gt;sqrt(x) = 3&lt;/code&gt; 来表示 &lt;code&gt;x&lt;/code&gt; 的值为 9，这在其他语言中简直&lt;a href="http://lists.warhead.org.uk/pipermail/iwe/2005-July/000130.html"&gt;匪夷所思&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;记住：Lisp 中没有任何语法限制框住你，因为 Lisp 只有一种语法——那就是没有语法！&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;擅长抽象的 Lisp&lt;/h2&gt;
&lt;p&gt;一个语言(不仅是程序语言，也包括自然语言)的表达能力体现在很多方面。
而表达能力中最重要的一点是&lt;em&gt;抽象能力&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;所谓语言的抽象能力，就是表示从一类问题和模式中挖掘出的本质的能力。
一方面，要有能表示的能力；另一方面，要表示的足够清晰简洁。
汇编语言的抽象能力是很低的，因为它下放的层次太低，过于接近机器而远离人类的思维。
假如我们一直在使用汇编语言来编写程序，难以想象现在这些面向对象、异常处理等思想会从中诞生，因为我们大多数时间都会在细节的泥沼中挣扎。
一个人使用的程序语言的抽象能力，实际上影响了他思考问题的方式。&lt;/p&gt;
&lt;p&gt;Lisp 中一切都是 S-表达式，因此一切都是平等的，无论是原子、列表、函数、过程，甚至宏。&lt;/p&gt;
&lt;p&gt;在 Lisp 中，函数与一般的列表没有什么区别，它可以被当作函数的参数，可以被当作返回值，可以赋值为变量，可以存储到数据结构中，这被称作是“一类函数”。
这在一些语言中难以实现也难以理解。
在 C 中，一类函数实际上是函数指针，但是 C 中代码与数据界线分明，很多人理解函数指针、理解回调的时候都会感到这是一个很大的槛。
而在 Lisp 中这却自然到不能再自然——函数也是个 S-表达式，与一般的表达式没什么区别，仅此而已。&lt;/p&gt;
&lt;p&gt;Lisp 的闭包也是自然的，它实际上是一个来自数学和逻辑的概念。
拿一个 Python 程序为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们执行 &lt;code&gt;h = f(1)&lt;/code&gt;，它返回一个函数，这个函数是&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到问题了吗？这里 &lt;code&gt;x&lt;/code&gt; 取什么值根本不知道，这种变元即为自由变元，这样的函数返回了也无法求值。&lt;/p&gt;
&lt;p&gt;所以我们把“ &lt;code&gt;x&lt;/code&gt; 的值是 1 ”这件事情也悄悄地绑在返回的函数上，把自由变元封闭成约束变元，这个函数将来就可以正常求值了，这种把自由变元也闭合起来的函数就是(静态作用域的)闭包。&lt;/p&gt;
&lt;p&gt;当然 Python 的闭包实际上与真正的闭包还有一些差距，与它的对象可变性有关。
Anyway, 这种时候还是让 Java 程序员们对闭包纠结和争执去吧。
如果语言没有这种抽象能力，使用语言的时候自然也不会用这种方式思考，自然也不会觉得这种能力有用了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;除了抽象函数之外，我们还可以抽象过程。
在 Lisp 中常被称作 call/cc，即 call-with-current-continuation, scheme 要求实现的功能之一，在部分没有内置支持的 Lisp 中可以直接用宏实现出来。&lt;/p&gt;
&lt;p&gt;call/cc 将当前的执行过程抽象为一个符号，然后传给一个函数计算。
简单地说，程序执行过程实际上就是当前位于代码中的哪个位置，加上当前的环境状况而以。而执行程序的时候，就是位置的改变和环境的改变。
如果我们允许函数自己保存或修改这些参数，决定下一步执行哪里，就可以随意控制程序的执行过程了。
这就意味着，虽然在 Lisp 中没有循环、没有异常处理、没有 break、没有 return……等等各种控制结构，这都没有关系，我们都可以用 call/cc 来抽象并实现它。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;宏实际上就是一种转换固定代码模式的能力，它能抽象出程序的组织方式，并且用最简单和自然的方式表达出来。
对应到数学中，这实际上就是我们在证明定理时做的符号变换和指代。&lt;/p&gt;
&lt;p&gt;程序的组织方式中最经典的例子是设计模式。
有些设计模式是好的被经验所验证的思考问题的方式，而更多的设计模式实际上是程序语言抽象能力缺陷的体现——一种代码组合经常以类似的方式出现，程序语言却没有能力把它抽象成更简单的形式，不得不 Repeat Yourself，进而就变成了设计模式。&lt;/p&gt;
&lt;p&gt;当然，宏是一个大杀器。
所谓能力越大责任越大，使用宏的第一原则就是&lt;em&gt;不要使用它&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;当然不是说 Lisp 的宏本身有很大的危险。
和 C 的宏不同，Lisp 的宏非常安全，一方面它直接基于语法树，而不是 C 这样经过一次 parse，所以不会像 C 那样因为缺少括号等问题导致混淆；另一方面，卫生宏的存在也使得宏替换的安全性有理论保证。
在很多语言中，代码动态转换是非常危险的，只有 Lisp 除外。&lt;/p&gt;
&lt;p&gt;宏就像一把屠龙刀，很多时候能用一类函数解决的问题就不应该使用宏，而这种情况往往占了大多数。
但是不要忘了，程序设计中的龙可不少——龙书的封面就是例子。
如果只知道一类函数而不知道宏，就容易在面对龙的时候缺乏灵活性。
就好像面对火龙只知道用剑，却没有注意到它的头顶有一块摇摇欲坠的巨石一样。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;更多的现代程序语言在更适合纯文本的表述与抽象能力之间进行折衷，即追求形式美与表达力的结合。&lt;/p&gt;
&lt;p&gt;形式美是多种多样的，
追求精炼的喜欢 Perl，
追求清晰的喜欢 Python，
追求灵动的喜欢 Ruby……
这些都是程序语言的“形”，它们哪种更美因人而异，并没有哪个具有真正意义上的绝对优势。&lt;/p&gt;
&lt;p&gt;而它们的表达能力却都逐渐向 Lisp 靠拢。
例如 Ruby 的 Block，实际上是对一种最常见的介于一类函数和宏模式之间的抽象——这种宏不对传进的代码做处理，与一般的闭包差距也只有很小的一点(主要原因是 Block 中默认不是 Local Variable，以及同时打包了部分控制流)。
松本行弘也在他的书中说道，Ruby 引入块就是为了高阶函数，而高阶函数中大部分是只有一个函数参数的，于是他便将这种最常用的形式用更美观的方式包装成了 Block.
只是受限于其纯文本的语法，不得不受到了限制，一方面是数量限制，另一方面是一定要显示地标记为块结构，而不能像宏那样不留痕迹，同样还有运行开销的问题。&lt;/p&gt;
&lt;p&gt;当一门语言的设计逐渐不以机器为主导而以人的思维为指导时，
这门语言就愈发接近计算的本质——而 Lisp 本来就是以此为指导思想设计的语言。&lt;/p&gt;
&lt;p&gt;Lisp 彻底超脱了 plain text，通过 S-表达式与宏来实现了二者的统一。
Lisp 通过丢弃程序语言的“形”，来真正展现程序语言的“神”。
站在抽象表达能力顶端的 Lisp 对于现代程序语言来说是一座早就确立的灯塔，自然不会轻易衰落。&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;无处不在的 Lisp&lt;/h2&gt;
&lt;p&gt;一种程序语言的兴起往往与很多语言之外的因素相关，比如它首先依托的项目，它得到的经济支持，早期关注者的影响力，杀手级的应用，是否恰好顺应了当时机器的发展与程序员的思维水平，库的丰富程度等等。
然而 Lisp 与其它语言不同，它比起一门程序语言，更应该视为一种数学模型和一种思想。
Lisp 和它的思想不会消亡，只会更加广泛地融入到各种现代程序语言中。
试着去体会 Lisp 的精髓，对程序与计算的思考会更加深刻。&lt;/p&gt;
</summary><category term="programming"></category><category term="ruby"></category><category term="lisp"></category></entry><entry><title>为了朋友和明日 - 11eyes</title><link href="http://blog.skydark.info/acg/2012/06/06/11eyes/" rel="alternate"></link><published>2012-06-06T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-06-06:acg/2012/06/06/11eyes/</id><summary type="html">&lt;div class="alert alert-danger" directive="danger"&gt;
&lt;header&gt;您即将看到的部分有严重的 11eyes 剧透。&lt;/header&gt;
&lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;section class="" directive="toggle"&gt;
&lt;header class="js-toggle-next dropdown alert alert-info"&gt;题外&lt;/header&gt;
&lt;article&gt;
&lt;div&gt;
&lt;div class="well"&gt;
&lt;p&gt;最xx近身体状态奇差无比，这两天也正在拉肚子，大脑也是停转状态，挽……&lt;/p&gt;
&lt;p&gt;呆xxx子前天从11区飞回来，拉着于孙子晚上一起搓了顿。在11区呆了N久日语竟然还是没啥长进= =||&lt;/p&gt;
&lt;p&gt;据x孙子说中科院最近跳了一个(好像还是在提前发现异常派专人严加看管的情况下跑到西单跳的……)，结果他们领导动员所有人一起开会教育，这尼玛越教育越能逼出问题吧233……&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
&lt;/section&gt;
&lt;p&gt;11eyes 是上周末通的，kdays 版的汉化，十分感谢汉化组，另外自动更新这点太赞了。&lt;/p&gt;
&lt;p&gt;我应该是在去年暑假看过动画版，不过当时因为某些原因身心俱疲，应该是看的很不仔细，反正通的时候我感觉我被剧透的部分不算太多，所以通完后又去回顾了一下动画版。
得出结论就是：&lt;/p&gt;
&lt;div class="alert alert-warning" directive="warning"&gt;
&lt;header&gt;动画世界全是幻觉无误(#FML)！&lt;/header&gt;
&lt;div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;简单地比较吧，动画版看完了毫无感觉以至于一年后都记不得多少剧透，游戏版玩完后热血沸腾了好久以至于到今天才能缓过来写感想。&lt;/p&gt;
&lt;p&gt;从整个剧本的节奏来说，相比与后面激烈的战斗，前头的日常似乎拖的太长了点。
还好推过前作 3days， 还算比较适应。
尤其是看到雪子的时候，我极度担心她被 3days 里的月子灵魂附体进行绝大多数都与主题无关的长篇大论，还好她最终还算是忍住了= =
不过即使是 3days，引入主要角色(除开门后才得知本体的人物)也只花了3天而已，11eyes 里引入单个我方角色都得差不多用3天吧汗……&lt;/p&gt;
&lt;p&gt;分支点比较清晰，日常选项基本偏向谁都能看出来(除了栞那个，要亲自把猴子送到保健室才有可能后来打开与栞 H 的选项，只是为了知道“创可贴赛高”么233)，战斗选项虽然不是特别明显，但选错马上就死所以也好推进。&lt;/p&gt;
&lt;p&gt;Cross Vision 系统一开始不知道干啥的，后来发现的确是个不错的系统。
老实说有些 CV 里才能看到的剧情放到主线里插述也未尝不可(甚至不看是很大的损失)，不过总的来说这样既可以节约主线长度并保持节奏，也能保证剧本的完整性。
只是比较麻烦的是只有标题画面的 CV 是全局的，游戏进行中的 CV 只能看到当前线路中打开的 CV，对收集全 CV 来说很麻烦。&lt;/p&gt;
&lt;p&gt;最奇怪的地方是，自己高中在集训队寂寞的时候曾经想过一个剧本(后来终究还是没那么寂寞就放弃了)，然后玩 11eyes 的时候发现重合度蛮高的，就算考虑上去年曾经看过的已经忘的差不多的幻觉动画版，推的时候还是基本上该猜的都猜出来了，甚至包括最后菊理卖队友的原因(虽然我承认在 CV 里看到菊理卖队友的感觉和加速世界三四卷里看到千百合的感觉一样，虽然知道肯定有用意但是还是想摔啊233)……没准太王道剧情了？当然主角最终发现是反派的确是比较少有的设定，所以这个撞的我非常意外，而我玩游戏时才意识到更是非常意外……&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;驱哥在动画版中莫名其妙地从可不杀人士变成了必须干掉的关键人物。
相比之下，我果然还是更喜欢在游戏中为了朋友放弃安全的身份选择战斗的驱。&lt;/p&gt;
&lt;p&gt;驱哥前半段过的可谓相当憋屈，有无论如何都要保护的人，却完全没有力量，甚至和小混混打架都无能为力。维拉德质问驱是否需要力量的时候，我感觉自己的想法和驱是完全同步的。
驱后来的成长历程虽然飞速甚至有些作弊，但又不显过于突兀。&lt;/p&gt;
&lt;p&gt;而全篇最燃的部分，莫过于驱在最后面对魔女时劫之眼全开的那段战斗了，可以与 Fate HF 线里士郎面对黑化B叔使用射杀百头那段相媲美了。“只要有使之死亡的可能，就一定要在所有可能中找出并使它成为事实”，当驱最终达到那种可能时，魔女也释然地死在了作为维拉德的他的怀中。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;水奈濑由佳应该是游戏与动画版差距最大的一个人物了。
动画版我除了主角一行是反派，以及美玲学姐是正宫外(严肃貌)，唯一记得清楚的就是由佳那黑到不能再黑的嫉妒心了。
本来继承自 3days 中环那样的青梅竹马属性+主角地位+软妹子全开+惊人半球应该是会有不少人气的，但嫉妒心这一项就让她和环的地位明显拉开了。&lt;/p&gt;
&lt;p&gt;而且由佳的能力在前期一直处于完全沉默状态，后期虽然呈现出来也没有做到稳定发挥，而且还是不分敌我的技能，在整个队伍里确实地位尴尬。&lt;/p&gt;
&lt;p&gt;老实说，游戏版里的由佳虽然对驱与自己距离拉远感到嫉妒，但是完全没有动画版那么夸张。
动画版中给美玲的茶中放利器、对队友的伤害毫不关心，完全是在塑造一个反面形象。
而游戏版中，无论由佳怎样嫉妒，她仍然是重视大家的，只是希望驱能更多看自己一些罢了，从某些角度来说算是稍微热烈点的少女心罢了，至少并没有什么邪念。&lt;/p&gt;
&lt;p&gt;当然，考虑到动画版中刻意让由佳看到了群众喜闻乐见的补魔场景(雾)，没准游戏里要是添加这样的分支的话由佳也会黑，虽然我觉得还是不会像动画那样黑到比包大人还黑……&lt;/p&gt;
&lt;p&gt;另外不管哪条线都要(哪怕是在幻觉里)和由佳H一次是闹哪样……(我个人感觉还是美玲和菊理的更实用些摔)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;草壁美玲是正宫毫无疑问继续严肃貌=。=&lt;/p&gt;
&lt;p&gt;团队的绝对领导与定心丸。与敌人正攻的主要战力。驱的老师。严肃的思考与对话方式。&lt;/p&gt;
&lt;p&gt;面对绝对实力差时也会颤抖的少女。为了得到父亲认可而拼命苦练的少女。懵懂地爱慕着驱的少女。偶尔会困惑和娇羞的少女。&lt;/p&gt;
&lt;p&gt;我方团队中最值得信赖的人，却也是一团隐藏着自己少女心的烈火。
在早期，美玲体现的更多的是她的可靠与坚强。在每场与黑骑士的殊死搏斗中，美玲都起到了至关重要的作用。
然而，即便再强，她也是一名普通不过的女孩子，也喜欢可爱的猫咪，也为女仆装羞涩。
而当残酷的事实将她压的喘不过气来，当她双目无神的时候，屏幕前的我和驱一样感到心痛不已。
不过果然，美玲学姐还是会像以前那样站起来的。&lt;/p&gt;
&lt;p&gt;当草壁美玲最终选择作为一位女人，宁可被噬身也要用童子切安纲击败草壁操的时候，这团火焰用生命燃烧出了最炫目的光辉。&lt;/p&gt;
&lt;p&gt;——我果然还是最喜欢坚强不屈的少女了么。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;橘菊理姐姐作为隐藏结局主角在公共线远没有其他人抢镜。
在战斗中最前线的往往是美玲和雪子，菊理总是站在后方支援，最常见的就是在必要的时刻出来减缓敌方行动力、关键时刻替队友做防护、战后护理。
假如菊理不存在的话，至少美玲的行动要顾虑更多。&lt;/p&gt;
&lt;p&gt;在日常中，菊理给人的感觉是超可爱体贴，是绝好的妻子形象。
在我心目中她比由佳可爱的多，大概仅次于美玲。&lt;/p&gt;
&lt;p&gt;不过总是举着牌子表达自己心意的她，比其他人更容易隐藏自己内心的想法。很多时候她想的很多，却最终只写下寥寥数语。比其他人更爱别人，也比其他人更寂寞。
这样的她最终成为拯救所有人的神，最合适也最让人心痛。
很高兴和感谢 LASS 最终还是给默默地爱着所有人——尤其是“他”——的菊理安排了一个最美好的结局。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;雪子和贤久这一对，初感觉怪怪的，但又感觉很合适。&lt;/p&gt;
&lt;p&gt;雪子在动画版里给我留下的唯一印象就是电波女，电波女太让人头疼了……
在游戏中她冷酷的眼神和残忍的过去给我留下的印象却更深一些。
还有一处印象深刻的地方是她刺向给她披外衣的驱之后的表情。
当时自己心里突然就对造成这样状况的草壁操的强烈的恨意——对雪子来说，本来到此时她的幸福才刚要开始。&lt;/p&gt;
&lt;p&gt;之前一直听过忘却之剑，却不知道这首歌是在雪子和贤久相杀时播放的。
动漫歌曲最吸引人的地方在于，它们背后都是有故事的。
当自己知道这背后的故事后，再听同样的曲子，感触却更加深刻了。
这段在 CV 里的剧情我觉得完全应该放在主线上。&lt;/p&gt;
&lt;p&gt;彩子老师在动画版中几乎没啥存在感，游戏中才知道她和贤久二人即是母子，也是恋人的关系。想想彩子和两人构成三口之家(?)的感觉，突然觉得很有趣。&lt;/p&gt;
&lt;p&gt;贤久是个好基友，真的。在选择雪子线通关的时候我感觉自己非常抗拒，尤其看到贤久对基友抢走自己心爱之人仍然致以祝福的时候。
还是那么说，虽然感觉两人配一对怪怪的，但果然他俩才是最合适的啊。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;百野栞在动画中完全是酱油。游戏中一方面惊讶于其战斗力，一方面惊讶于其创可贴= =&lt;/p&gt;
&lt;p&gt;黑骑士在动画中给我留下印象的只有草壁操，因为剩下几位都是被秒的命，不得不说这极不科学。&lt;/p&gt;
&lt;p&gt;游戏中每次与黑骑士的遭遇都是一场至燃的生死战，哪怕是第一个黑骑士，主角一行三位战力全力围攻，最后拿下的也颇为惨重。
而在动画版中，感觉黑骑士的战力和普通人类无异；事实上，草壁的惊人能力也完全看不出来，搞得感觉所有的战斗都是普通的打斗，只是对手形态不够雅观罢了……&lt;/p&gt;
&lt;p&gt;至于游戏中每次出现都会给局势带来巨大转折的草壁操(第一次单独出现使得主角全员不能移动心态直接从乐观降到谷底，第二次直接导致主角阵营破裂，第三次斩断美玲的两把爱剑，第四次直接宣告主角一行是恶)，在动画中也只是比其他黑骑士更优雅罢了，其魄力完全没有反映出来。&lt;/p&gt;
&lt;p&gt;不得不说，对手不够强大怎么能烘托主角的强大啊233&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;结果感觉自己完全没怎么说感受，完全在吐槽动画版么……果然我不应该用自己不擅长的方式表达自己的感觉的……&lt;/p&gt;</summary><category term="[acg"></category><category term="lass]"></category></entry><entry><title>临界V</title><link href="http://blog.skydark.info/acg/2012/05/13/ljv-sptime/" rel="alternate"></link><published>2012-05-13T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-05-13:acg/2012/05/13/ljv-sptime/</id><summary type="html">&lt;p&gt;第一次去漫展，和高师兄还有他的好基友一起去的……
高师兄经验丰富，从大一就开始去了(当时还不叫临界)。&lt;/p&gt;
&lt;p&gt;过去的时候九点多一点，第一感觉是队伍好长……当时还没放行进入，队伍应该有百米以上……&lt;/p&gt;
&lt;p&gt;不得不说腐女果然战斗力十足，六排摊子(注：数院的学生有三种，一种会数数，一种不会数数)中一排男性向，两排综合向(有个摊子上还有小圆脸的本子上面清楚地写着“R18”和“Adult only”，真的没问题么……)，剩下三排全是女性向(其实还有个叫一般向的，但那是啥……)。
我们是最后逛的女性向，结论是有些摊位无法直视(挤不进去)，有些摊位也无法直视(已盲)……&lt;/p&gt;
&lt;p&gt;进去后第一个看的是 sp-time 的摊子。
进去的比较早，当时只有我一个人。
第一次见到小仆，是个标准的高大魁梧的山东黑大汉(依小仆以前的说法，这是一个机器人，里头是萝莉无误)，人十分亲切。
此时我再次认识到了自己交流能力技能点为0的优势(说自己是贴吧的，然后意识到自己很久没在贴吧说过话了，因为看到标题就觉得说不上什么bgm38)，买了一点东西表示了下支持，看到有别人来了就撤了……
期待8月雪境解密篇吧。&lt;/p&gt;
&lt;div class="alert"&gt;&amp;lt;p&amp;gt;另外友少的本子真多……&amp;lt;/p&amp;gt;&lt;/div&gt;&lt;p&gt;基本逛完 sp-time 的摊子我的此行的目的就达到了(……)，然后就是跟着师兄逛。
除了些无法直视的摊位，最大的感受是 coser 们的战斗力真高，比如头戴杜甫纸袋送水的妹子，三只同样装扮一起拍照的由乃，后头还有一只白丝里能看到腿毛的由乃(……)，ACG 从娃娃抓起的好家长，在 sp-time 周围颇抢人气的露易丝，FZ 不科学组……&lt;/p&gt;
&lt;p&gt;总之，尽管还是不适应这种外向宅齐聚的场合，但在现场确实也很受感染(耻度也下降很多)，明年带不带相机呢……&lt;/p&gt;
</summary><category term="acg"></category><category term="sptime"></category></entry><entry><title>有关 AI 的辩论研讨会记录</title><link href="http://blog.skydark.info/thinking/2012/05/11/ai/" rel="alternate"></link><published>2012-05-11T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-05-11:thinking/2012/05/11/ai/</id><summary type="html">&lt;p&gt;这两天(11日-12日)在我校办的一个和 AI 有关的会议， 题目就是“计算机到底能做什么？——人工智能的理论限度”。 因为觉得很有趣，趁还有点记忆，极为散乱地记录如下。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;说是辩论，自然有辩论双方。 因为没有正反方一说(虽然明显有是否主流的区别……)，所以称之为攻守方。 攻的是认为人工智能可实现的王培教授(美国天普大学)， 守的是认为人工智能永远不可能实现的周昌乐教授(厦门大学)。 当然，在两人介绍彼此观点后的一开始，反而感觉攻守完全反过来了；不过到第二天又觉得攻守方向又重新转回来了……&lt;/p&gt;
&lt;p&gt;两位主辩经历颇为传奇，一位是侯世达的弟子，一位是马希文的传人；一位专注一个方向数十年，一个每年做十个方向(雾，不过也可能不是误，因为周连中医都有博士生的……)。 两位非常清楚下面一桌围观群众和一排不明真相的围观群众对他们彼此掐架喜闻乐见，因此纷纷表示会把自己做成一个大靶子供大家射击，主持人和众围观群众也竭尽全力试图让两人互掐，事实也证明俩人掐人能力都不错……&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;行程上，第一天上午除了一些致词外，就是两名主辩亮明自己观点。下午讨论了前两个问题。第二天上下午讨论后四个问题。在讨论每个问题前会有一个教授做一个简单的专题报告。&lt;/p&gt;
&lt;p&gt;必须得说，茶歇的食品很受欢迎，虽然每次茶歇的质量单调下降……另外贵校学生请自行解决午餐晚餐bgm38……&lt;/p&gt;
&lt;p&gt;P.S.: AC100 太给我面子了，第二天我开了它将近7小时(虽然关了无线)，还剩 25% 的电力……&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;几位教授的观点都比较鲜明，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;周昌乐教授：&lt;/p&gt;
&lt;p&gt;果然是禅宗大师，在介绍自己的观点的一开始就讲心识和古印度的唯识学，比如意识的五蕴(色 行 想 受 识)什么的，我们几个不明真相的围观群众纷纷表示虽不明但觉厉……&lt;/p&gt;
&lt;p&gt;擅长地图炮，比如“我反对一切语义学”、“搞哲学的都是胡说八道”什么的，虽然后来为了照顾在场的哲学系教授把第二句修正成了“我是说你们没事瞎创造啥理论没啥意思，你们应该搞批判”……&lt;/p&gt;
&lt;p&gt;周的观点更像纯哲学观点。总的来说，周相信，&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;真正的“意义”是不可由符号表达的，因为一但表达出来，就已经是符号而非原本的意义了；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更特别的，一定存在一些道理是“只可意会不可言传”的，是需要“体悟”的——比如禅宗。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;王培教授：&lt;/p&gt;
&lt;p&gt;这学期在旁听王培教授的课，所以对他的观点相对熟悉，关键是一些实现细节也知道。对他的理论持保留态度，但是总的来说，他的很多哲学思想我是信服的。 所以写完发现自己基本主要记录的都是王培的想法，因为他的想法我容易补出来233&lt;/p&gt;
&lt;p&gt;这次辩下来，我是觉得王培更胜一筹的，当然哲学系的没准会有分歧。&lt;/p&gt;
&lt;p&gt;王的观点是基于其工程背景的，对我们来说更贴切些。王的观点一直是：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;智能是在有限资源的情形下根据已有经验适应环境的能力；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们应该承认存在人类之外的智能形式；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;智能是一个层次上的问题。王培反对“归根结底”这类的词汇，比如“人工智能归根结底就是一堆01”.实际上智能是体现在观测的层次上的。我很赞同这种观点。比如说，人归根结底还是一堆细胞，从这个层次看是看不出智能的，智能恰恰体现在更高一层的组织结构上。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;老板：&lt;/p&gt;
&lt;p&gt;“这个问题(有时会加上限定领域的话)是一定可以形式化的！” 老板几乎每次都会重复这个观点，以至于后来每次他要开口大家都替他说了233&lt;/p&gt;
&lt;p&gt;本次会议老板充分展现了他随风而来随风而去的特点……不过按老板的原话，“我们搞 AI 的就是想来听听你们搞哲学的的观点开拓开拓思路，你们那些玄学啥的咱都不感兴趣”，所以基本上对那些过于哲学的问题老板都懒得发表看法，只要老板说话，基本都是谈实际解决方案，除了形式化外最常用的词汇就是 search/planning/decision/...&lt;/p&gt;
&lt;p&gt;另外老板掐架绝对一流——倒不是主动拉人出来战个痛，老板属于在发表观点的时候能面不改色地顺便把你的毛病纠出来会心一击然后好像没事一样继续说……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;主要围绕六个问题，下面按六个问题分开记录，它们是：&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;1. 如果要构建像人类一样思维的机器，成功的标准是什么？图灵测验吗？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="well"&gt;
&lt;p&gt;智能科学系的王立威教授做的专题报告《人工智能所需要的要素》。&lt;/p&gt;
&lt;p&gt;首先他认为智能是一种相对环境的实现目的的能力。 他认为图灵机是无智能的，因为图灵机适应的环境过于简单。 下棋程序也是无智能的，因为其环境也相对稳定。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;我觉得“图灵机适应的环境简单”这句话是很奇怪的。 作为一种抽象机，它的纸带能表达数字，其实也能表达各种环境。&lt;/p&gt;
&lt;p&gt;这一点我用王培的观点来解释，“是一个看问题的层面的问题”。 比如从神经元的角度看，我们是看不出人的智能的，尽管智能最终还是靠它们构成的。我们只有从更高的角度才能看到智能。 我想图灵机也是一样。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;他还强调图灵机的限制在于其带符号等结构是固定不可增长的(表达)，且具有局部计算性(计算)。 他认为局部计算性是不应抛弃的，但表达应有所提升，应允许有限但可任意增长的符号集、状态等。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;但这种扩充仍然不会改变图灵机的能力。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;周和王一致同意，应该并且只能通过行为判断机器是否具有智能。 这是由于&lt;strong&gt;他心知&lt;/strong&gt;的原因，即“子非余，焉知余……”的问题。 我们只能通过行为主义检测机器是否有智能。&lt;/p&gt;
&lt;p&gt;分歧点在于，周认为图灵测试是足够好的行为测试，周认为只要通过巧问，总可以问出有无智能的差别。 比如一个经典的例子：问人/机器TA的年龄。 问一次，计算机和人难以区分；问多次，人可能会不耐烦；问更多次，人感到不耐烦的表达也不见得相同。 而计算机难以实现——当然，计算机可以故意模拟这种情况，然而人总可以更改提问的方式，让计算机设计者被动的跟着问题跑，这时候机器就已经输了。 所以周认为，图灵测试是足以评价机器是否有智能的，关键还是出问题的人问问题的方式。&lt;/p&gt;
&lt;p&gt;而王认为图灵测试实际上是假设机器的智能和人一样，而不把与人类不一样的智能当作智能。比如外星智能的例子，刚到地球上的外星人不能正常与人交流，我们仍然可以通过其举止能力判断它们是有智能的，尽管它们的思考方式和人类可能区别很大。 所以王认为，计算机表现的和人像不像不是问题，关键是它的行为是不是有道理的。&lt;/p&gt;
&lt;p&gt;实际上，后来讨论其他问题的时候，有教授曾举过章鱼保罗与球王贝利的例子。人工智能不是求真的，就算保罗总是预言成功，贝利总是预言失败，也不是就可以这样断定贝利的智能比保罗差。图灵测试屏蔽了这个问题。&lt;/p&gt;
&lt;p&gt;智能应该是通用的(即不是面向单一问题类的)，不是针对一个个问题而是一个学习的过程——我们允许智能犯错，但是它应该能从中学习。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;另外，图灵测试的对比对象是机器和人，裁判是人，这本身就是以人为尺度。 再举个外星人的例子，假如有一种外星人，它们智能高度发达，看到我们觉得我们傻透了，与我们交流(抛开语言障碍)觉得我们和它们没法比。若按图灵测试，以外星人评判，我们就成了没有智能的了。 或者我们评判外星人，外星人的想法对于我们来说过于超前，我们完全不能理解，我们做图灵测试也会觉得它们没有智能。&lt;/p&gt;
&lt;p&gt;另外一个例子是鸟和飞机都可以飞，然而它们采用的方式完全不同。 当然，它们背后都是空气动力学。 但是假若人工智能和智能无论从表现还是机理都和人类有很大不同，我觉得也没有什么可奇怪的。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;王培还强调，在图灵原始论文中早已说明，图灵测试应该是智能的充分而非必要条件。因此，王培坚决反对以通过图灵测试为人工智能的准绳与目标。&lt;/p&gt;
&lt;p&gt;另外，周提倡我们应当遵循摩根准则，即一个现象如果能用简单的方式解释，就不应该选择复杂的解释。比如说看到一条狗在落泪，如果能用风吹进沙子来解释，就不应该用它在伤心来解释。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;我觉得这还是一个视角问题。作为创造者会(自以为)清楚机器的原理和历史，对他而言可能用机器内部的运算等描述更为简单(真的么233)，而外在观察者来说不见得如此。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;2. 计算机是个形式系统，而哥德尔不完全性说明形式系统不能证明某些真命题。这是否说明人的某些知识是计算机永远不能得到的？是否所有知识都能形式化？自指性知识呢？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先哥德尔不完全性定理是经常被外行人拿来棒打人工智能的棒子，不过在场的辩手和围观群众(应该也包括全部不明真相的围观群众)没人认为认为这对 AI 有什么问题。&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;是机器不可知的人不一定可知；&lt;/li&gt;
&lt;li&gt;某个一致的形式化公理系统不可知的不一定所有形式化系统都不可知；&lt;/li&gt;
&lt;li&gt;哥德尔定理作为定理自然有可以被应用的前提条件。哥德尔定理恰好告诉我们经典逻辑对人工智能是不够的，而其他一些形式化系统不一定满足哥德尔定理所需要的前提条件，比如王培的非公理系统，比如超协调逻辑。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;周强调哥德尔定理的重点在于体现了矛盾的必然。比如审美中的复调艺术，体现的是一种矛盾中的美。而机器是没法从这种矛盾中理解的。而像禅宗这种只可意会不可言传的道理更是无法形式化的。&lt;/p&gt;
&lt;p&gt;关于可形式化，老板抱持着强烈的“知识皆可形式化”的信念。 不过老板的形式化似乎宽广了些，把数字化也包含进去了。&lt;/p&gt;
&lt;p&gt;在老板(以及王培，这方面他俩一个战线，老板更执念)看来，主要问题不在于能不能而在于好不好。 这一部分一开始的专题报告是陈钢博士(第二天没有出现，希望不是因为被老板会心一击了……)在讲利用他们实验室(Lingcore Laboratory)搞的一套程序验证用的 Coq 系统来统一的描述知识。 老板的评价是程序验证的工具不是不好(以防直接打对方脸)，但是和 AI 基本是两条方向。程序验证是严格的，而 AI 最关键的是常识推理，是充满矛盾的。 Coq 一定是严格满足哥德尔定理的前提的，而 AI 系统往往不是。 所以说关键还是要&lt;strong&gt;选择一个好的形式系统&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于陈刚博士的报告，老板也批评这种方法论。关键在于 AI 的目的是研究智能到底是什么，而我们现在不知道，因此需要各种不同的逻辑从不同的角度去分析。 一个试图统一它们的框架，实际上除了统一了它们的语法之外没有其他的功能，对最终目标没有贡献，反而会模糊每种形式系统的特点，对深入研究没有好处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然关于矛盾处理我们是有形式化逻辑的，比如超协调逻辑，比如王培的非公理逻辑。&lt;/p&gt;
&lt;p&gt;周对于王培系统的自指能力持怀疑态度。因为我听过王培的课，我觉得是周想偏了。 王培的系统自指是没有问题的。虽然王培有一个虽然小但确实存在的不可变动的元逻辑层，但是这并不妨碍自指的能力。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;比如说，就像人的语言与物理世界(这是我在下面讨论的时候常用的比喻)。 客观物理世界的规律是定死的，是不可更改的——这对应于王培的元语言和元逻辑。 但我们依然可以用语言——对应于王培的目标语言——和逻辑——对应于王培的目标语言上的新的一层推理——来描述物理世界的规律。我们还可以在这个规律上继续描述规律，变成周昌乐口中的元语言、元元语言、etc. 我们的目标语言已经足够强大，可以描述其他的系统，比如自己。因此虽然我们的讨论局限在目标语言上，我们的表达能力仍然是足够的。 而事实上，我们总是需要一个定死的(王培意义下的)元语言和元逻辑的，就好比客观物理世界一样。&lt;/p&gt;
&lt;p&gt;类似的还有实体计算机和上面运行的虚拟机和虚拟机里的虚拟机的关系。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;3. 计算机能处理符号，但它能真正理解符号所代表的意义吗(意义指称能力问题)？如果人的概念依赖于人类的躯体和动机(涉身性认知)，那计算机怎么可能掌握它们？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="well"&gt;
&lt;p&gt;复旦大学哲学系的徐英瑾教授做的专题报告， 指出了语义学的外在论和内在论，即语义是通过内心与客观世界的指称表现的，还是通过内在世界中概念的关系表现的。 他认为，如果我们接受内在论语义学，那么语义是可能被计算机理解的。 外在论语义学也被人支持，但外在论预定一个预设的眼光——即“上帝”——他具有认识世界全部信息的能力。 至于涉身性，徐教授认为这不是颠覆性的问题。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;王认为涉身性仍然是一个通讯和学习的过程。&lt;/p&gt;
&lt;p&gt;在王的NARS系统中，&lt;strong&gt;一个词的意义通过这个词与系统中其他词的关联体现出来&lt;/strong&gt; (当然，周认为“这根本不是意义”，王坚持“这就是这个智能心中的意义”)，也就是说王实际上也是支持内在论语义学的。 至少，王坚决反对将指称语义(模型论观点，Tarski 语义)视为唯一的语义论。 王的 ppt 上有两张很形象的图，可惜我手头自然没有…… 简单的说，指称语义中，“花”这个符号的语义通过它指称现实世界中的花来体现； 而在王的系统中，“花”这个符号通过它与“植物”、“叶子”(花&lt;em&gt;不是&lt;/em&gt;叶子)、“花盆”等符号以及以前观察到的图像等&lt;em&gt;符号&lt;/em&gt;之间的关系体现出来。 在王的系统中，一个词的语义来自于这个智能体的经验，与外在世界无关，自然也不要求与外在世界符合。在王培的世界里，形与义是统一的。所以王培说自己是一元论者，认为物质世界和精神世界是可以统一为符号的；但也是二元认识论者，即对概念的认识和客观世界本身不是完全对应的。&lt;/p&gt;
&lt;p&gt;王培特别提及一个捷克斯洛伐克(没听清不确定)的研究，是有人将他的 NARS 系统应用到声音识别上的。即在对语音处理部分使用传统的模式识别方法，但是在识别出语素后作为符号进入 NARS 推理。所以关于涉身性，王不认为是个问题。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;对我来说最感兴趣的是 NARS 真的被应用了…… 之前我一直觉得 NARS 背后的哲学很有趣，但是 NARS 自己除了实现通用人工智能之外，似乎干什么都并不方便(王培自己的观点，凡是有特定领域的算法的地方，肯定比针对更一般问题的 NARS 要有效)……&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;周强调意向性问题，人的语言总是伴随着体验。&lt;/p&gt;
&lt;p&gt;周认为意义指称的难点在于自然语言是元语言与对象语言揉合的(混合指称)。周教授举的例子是一个古诗，古诗的开头是“长亭……”，然而教授写的时候只是把“亭”字写的很长，这种隐含的表达人是可以理解的。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;关于对元语言与自指的观点我直接记录在上一个问题里了。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;周坚持真正的意义不是能说的，尤其是所谓终极指称能力——悟(周教授是禅宗宗师)，是“只可意会不可言传”的，所以周“反对一切语义学”。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;呃，但是我觉得，对于不论是搞理论的还是搞工程的人，都会认为这句话类似于 “这事你们做不了，因为这事做不了”……233&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;4. 如果计算机只能遵循给定的程序运行(预先设定的程序)，那它怎么可能有创造性和灵活性？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="well"&gt;
&lt;p&gt;来自北航的林允清教授做了专题报告：人类先天机制与计算机模拟。 他强调了先天机制的作用。 康德和乔姆斯基都认为人类智慧与其先天知识有关(乔姆斯基的语言天赋论)。 林教授认为意识、创造力等也是由先天机制导致的，所以关键在于找出这些先天机制，以及如何实现它们。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;林教授在后来的讨论中还提了一个很有趣的问题： 几何证明机器在证明欧氏几何中著名的&lt;a rel="tooltip" title="维基里为什么关联到了勾股定理上？一般是指几何原本命题5吧……"&gt;驴桥定理&lt;/a&gt;时给出了比前人给出的证明简单的多的证明，这是否算创新？&lt;/p&gt;
&lt;p&gt;王培认为，如果这个定理证明器是通过暴力穷举的方式得到证明，就不算。如果是通过经验认识到的，就算有智能。其区别在于，如果经验变了，可能就不会被经验启发而想到这么巧妙的办法了。 而经验得到与启发搜索的区别在于，对&lt;em&gt;特定问题&lt;/em&gt;，算法是否是固定的。 王培认为智能主要不是体现在解决问题类(算法)上，而关键在解决具体问题实例(“具体问题具体分析”)上。&lt;/p&gt;
&lt;p&gt;中科院自动化所的王珏教授还强调了一个问题，就是时空复杂度到更一般的能量复杂度的问题。他举了一个欧洲项目的例子，该项目试图模拟人脑的一小部分，最后发现需要全球电力才能运作。这是否说明当前数字计算机本身机理上就不适合人工智能。&lt;/p&gt;
&lt;p&gt;所以就有问题：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;人的先天是什么？困难在于界线，到哪里是先天的，婴儿刚出生？脑容量稳定？&lt;/li&gt;
&lt;li&gt;这种先天能力是否有能力用计算机实现？一方面在于理论是否可能，一方面在于不同的表达带来的不同的能量复杂性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;周还强调创新应该是一种非线性的过程。而这种过程可以是没有解析解的。&lt;/p&gt;
&lt;p&gt;创造力有好坏的区别的。王认为无论好坏，都是创造力，因为好坏实际上是由环境变化决定的，不是智能所能预先断定的，正如我们认为智能必定会犯错一样。&lt;/p&gt;
&lt;p&gt;王培强调，所谓创新不是创造全新的东西(没有真正意义上的创新)，它可能早就存在，关键是谁先发现。这也体现了根据经验与暴力穷举的区别。&lt;/p&gt;
&lt;p&gt;王培系统里的创新、灵活性、灵感等都是基于这种想法。NARS 中的词项组合生成新概念我觉得是自然的，的确，我能想象到的每一个新想法，都不可能是凭空而生的，一定是之前我曾经经验过的事实产生的。&lt;/p&gt;
&lt;p&gt;另外，外行人和内行人对创造力的标准不同。比如我们看起来很厉害的东西，在专家眼中可能就毫无创新。最经典的应该是深蓝等机器，认为深蓝是人工智能的基本都是非行业人士，而行业人士从不认为它是人工智能。 这也是 AI 界著名悖论“只要一种技术在 AI 领域发展成熟，它就不被认为属于 AI 领域了”的一种解释……(笑) 这就是所谓上帝视角的问题，假如我们能知道一个人的原理和历史，那他一样也没有创造性(我想还是有不可预测的问题的，总之重点是视角和先验问题)。&lt;/p&gt;
&lt;p&gt;这个问题的分歧最终归结到信念问题，然后大家都认为信念问题是没有必要讨论的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;5. 计算机是理性的，而情感和其他非理性因素在人的思维活动中扮演重要角色(倾向性指导作用)。这是否说明计算机不能像人一样思维？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="well"&gt;
&lt;p&gt;哲学系逻辑学博士王彦晶报告了《关于问题的问题》， 主要分析了问题本身，认为提问比回答更需要智能，能为达到目的发现并提出好的问题是智能的一部分。 一个有趣的想法是改进图灵测试为机器问人答。&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;p&gt;当然似乎离题远了点，不过本来专题报告和题目就是分别想好再分组的……&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;周认为情感是方向，理性是动力。 机器是没有情感的，因为它只有行为没有……呃，好吧，回到语义和意识的问题了233……&lt;/p&gt;
&lt;p&gt;王培的想法一直是计算机作为物种和人类可以不同，行为理性即可。 所谓情感和情绪，就是资源的全局调配。 比如所谓恐惧，就是将资源全局调配到最适合躲避的状态。 这时因为资源调配问题，就可能无法做出理性判断，比如看到黑暗中的物体感到恐惧，就可能不去仔细观察那到底是什么而直接逃跑。&lt;/p&gt;
&lt;p&gt;王认为计算机可以有自己的情感，目的也不是为了蒙人。这种情感实际上就是机器内部形成的对一定状况采取的快速全局资源调配的反应。&lt;/p&gt;
&lt;p&gt;当然，周当然是不承认这种东西叫情感的XD&lt;/p&gt;
&lt;p&gt;另外还有自闭症和老好人的例子，自闭症可能内心情感丰富，但并不乐于与人交流(我感到中枪了233)；老好人也许对外界总是抱着接受的态度，就好像总是同样的反应一样。它们都是有情感的。&lt;/p&gt;
&lt;p&gt;关于情感，关键是对情感的理解，以及造机器的目的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;6. 意识的本性是什么(特别是自我意识)？机器能够拥有意识能力吗？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一片我觉得接近信念之争了XD&lt;/p&gt;
&lt;p&gt;王认为主观意识实际上来自于先验。&lt;/p&gt;
&lt;p&gt;王坚决反对还原论，在前面提及王反对“终归结底”处已经解释了。&lt;/p&gt;
&lt;p&gt;王认为所谓身心问题实际上是外部感受器和内部感受器的分隔的问题而已。&lt;/p&gt;
&lt;p&gt;王认为机器是可以自省的，例如它能意识到自己之前想到了什么，能整理出自己的思路——在 NARS 中是(可)能做到的。&lt;/p&gt;
&lt;p&gt;周是坚决认为机器是只能做到有意向性的意识的——虽然他的无意向性的意识被老板称之为玄学233&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;总的来说，我认为：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;很多问题是概念问题：比如什么是智能、什么是创新、什么是情感、什么是(自我)意识等等本身就有很多争议；&lt;/li&gt;
&lt;li&gt;很多问题是信念之争：周坚信“确有不可言说之物”，而王认为“认识源自经验”，老板则认为“一切皆可形式化”233；&lt;/li&gt;
&lt;li&gt;很多问题是目标之别：周希望人工智能近似/超过人类，而王认为人工智能和人的智能完全可以有别，不管是原理还是经验；&lt;/li&gt;
&lt;li&gt;很多问题是层次问题：当我们在微观角度观察的时候，一切智能都被还原到不复存在；而当我们以宏观角度观察的时候，智能会表现出来；&lt;/li&gt;
&lt;li&gt;很多问题是角色问题：当我们以机器的制造者的上帝视角来看机器时，我们理解(其实很可能只是自以为理解)其原理，通晓其历史，便不认为它有智能；而当我们从外部行为来看，就变成了智能。&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="AI"></category><category term="学业"></category></entry><entry><title>升级64位Arch</title><link href="http://blog.skydark.info/linux/2012/04/26/arch-64-bit/" rel="alternate"></link><published>2012-04-26T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-04-26:linux/2012/04/26/arch-64-bit/</id><summary type="html">&lt;p&gt;上次 &lt;code&gt;pacman -Syu&lt;/code&gt; 后出现了奇怪的现象，系统会不定时的突然死掉，
表现为突然程序一个接一个的崩掉，几秒钟后键盘鼠标也崩掉，只能电源键了……&lt;/p&gt;
&lt;p&gt;然后查了 message.log, 提示是 &lt;em&gt;Memory Out&lt;/em&gt;, 我当时狂汗不已，机子内存4G，32位PAE，我记得死机前内存占用都是不到1.5G的……&lt;/p&gt;
&lt;p&gt;最后看 &lt;code&gt;free -l&lt;/code&gt;，猜测是因为我的Low Memory只有不到900M，
然后不知为何 update 后 Firefox 开始吃 Low Memory，最后 &lt;a href="http://www.redhat.com/archives/taroon-list/2007-August/msg00006.html"&gt;oom-killer&lt;/a&gt; 开始大杀特杀:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;When low memory is exhausted, it doesn't matter how much high memory is
available, the oom-killer will begin whacking processes to keep the
server alive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后想了想，还是直接升级64位系统好了:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If possible, upgrade to 64-bit Linux.  This is the best solution because
&lt;em&gt;all&lt;/em&gt; memory becomes low memory.  If you run out of low memory in this
case, then you're &lt;em&gt;really&lt;/em&gt; out of memory. ;-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于迁移到64位系统，照着&lt;a href="https://wiki.archlinux.org/index.php/Migrating_Between_Architectures_Without_Reinstalling_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#.E6.96.B9.E6.B3.95_2:_.E4.BB.8E.E6.AD.A3.E5.9C.A8.E8.BF.90.E8.A1.8C.E7.9A.84.E7.B3.BB.E7.BB.9F"&gt;Archlinux Wiki&lt;/a&gt;做：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;确认 CPU 支持64位，确认 &lt;code&gt;/var/cache/pacman/pkg&lt;/code&gt; 空间足够。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保留旧软件包以备回退，并准备好32位的 busybox:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # pacman -Sw $(comm -23 &amp;lt;(pacman -Qq) &amp;lt;(pacman -Qmq))
 # pacman -S busybox&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改变 pacman 架构:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # sed -i -e s/'Architecture = auto'/'Architecture = x86_64'/g /etc/pacman.conf #并确认 mirrorlist 中使用 $arch 而不是 i686 指定架构
 # pacman -Syy&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载新软件包:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # pacman -Sw $(pacman -Qq|sed '/^lib32-/ d')&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装64位内核和32位glibc兼容:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # pacman -S linux
 # pacman -Sf lib32-glibc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启检查是否安装64位内核成功:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ uname -m
 x86_64&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;64位内核可以运行32位程序，因此系统看起来很正常。
 但是当更新 x86_64 仓库中的软件的时候会出问题，因此要将现有的软件都替换为64位版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装64位pacman:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # pactree -l pacman | pacman -S -&lt;/code&gt;&lt;/pre&gt;
&lt;div class="alert alert-danger"&gt;
 &lt;strong&gt;注意这条命令执行完后整个系统就只有 bash、pacman 和 busybox 可以用了，下面的操作必须一气呵成不能中断！&lt;/strong&gt;
 &lt;/div&gt;&lt;p&gt;另外如果有人是对照这个文章/wiki原文进行迁移的，&lt;em&gt;请看完再动手!&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装其他软件包:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # pacman -S $(pacman -Qq)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在我这边这里出了意外，因为 &lt;code&gt;pacman -Qq&lt;/code&gt; 会将 aur 里的软件包也列出来，这些在 &lt;code&gt;pacman -S&lt;/code&gt; 的时候显然会引发找不到错误。
 于是我很正常的想用输出重定向到文件，然后编辑文件删掉多余包的办法——&lt;em&gt;然而现在vi已经不可用了&lt;/em&gt;。
 我还看过 wiki 里关于 Arch64 的&lt;a href="https://wiki.archlinux.org/index.php/Arch64_FAQ_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29"&gt;FAQ&lt;/a&gt;里面提到的一个&lt;a href="https://bbs.archlinux.org/viewtopic.php?id=64485"&gt;帖子&lt;/a&gt;，作者是这样做的:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # pacman -Qqe | grep -vx "$(pacman -Qqm)" &amp;gt; /backup_dir/pacman.lst
 # pacman -Qqm &amp;gt; /backup_dir/aur.lst&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然而不幸的是&lt;em&gt;grep现在也不能用&lt;/em&gt;，所以我就用 busybox 代替 grep，发现 busybox 版的 grep 不支持 -x 参数……
 (P.S.: 我当时竟然只想到了用 busybox 替代 grep，没想到用 busybox 替代 vi, 也没有想到用 &lt;code&gt;/lib/ld-linux.so.2&lt;/code&gt; 执行，FML……)
 总之我也不知道我最后怎么得到了一个这样的 pacman.lst，总之得到了一个，于是我的杯具就是从这里上演的……因为这样得到的 &lt;code&gt;pacman.lst&lt;/code&gt; 实际上是有问题的，&lt;/p&gt;
&lt;div class="alert alert-danger"&gt;
 &lt;strong&gt;FAQ 里引用的那文的作者是重新装 Arch 64 然后恢复原有软件，我现在是更新系统现有的全部软件包，这两个是有差别的。&lt;/strong&gt;
 &lt;/div&gt;&lt;div class="alert alert-info"&gt;
 现在让我做的话，我会在步骤6之前就执行 &lt;code&gt;pacman -Qq | grep -vx "$(pacman -Qqm)" &amp;gt; pacman.lst&lt;/code&gt;, 然后这一步用 &lt;code&gt;pacman -S $(cat pacman.lst)&lt;/code&gt;.
 &lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正常情况下这个时候重启就可以了。我因为上面所说的杯具，重启之后就 Kernel panic 了，
 提示 No init found，我一开始以为是 grub 配置错了，总之各种乱搞，最后发现 No init found 很有可能不是真的没有 init，而是 init 执行不起来……&lt;/p&gt;
&lt;p&gt;还好这个时候机器上还有个 Ubuntu 10.04 备用，试图 chroot，结果发现32位系统没法 chroot 到64位上……&lt;/p&gt;
&lt;p&gt;于是又赶紧下了一个64位的 ArchISO，grub 挂载进入 live 环境，chroot，发现 /usr/bin 下还有千余个32位程序，/usr/lib 下有万余个32位动态链接库(尽管算上了软链接)。
 然后试着 &lt;code&gt;pacman -S gtk&lt;/code&gt;，终于发现问题，底下依赖的动态链接库还是32位的，所以装不上，再对比 pacman.lst，终于发现步骤7里强调的那段。
 于是这次我是有正常的 vi 和 grep 的(退出 chroot 就有)，重新安装一次，终于成功了……&lt;/p&gt;
&lt;p&gt;另外不得不说 chroot 太方便了，和直接进了那个系统一样。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重启后终于看到了 X，然后就是各种 yaourt，注意64位的 &lt;code&gt;/etc/makepkg.conf&lt;/code&gt; 和原来有所不同，应对照 &lt;code&gt;/etc/makepkg.conf.pacnew&lt;/code&gt; 修改，才能正常的用 yaourt 编译 aur 中的软件。&lt;/p&gt;
&lt;p&gt;flash 自动装好了，B站无压力。
rvm 里的 ruby 要重新编译一遍。
wine 抽搐了，我没有64位win7的dll，正打算回退到32位的wine上……&lt;/p&gt;
&lt;p&gt;总之这次迁移64位系统纠结了很久，结果发现是个好傻的问题，人生就是充满了233啊233……&lt;/p&gt;
&lt;p&gt;并特别感谢&lt;a href="https://plus.google.com/106325773445721438941"&gt;朱晋玄&lt;/a&gt;的帮助！&lt;/p&gt;
</summary><category term="linux"></category><category term="arch"></category></entry><entry><title>ONS的两三点评价</title><link href="http://blog.skydark.info/transplant/2012/04/23/something-about-onscripter/" rel="alternate"></link><published>2012-04-23T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-04-23:transplant/2012/04/23/something-about-onscripter/</id><summary type="html">&lt;p class="js-toggle-next alert dropdown"&gt;题外&lt;/p&gt;
&lt;div class="alert alert-info"&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;订的 ClariS 的首专 Birthday 终于到了，圆通在北京市耽搁了一整天……
好吧虽然里面的歌已经听一周多了……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;昨晚一点半就早早躺下了，本想好好休息一下今天鼓足精神&lt;em&gt;干上&lt;/em&gt;一天，结果被一只蚊子每隔半小时叫醒一次，九点才起床而且各种呵欠，今天一整天都颓过去了……FML&lt;/p&gt;
&lt;p&gt;下午孙老师的 Model Checking 整节课都在离线状态，虽然孙老师因为老婆刚生孩子也睡眠不足离线中。小师妹和 leo 酱倒是表示情绪稳定，何其学术……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为担心下雨早早回来了，然后回宿舍定然是继续颓了，结果这雨还是憋着不下……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://tieba.baidu.com/p/1546632398" rel="tooltip" title="呃，但是因为有基佬在里头聊天，没准啥时候就被删了……"&gt;贵圈真有能量&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="_1"&gt;动机&lt;/h2&gt;
&lt;p&gt;看&lt;a href="http://tieba.baidu.com/p/1544614335"&gt;这个帖子&lt;/a&gt;有感。
感觉自己这么个N久不碰移植而且碰的时候对ONS也不算太熟的家伙也没啥可说的，算是吐吐积怨吧。&lt;/p&gt;
&lt;p&gt;首先应该明白的是，ONScripter 是一个基于 SDL 的以模拟 NScripter 为首要目标的开源模拟器。
所以我想要是对其评价的话，是应该分给 SDL, NScripter 和 ONScripter 三边的。&lt;/p&gt;
&lt;h2 id="onscripter-galgame"&gt;ONScripter 是一个好的 GalGame 引擎&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SDL &amp;amp; ONScripter: 可移植性。&lt;/p&gt;
&lt;p&gt;ONScripter 最大的优点就是其高度可移植性，这不仅是由于它基于移植性极佳的 SDL，更是因为它自身就是以高度可移植性为目标编写的。&lt;/p&gt;
&lt;p&gt;ONScripter 的作者原先使用的设备是 Sharp 的 Zaurus.
这台跑 Linux 的设备性能非常有限，还是很佩服作者下决心去做这件事情的。
假如它只能跑在 Zaurus 上的话，那么随着 Zaurus 的离去，它也会逐渐化为尘土。
但是开源和可移植性带给了它更长久的生命力。&lt;/p&gt;
&lt;p&gt;ONScripter 选择 SDL 为其基础是一个很好的决策——SDL 大概是目前能跑的设备最多的图像引擎之一。
ONScripter 使用的其他库基本也都是移植性比较好的库，对比用了 boost 的 rlvm，移植了后者的设备就少了很多。&lt;/p&gt;
&lt;p&gt;开源的好处就是大家都可以贡献自己的力量。
在大家的支持下，ONScripter 现在支持的设备越来越多。
就我所知，国内的设备一但移植上了 SDL，接下来最常见的被移植的游戏就是 opal(开源版仙剑，同样基于 SDL) 和 ONScripter 了。
这也是为什么十年过去了，ONScripter 仍然被我们所使用的原因。&lt;/p&gt;
&lt;p&gt;对于移植者来说，大家选择 ONScripter 最大的理由就是它实在是太能跨平台了。
纵使它有这样那样的缺点，很多时候也没有更好的选择。
对比 ONScripter 一次写成造福万设，能做到这一点的其他引擎实在是找不到了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NScripter: 完善的基本功能。&lt;/p&gt;
&lt;p&gt;ONScripter 的另一大成功之处在于，它的目的在于模拟 NScripter.&lt;/p&gt;
&lt;p&gt;高桥的 NScripter 在当年大受欢迎，现在也有作品在出。
虽然现在看来功能还是欠缺不少，但不得不承认，
NScripter 的确是一个合格的 Galgame 引擎。
它具备实现一个 Galgame 所需要的全部基本功能的能力。&lt;/p&gt;
&lt;p&gt;并且，假如你依照它给的框架走，实现起来也非常精炼。&lt;/p&gt;
&lt;p&gt;大量原版 NScripter 引擎的游戏被移植也使得 ONScripter 大受欢迎，同时也焕发了那些老游戏以及 NScripter 自身的第二生命。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="onscripter-galgame_1"&gt;ONScripter 不是一个好的 GalGame 引擎&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;性能。&lt;/p&gt;
&lt;p&gt;性能问题一方面是 SDL 的问题，一方面是 ONScripter 自己编写的问题。&lt;/p&gt;
&lt;p&gt;SDL 的主要问题在于最初移植过去的时候一般是基于软解的。
当然该来的总是会来的，硬件加速还是会来的。&lt;/p&gt;
&lt;p&gt;ONScripter 的代码里的确有些写的很“素”的地方。
&lt;a href="https://plus.google.com/111086731636961623060/posts/N325xpe7DuD"&gt;平芜泫的评价&lt;/a&gt;一语中的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class="alert alert-info"&gt;该说不愧是日本人的思维么？在指定环境下面能够非常好地工作，不是这个环境就糟糕了。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顺提，该贴里的 bug 是 Arch 里的 SDL_ttf 的问题，其实和 ONScripter 关系不大，现已修复。&lt;/p&gt;
&lt;p&gt;我倒不觉得性能是极度重要的问题。当然它确实重要。&lt;/p&gt;
&lt;p&gt;一方面，只要总的框架没有大问题，先保证正确再优化也不为过，毕竟过早优化是万恶之源，开源对这种问题也是一种好的解决方案。&lt;/p&gt;
&lt;p&gt;另一方面，ONScripter 很大的瓶颈还是在 IO 和显示上。
对于那些 label 用链表 lookup 之类的，倒也真不是什么性能问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NScripter 的表达能力。&lt;/p&gt;
&lt;p&gt;我想这部分才是我对 ONScripter 意见最大的部分——尽管这部分应该归到 NScripter 的问题上。&lt;/p&gt;
&lt;p&gt;平芜泫的评价在这里仍然适用：
如果你照着高桥佬的想法走，NScripter 是非常爽快的；
但如果不是这样的话，你就会觉得 NScripter 处处捆人手脚。&lt;/p&gt;
&lt;p&gt;不幸的是，移植的目的是模仿另一款游戏重新实现它，想完全照着 NScripter 的思路走往往没那么容易。&lt;/p&gt;
&lt;p&gt;高桥是很清楚一款 Galgame 引擎需要什么的，但是除此之外的事情他就懒得管了。NScripter 的语言设计明显是混乱的。命令式的风格，一些计算上的东西又明显是汇编的样式，很多函数明显是后头擦屁股添上的，最终发现这事没法弄了又开始支持 lua……&lt;/p&gt;
&lt;p&gt;总之，NScripter 自己从语言角度而言还是很不灵活的。
说实在的，很多事情不是不能实现，而是实现太麻烦。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;动画效果实现繁琐。&lt;/p&gt;
&lt;p&gt;NScripter 的动画基本要靠自己写循环控制。不讲究时间精确性可以用 for 循环，追求时间卡准可以 while(即 if-goto) 循环靠 timer 精确控制，当然可以抽象到自定义过程中，总归还是麻烦的很。更别提缩放和旋转了。&lt;/p&gt;
&lt;p&gt;要是实现全屏雨点效果呢？那就不得不依赖插件，而那是平台相关的，移植性很差。&lt;/p&gt;
&lt;p&gt;顺提，msp 的移动效率不咋样。&lt;/p&gt;
&lt;p&gt;NScripter 语言的混乱之处还在于，它竟然有lsp、lsp2、drawsp、blt等不同体系的功能去做类似的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并行动画实现困难。&lt;/p&gt;
&lt;p&gt;怎样让两个移动共同实现？你不得不在一个循环中同时做两个移动。
如果你已经把移动抽象到一个过程中了呢？
如果是全屏震动的同时移动呢？
如果是移动同时缩放呢？
上面这些 Fate 里都不少，而且我希望抽象到一个过程中。我当时很头疼。&lt;/p&gt;
&lt;p&gt;对比 Kirikiri2 里解析脚本默认不阻塞动画执行，这边表达起来的确费劲的多。&lt;/p&gt;
&lt;p&gt;但还好，上面起码还算是好表达的。如果想表达类似秽翼序章窗外的雨滴落下，或者魔法使之夜里人物对话时背景缓缓移动的效果呢？&lt;/p&gt;
&lt;p&gt;我目前知道的 NScripter 对话过程中同步画面移动的方法只有利用多帧图片动画，这得做多少张？对魔夜这种大背景图缓慢移动的，恐怕图片都载入不进去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;画面再加工能力匮乏。&lt;/p&gt;
&lt;p&gt;很多引擎会对图片加效果，比如通过色调和光线变化可以将一张图重复利用在多个场景。
也有图片直接翻转和旋转使用的。&lt;/p&gt;
&lt;p&gt;NScripter 倒是支持黑白和反色。如果不需要考虑统一处理，也可以做旋转。
除此之外就很有限了。&lt;/p&gt;
&lt;p&gt;当然总可以靠图像处理软件预先处理，然后替换文件名(fate 移植时是这么做的)。只是，麻烦。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声音部分的控制能力简单。&lt;/p&gt;
&lt;p&gt;一些其他引擎的游戏，有时会将一段音乐分为两段，
一段是 head 只播放一次，一段是 loop 只循环这部分。
有些引擎干脆就把两段合并为一个文件，设定好 loop 的时间段即可。&lt;/p&gt;
&lt;p&gt;对语音有时需要更精确的控制时间，比如语音结束的时候触发 XX 效果。&lt;/p&gt;
&lt;p&gt;NScripter 中很难实现这些部分。最大的难点还是在“如果当前正在对话，将无法控制其他部分”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语言表达能力缺乏。&lt;/p&gt;
&lt;p&gt;NScripter 从语言特性上和 php 有部分地方挺有共同之处的，
比如它们在自己的领域表现都不错，但是语言设计的都挺不考量的。&lt;/p&gt;
&lt;p&gt;NScripter 里真正有的是过程而非函数，注意它定义过程用的是 defsub.
比如说，对于类似 &lt;code&gt;$2 = str(int($1) + int($0))&lt;/code&gt; 这种东西，你就不得不一堆 atoi/itoa 过去，还要产生一堆临时变量，简洁度大打折扣。&lt;/p&gt;
&lt;p&gt;NScripter 最缺乏的是临时变量。
NScripter 里的所有变量都是全局相关的。
假如你需要实现很多过程的时候，你就不得不担心变量分配问题了。这实际上是很恶心的。&lt;/p&gt;
&lt;p&gt;NScripter 里没有自定义结构。你需要自己设计地址分配，自己设计接口。&lt;/p&gt;
&lt;p&gt;NScripter 缺乏一些反射功能(也许用这个词不妥)，比如，某层加载的图片文件名是什么？在什么位置？是否真的加载了文件(而不是加载但不显示)？
如果你需要，那就只好自己保存下来——用自定义的结构。&lt;/p&gt;
&lt;p&gt;拿 NScripter 计算是一件痛苦的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="onscripter"&gt;拿什么来替换 ONScripter？&lt;/h2&gt;
&lt;p&gt;ONScripter 已经走过十年了。它的优点无可替代，它的缺点也日益显著。
假如有其他的选择，我心目中的理想的移植引擎应该是什么样子的？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;高度可移植性的开源引擎。&lt;/p&gt;
&lt;p&gt;这条实际上是维持引擎生命力的重要因素。&lt;/p&gt;
&lt;p&gt;我们真的不缺 PC 平台的 Galgame 引擎，真的。&lt;/p&gt;
&lt;p&gt;也许为每个平台单独优化也是可以的，但是我想，基于一个高度可移植的基础上优化会更吸引人。
就像 ONScripter 自己的进化历程一样，先求有，再求优。
毕竟，硬件我们还有摩尔定律，软件想从头改架构，成本还是太大。&lt;/p&gt;
&lt;p&gt;国产引擎中兼顾(尤其是数据文件易于跨平台维护) Win、Mac、Android、iOS手机、Linux 的我还没想到，这些算常见的，我这还没提 WM/CE、Symbian、PSP、NDS、MP4 和诺亚舟。当然是不是需要这么跨平台也许每个人有自己的看法，但 ONScripter &lt;strong&gt;已经&lt;/strong&gt;做到了。&lt;/p&gt;
&lt;p&gt;这样的话，实现上可选择的余地就不是很大了。也许 C/Cpp/Lua + SDL 还是最好的选择。国产的 NGE 也许也值得期待。&lt;/p&gt;
&lt;p&gt;当然还有 Web，这条路对 Gal 是否合适还有待探索，毕竟 CG 和音乐对 Gal 来说是很重要的部分，这部分要保证高质量，对流量是一个考验。&lt;/p&gt;
&lt;p&gt;当然，开源是保证可移植性的重要要求，毕竟能一个人/团队精通众多设备并长期维护的并不多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完善的 Gal 全套功能。&lt;/p&gt;
&lt;p&gt;特别的，它一定要是一个合格的 &lt;em&gt;PC平台的 Galgame 引擎&lt;/em&gt;。
这句话看上去像是废话，但是应该是值得强调的，因为一些出于移植目的写成的引擎反而并不注重这一点。&lt;/p&gt;
&lt;p&gt;按理说，高度可移植的引擎，至少应该能移植到 PC 上。
而一个在 PC 平台上的 Galgame 引擎，至少应该有实现一个 Galgame 游戏的全套(基本)要素的能力，比如快进、回想、鉴赏、存读档界面。&lt;/p&gt;
&lt;p&gt;对比 ONScripter，你在写游戏的时候并不需要考虑设备是使用鼠标/触屏还是键盘/按键，这些事情引擎都替你包办了。
如果你需要基本的回想和快进，都可以利用引擎自己默认的设置。
虽然很多时候这些东西肯定还是要自己定制，但是起码当你需要一个快速原型的时候，这些原装支持可以让你少操些心。
对 PC 平台作者也是友善的，它的基本功能的指令集并不复杂，最常见的输出文本也不需要指令，直接打字就是。&lt;/p&gt;
&lt;p&gt;最关键的是，一个有 PC 版实现的引擎才能吸引更多的 Galgame 制作者，毕竟 PC 平台上的 Galgame 作品还是占优势的。
而一个有丰富的 PC 原版游戏支持的引擎显然会比其他竞争者更具吸引力。
ONScripter 很吸引人的一点是，至少你可以毫不费力的将基于 NScripter 的 PC 游戏移植过去，并且在 PC 上也可以玩。
要知道万事开头难，一个移植游戏引擎早期的移植作品数量是很关键的。这一点上很佩服 PyMO 的作者 Chen 大，他独自完成了该引擎的全部早期移植作品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表达力丰富的语言。&lt;/p&gt;
&lt;p&gt;由上一条，最好是一种面向普通 Galgame 制作者的语言。
最好是&lt;em&gt;基于&lt;/em&gt;一种现代语言。现在看到的实现中比较常见的是 lua 或 python.&lt;/p&gt;
&lt;p&gt;这里的“基于”不是“完全借用”。Kirikiri2的 tjs + ks 就是很好的方案，
ks 面向普通制作者，tjs 实现高级功能。&lt;/p&gt;
&lt;p&gt;它需要有比较好的时间控制模型和高度的可定义性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_2"&gt;结论&lt;/h2&gt;
&lt;p&gt;说实在的，Galgame 界最不缺的就是引擎，然而移植 Galgame 最缺的恰恰又是引擎，这是一个很微妙的现象。
开源跨平台、完善功能和表达灵活是移植最需要的功能，只可惜现在没有引擎真正做好这些。
如果有一天有一个引擎能做好这些，这肯定是一件值得高兴的事情。&lt;/p&gt;</summary><category term="ons"></category></entry><entry><title>dream</title><link href="http://blog.skydark.info/life/2012/04/18/dream/" rel="alternate"></link><published>2012-04-18T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-04-18:life/2012/04/18/dream/</id><summary type="html">&lt;p&gt;昨晚梦见在考数学，然后妹妹有题不会做我在旁边讲思路……=______=||……&lt;/p&gt;
&lt;p&gt;前晚是梦见某个去日本的死基友，剧情类似夏色奇迹前两话，我当时醒了就觉得想找个地方撞墙……&lt;/p&gt;
&lt;p&gt;话说回来，小时候总是做梦的，而且记得还很清楚， 还经常试图记下来作为小说素材什么的……(小学蛋疼过，之后完全没有再动过笔233) 上了大学之后似乎就再也记不得梦境，偶尔记得也是刚醒不到三分钟的事。 最近突然开始做梦，难道……是回光返照么……=____________=||||&lt;/p&gt;
&lt;p&gt;话说回来，老是三点睡八点起竟然还有空做梦，这睡眠质量……&lt;/p&gt;
&lt;div class="hidden"&gt;
&lt;p&gt;(另：三点睡是因为两点前在想“今天不能就这么结束”，两点后在用V5看视频……)&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;最近北京好热，今天终于阴下来了，希望快点下雨吧……&lt;/p&gt;
</summary><category term="sister"></category><category term="生活"></category></entry><entry><title>Nitrotasks</title><link href="http://blog.skydark.info/linux/2012/04/06/nitrotasks/" rel="alternate"></link><published>2012-04-06T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-04-06:linux/2012/04/06/nitrotasks/</id><summary type="html">&lt;p&gt;最早是在 GR 里头看到的来自笨兔兔的&lt;a href="http://www.bentutu.com/2012/04/nitro-task-management-tool.html/"&gt;推荐&lt;/a&gt;，当然它也来源自&lt;a href="http://www.bentutu.com/2012/04/nitro-task-management-tool.html/"&gt;ubuntuvibes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/misc/nitrotasks.jpg" alt="Screenshot for nitrotasks"&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu 用户只需要：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:cooperjona/nitrotasks &amp;amp;&amp;amp; sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install nitrotasks&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Arch 用户也只需要：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yaourt -S nitrotasks&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就可以安装了。&lt;/p&gt;
&lt;p&gt;分别引用两边的评价和&lt;a href="http://caffeinatedco.de/apps/"&gt;开发网站的介绍&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Nitro 是一款比较简易的任务管理工具，适合对时间规划和任务安排比较严谨的同学。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nitrotasks.com/"&gt;Nitro&lt;/a&gt; is an eyecandy task manager that comes with a polished easy-to-use interface and properly organized items&lt;/p&gt;
&lt;p&gt;Nitro is an easy way to keep track of your tasks. Combining a beautifully simple interface with advanced features, Nitro stands out from the crowd.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实 TODO 类软件确实蛮多的。Nitro 本身比较漂亮(eyecandy)也比较简洁，跨平台能力的话…… Linux &amp;amp; Chrome. 总的来说精巧够用，还是挺喜欢的。&lt;/p&gt;
&lt;p&gt;关心它其实主要因为它实现这个想法用的工具。&lt;/p&gt;
&lt;p&gt;从 AUR 安装的时候提醒我需要依赖 &lt;a href="http://code.google.com/p/pywebkitgtk/"&gt;pywebkitgtk&lt;/a&gt;.
PyWebkitGTK 的 Project Description 是这样说的：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;PyWebKitGtk allows Python (Gtk) developers to create software on top of the WebKitGtk rendering engine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有很多时候写了点脚本但是懒得写 GUI，
想过用 bottle 自己写一个模板生成器，
也关注过(坦白地说，其实还没开始尝试) &lt;a href="https://github.com/seomoz/shovel"&gt;shovel&lt;/a&gt;.
这些想法的原理都是自己搭建一个本地的 http 服务，然后浏览器浏览。&lt;/p&gt;
&lt;p&gt;PyWebkitGTK 则直接在前后端传递消息，不需要服务器，不需要关心 sockets，形式上更像 Ajax 的方式但并不需要真的用 Ajax，是一种更紧致的做法。
消息传递采用 json, 两边都方便处理。&lt;/p&gt;
&lt;p&gt;Nitro 使用 pickle 将数据保存在&lt;code&gt;~/.nitrodata.pkl&lt;/code&gt;, pickle 里存的是一堆 json 格式的字符串。
我一开始一看 web 界面就在想它是用什么数据库保存的，然后发现是 pickle 后觉得自己弱爆了……这个时候返璞归真才是最好的。&lt;/p&gt;
&lt;p&gt;软件作者一开始在这里有疏忽，在 js 端存储 json 的时候没有对&lt;code&gt;\n&lt;/code&gt;做转义，
导致数据中如果有回车的话，读取出来被 eval 解析的时候会发生错误。
我最初是在写了一个多行 Note 之后发现的。给作者写了封邮件，作者马上就回复并更新了，现在 1.0.2 版已经没有这个问题了。&lt;/p&gt;
&lt;p&gt;但现在整理出来思路才发现，实际上应该做转义的自然不止&lt;code&gt;\n&lt;/code&gt;一个，双引号等都是问题。
消息传递需要经过 json 包装一次因此会产生一些问题也是这种做 GUI 的思路的一个麻烦的地方吧。
总而言之我想我应该准备下一封邮件了……&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;OK, 作者已经更新了，对照了一下，在&lt;code&gt;data/media/src/js/cli.js&lt;/code&gt;里头更新的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;escape&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//Regexes a bunch of shit that breaks the Linux version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;╭╮(╯▽╰)╭╮&lt;/p&gt;
</summary><category term="linux"></category></entry><entry><title>Play with Jekyll</title><link href="http://blog.skydark.info/programming/2012/03/23/play-with-jekyll/" rel="alternate"></link><published>2012-03-23T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-03-23:programming/2012/03/23/play-with-jekyll/</id><summary type="html">&lt;p&gt;&lt;div id="toc-here"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;动机&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://appblog.skydark.info"&gt;原先的blog&lt;/a&gt;是使用&lt;a href="http://micolog.xuming.net"&gt;micolog&lt;/a&gt;搭建在 GAE 上的。
但是随着 GAE 免费配额方案的改变，加上徐明对 micolog 的维护逐渐停滞，感觉有转移出去的必要了。&lt;/p&gt;
&lt;p&gt;感谢 V2EXer &lt;a href="http://www.yangzhiping.com"&gt;阳志平&lt;/a&gt;的博文：&lt;a href="http://www.yangzhiping.com/tech/wordpress-to-jekyll.html"&gt;告别wordpress，拥抱jekyll&lt;/a&gt;，
和&lt;a href="http://www.yangzhiping.com/tech/writing-space.html"&gt;理想的写作环境：git+github+markdown+jekyll&lt;/a&gt;，
最终促使我做出了使用 Jekyll 将 blog 迁移到 github 上的决定。&lt;/p&gt;
&lt;p&gt;Jekyll 有很多吸引我的地方，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 git，天然的版本控制能力;&lt;/li&gt;
&lt;li&gt;基于 markdown，干净利落，方便处理，配合 git，写文章只需要 vim 足矣;&lt;/li&gt;
&lt;li&gt;直接可放在 github 上，无需担心空间和维护问题;&lt;/li&gt;
&lt;li&gt;轻量纯静态，方便迁移，无需担心安全问题;&lt;/li&gt;
&lt;li&gt;可定制性强，只要是静态的就可以。如果在 github 以外的空间存放生成好的站点，添加后端代码也是可行的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最终迁移是在妇女节进行的(……)。总的来说很顺利。&lt;/p&gt;
&lt;p&gt;P.S.: 阳志平是位心理学工作者，也是位 Ruby 爱好者。他的文章写的干净利落，思路清晰，思考深刻。我很欣赏他的文章。&lt;/p&gt;
&lt;h2&gt;搭建&lt;/h2&gt;
&lt;p&gt;应该强调的是，这篇文章只是想留下做私人笔记，不能算是教程。
如果需要教程，可以参考阳志平先生的那几篇文章。&lt;/p&gt;
&lt;p&gt;那么开始，首先当然需要一个 github 帐号，自然还有 git.&lt;/p&gt;
&lt;h3&gt;git&lt;/h3&gt;
&lt;p&gt;git 是一个&lt;em&gt;版本控制软件&lt;/em&gt;，作用是记录你对一个项目的所有&lt;em&gt;修改历史&lt;/em&gt;。
我以前也只是将它用来备份自己写的一些垃圾而已，所以并不算熟悉。
关于学习 git，个人推荐&lt;a href="http://progit.org/book/zh/"&gt;这本书&lt;/a&gt;。
当然，更关键的还是&lt;strong&gt;先用起来&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;github&lt;/h3&gt;
&lt;p&gt;有关&lt;a href="http://github.com"&gt;github&lt;/a&gt;，
阳志平先生的&lt;a href="http://www.yangzhiping.com/tech/github.html"&gt;这篇博文&lt;/a&gt;让我觉得已经不必介绍的更多了。&lt;/p&gt;
&lt;p&gt;关于 github 的影响力，简单地看看本文里多少软件的链接出自 github 就知道了，其中有些还是有 github 但我贴了其他地址的。&lt;/p&gt;
&lt;p&gt;关于 github 的配置如果还有不明白的地方，看它官网的 help 足矣。&lt;/p&gt;
&lt;h3&gt;jekyll bootstrap&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://jekyllbootstrap.com/"&gt;Jekyll Bootstrap&lt;/a&gt;
是一个对生成&lt;em&gt;静态 blog 类站点&lt;/em&gt;的工具 Jekyll 的一个包装。
对于快速上手而言，它能减少很多麻烦。
如果只是想快速在 github 上搭建一个 blog，照着它主页说的走一遍非常容易。&lt;br&gt;
另外就像它的名字一样， Jekyll Bootstrap 默认是基于&lt;a href="http://twitter.github.com/bootstrap/"&gt;bootstrap&lt;/a&gt;的主题，twitter一贯的清新风格。&lt;/p&gt;
&lt;h3&gt;ruby&lt;/h3&gt;
&lt;p&gt;当然，为了在本地生成和预览结果，需要安装 jekyll，也就是说需要首先安装 ruby.&lt;/p&gt;
&lt;p&gt;Ruby 据说在 Mac 下工作最好，Linux 也不错，Windows 不敢恭维。&lt;/p&gt;
&lt;p&gt;总而言之，还是推荐使用 &lt;a href="http://beginrescueend.com/"&gt;rvm&lt;/a&gt; 安装 ruby.&lt;/p&gt;
&lt;p&gt;淘宝提供了 rubygems 的&lt;a href="http://ruby.taobao.org/"&gt;镜像源&lt;/a&gt;，
可有效加速 gem 的安装，强力推荐。&lt;/p&gt;
&lt;h3&gt;jekyll&lt;/h3&gt;
&lt;blockquote&gt;&lt;p&gt;Jekyll is a simple, blog aware, static site generator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/mojombo/jekyll/wiki"&gt;Jekyll&lt;/a&gt;
由两个部分协同工作，
一边是将标记语言(Textile, Markdown)转换为 html 语言的转换器，
另一边是模板引擎 &lt;a href="https://github.com/shopify/liquid/wiki"&gt;Liquid&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;本地安装 Jekyll 只需要运行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install jekyll&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即可。&lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;p&gt;Jekyll Bootstrap 的首页已经将主要需要配置的部分说明的很清楚了，像评论申请一个 &lt;a href="http://disqus.com"&gt;disqus&lt;/a&gt; 帐号就行。
这里说一些可能需要额外提醒的部分。&lt;/p&gt;
&lt;h3&gt;github 支持&lt;/h3&gt;
&lt;p&gt;如果需要将页面放在 github 上，那么需要注意 github 上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不支持自定义插件，因此需要特殊处理的页面最好自己写进 Rakefile 里;&lt;/li&gt;
&lt;li&gt;有些微妙的地方与本地不同。在我这里，如果使用中文的 markdown 文件名，最后生成的站点路径将找不到，而 github 上可以; 如果在 liquid 中使用 split filter，本地可以正常应用，而 github 上不可以。也可能是因为两边使用的 jekyll 版本有别？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;markdown 引擎&lt;/h3&gt;
&lt;p&gt;Jekyll 可以使用的 markdown 引擎至少有
&lt;a href="http://maruku.rubyforge.org/index.html"&gt;maruku&lt;/a&gt;,
&lt;a href="https://github.com/rtomayko/rdiscount"&gt;rdiscount&lt;/a&gt;,
&lt;a href="http://kramdown.rubyforge.org"&gt;kramdown&lt;/a&gt;.
我列举的顺序就是我尝试的顺序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maruku 是默认的 markdown 引擎。优点是语法灵活，支持很多扩展特性。缺点一个是慢(据说，我并没有太深刻的体会)，一个是&lt;em&gt;含中文的列表经常会解析出错&lt;/em&gt;，比如&lt;a href="/ACG/2012/03/03/sora-no-kiseki-ova2"&gt;这篇空轨OVA2的感想&lt;/a&gt;，如果使用 markdown 的标准语法写，被 maruku 解析后开头的12345就会乱掉，变成12125之类的东西……&lt;/li&gt;
&lt;li&gt;rdiscount 是 C 实现的 markdown 引擎，优点不用说也知道就是快。缺点就是完全以实现标准 markdown 句法为目标，完全不支持扩充句法。&lt;/li&gt;
&lt;li&gt;kramdown 是我目前在用的 markdown 引擎，速度按照其首页的说法是 maruku 的4倍。支持一些扩充句法，我认为足够了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装不同的引擎很容易，&lt;code&gt;gem install &amp;lt;引擎名&amp;gt;&lt;/code&gt;，然后对照着编辑&lt;code&gt;_config.yml&lt;/code&gt;即可。&lt;/p&gt;
&lt;h3&gt;语法高亮&lt;/h3&gt;
&lt;p&gt;就说一句，需要安装 pygment，并找一个高亮用的 css 文件。
我是从阳志平先生的站点上 fork 过来的。&lt;/p&gt;
&lt;h2&gt;其他功能&lt;/h2&gt;
&lt;p&gt;kramdown 支持的 markdown 语法可以在其网站上&lt;a href="http://kramdown.rubyforge.org/syntax.html"&gt;找到&lt;/a&gt;，
虽然我没在里头看到&lt;code&gt;{: toc}&lt;/code&gt;这种用法——这就是本文开头的目录生成的方法。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/jekyll"&gt;stackoverflow&lt;/a&gt;
自然也是个去提高经验值的好去处。&lt;/p&gt;
&lt;p&gt;最近评论在 disqus 网站上有提供代码，Google Plus 按钮亦同。&lt;/p&gt;
&lt;p&gt;主页的分页可以查 jekyll 的 paginate 支持。
主页和侧栏的编排一看源码便知，也没有花太多精力，因此不再赘述。&lt;/p&gt;
&lt;h3&gt;友情链接&lt;/h3&gt;
&lt;p&gt;一开始不清楚 yaml 的表示方法，
然后忘记了 jekyll 只是一个模板语言，因此&lt;em&gt;就算看起来再怎么像 ruby，也没有 ruby 的完整功能&lt;/em&gt;。
因此用 ruby 的语法各种试各种报错，最初版本里循环也写的超难看。
后来用 yaml 在 page 的开头表示成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;links&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://plus.google.com/117704226616638577311&amp;quot;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Google&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Plus&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://icemaple.info&amp;quot;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;远凌风&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;url&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://ori0n.co.de&amp;quot;&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;暗夜北辰&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就可以遍历生成了。&lt;/p&gt;
&lt;h3&gt;github 仓库&lt;/h3&gt;
&lt;p&gt;显示 github 仓库状态的 javascript 文件 fork 自&lt;a href="https://github.com/dementrock/dementrock.github.com/blob/master/javascripts/github.js"&gt;这里&lt;/a&gt;。
稍作修改，改为使用v3的API.&lt;/p&gt;
&lt;h3&gt;加密&lt;/h3&gt;
&lt;p&gt;注意 jekyll 是一个&lt;em&gt;静态站点生成器&lt;/em&gt;，因此至少也会把密文暴露出来。
这一点上的确很遗憾。
如果不是发布在 github 上，自己写后端代码会更安全些。&lt;/p&gt;
&lt;p&gt;现在的实现方式是 post 前手动执行 rake，将文章用 ruby 加密。
然后在网页端用 javascript 解密。&lt;/p&gt;
&lt;p&gt;解密使用了&lt;a href="https://github.com/mdp/gibberish-aes"&gt;Gibberish-AES&lt;/a&gt;
这个 javascript 写的 AES 库。
为什么选择了这个库？
&lt;a href="http://stackoverflow.com/questions/8080525/js-ruby-aes-256-symmetry"&gt;因为&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In the end I used Gibberish AES which has both a Ruby and JavaScript implementation written by the same author&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原先实现它自己写了一个 jekyll 的 filter 插件，它在本地工作的很好，但是扔到 github 上的时候就发生了杯具——
github 不支持自定义插件(安全原因)。
所以最终实现为了一个 rake 的 task.
原理很简单，就是把原先使用插件渲染的过程手动执行一遍。
之前看过 ruby 的书，但是基本没有实战过(没需求的缘故，平时都用 python)。
这次也算是有点小收获。&lt;/p&gt;
&lt;p&gt;关于这类问题的解决方案，
网上还有说不 push 原始仓库而去 push 本地生成的站点的。
只能说这种方法不符合我的哲学，不然我就去选择用 &lt;a href="https://github.com/imathis/octopress"&gt;octopress&lt;/a&gt; 了。&lt;/p&gt;
&lt;p&gt;最后顺便吐槽一句，也许是我还不熟悉的缘故，但我目前感觉
irb 和 ipython 真的不在一个档次上……&lt;/p&gt;
&lt;h3&gt;slide&lt;/h3&gt;
&lt;p&gt;上学期英语口语课以及高级逻辑学课上用基于 python 的 &lt;a href="https://github.com/adamzap/landslide"&gt;landslide&lt;/a&gt; 做了两个 slide.
基于 html5 的效果确实不错——老实说，除了要自己带一个浏览器外真的很理想——学校里那堆反人类的 IE6 大家都懂的，还不如自己随手用 pyqt 写的一个临时 webkit 浏览器靠谱。&lt;/p&gt;
&lt;p&gt;给 blog 添加 slide 功能的动机之一是看到了&lt;a href="http://bmcmurray.github.com/hekyll/"&gt;这个项目&lt;/a&gt;。
出于好玩，本想直接拿来用。
不过实际操作时才发现这个项目写 slide 要分成好几个文件，让我觉得很疼，所以最后思量了一下，打算根据 landslide 来自己做一个。&lt;/p&gt;
&lt;p&gt;当时用 landslide 的时候并没怎么在意它是怎么工作的，基本上拿来用就是(虽然为了处理一些公式也手动写了个 python 程序来预处理，其中还包括一个方便写 div 的 markdown 扩充预处理)。
这次其实也没有仔细研究。
它的核心其实在 javascript 部分。
用于生成页面的 base.html 其实也是个模板文件，格式和 liquid 很像，所以移植从思路上没大有难度。&lt;/p&gt;
&lt;p&gt;结果最纠结的地方还是在 liquid 的表现力上，反复的用 capture ……
可能是因为之前用过的 web 框架是 Karrigell 和 bottle，
感觉写法被受限的这么严重的感觉好微妙(Karrigell 支持的模板方式略多……)，
有点让我想起以前用 ONS 写 Fate 的时候……&lt;/p&gt;
&lt;p&gt;其间也发现了 &lt;code&gt;split&lt;/code&gt; filter 只在本地有效，在 github 上无效的现象。
最终靠 javascript 在载入时重新编排页面内容，完成了 Table of Contents 和页码显示部分。
这么想来，其实我一开始在生成端就干脆不对页面处理，全交给 javascript 来做也可以啊……突然感到 bgm38 了……&lt;/p&gt;
&lt;p&gt;当然顺便加了 MathJax 支持，在页面的 head 里加几句就可以，和当时给 landslide 加的方法差不多，MathJax 还是很好用的。&lt;/p&gt;
&lt;h3&gt;有关 git&lt;/h3&gt;
&lt;p&gt;想学习一个东西，就应该&lt;a href="http://www.yangzhiping.com/tech/learn-program-psychology.html"&gt;进入学习区学习它&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;前两天系里发来通知，说是可以申请系里的主页空间。因此当时就想可以用同一份仓库来做这个事情。&lt;/p&gt;
&lt;p&gt;原来的分支只有 master(除了加 feature 的时候会分出临时分支)，
在此之上新建了一个 is 分支，用来放系里的主页；
新建了一个 dev 分支，用来保存这个 blog 和系里的主页共同的部分。&lt;/p&gt;
&lt;p&gt;dev 分支是从原 master 分支分叉后删掉多余部分改出来的。
原 master 分支被我直接备份出去，然后从 dev 分支重新分出来新 master 分支，
然后再将备份重新复制回来提交……
虽然很不科学，但在这个场合应该是合适的。因为之前没有考虑过分支问题，和 dev 有关的提交与只与 master 有关的提交的历史混在一起，分离太繁琐。&lt;/p&gt;
&lt;p&gt;is 分支很容易，直接从 dev 分支分出来即可。&lt;/p&gt;
&lt;p&gt;将来 dev 分支进展的话，master 分支可以 merge dev 分支，is 那边要上传 &lt;code&gt;_site&lt;/code&gt; 生成目录，直接 rebase 就可以了。&lt;/p&gt;
&lt;p&gt;merge 和 rebase 的最大区别在于，前者是&lt;strong&gt;在不改变过去的前提下从两个分支创造共同的未来&lt;/strong&gt;, 而后者是&lt;strong&gt;改变过去后重新来过以改变现在&lt;/strong&gt;。
因为 rebase 会改变历史，因此不应该在公开仓库上使用(嘛，虽然不会有人 clone 并提交这个页面吧，所以其实也可以 rebase，只是每次要加 force 参数不舒服……);
但也因为 rebase 不会产生新分支，因此适合给其他人的项目提交补丁或新特性，提交后维护者只需要直接采纳前进就可以，就不必合并并留下分支记录了。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;使用 Jekyll 搭建博客拥有非常多的优点，
譬如版本控制、markdown、轻量、静态、可定制、geek。
只要安心看说明，使用门槛其实并不太高。
我觉得是一种很适合喜欢生活里充满乐趣和安逸的人的选择。&lt;/p&gt;
</summary><category term="ruby"></category><category term="git"></category><category term="programming"></category></entry><entry><title>非单调逻辑</title><link href="http://blog.skydark.info/test/2012/03/21/nml/" rel="alternate"></link><published>2012-03-21T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-03-21:test/2012/03/21/nml/</id><summary type="html">&lt;h1 id="start"&gt;Start&lt;/h1&gt;
&lt;p&gt;XX&lt;/p&gt;
&lt;p&gt;SMS 11011100XX&lt;/p&gt;
&lt;p&gt;XX at gmail&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="背景"&gt;背景&lt;/h1&gt;
&lt;h2 id="背景-1"&gt;背景&lt;/h2&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;div class="slider"&gt;
人工智能-&amp;gt; 常识推理形式化
&lt;/div&gt;
&lt;div class="slider-notes"&gt;
thinking/acting humanly/rationally
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;常识推理的特点
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;众多的例外&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“鸟会飞”：企鹅、鸵鸟、幼鸟、死鸟、玩具鸟等一干群众泪奔中。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对环境的依存性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“常在河边走，哪能不湿鞋”：表达的是一种经验。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;div class="tip"&gt;
&lt;p&gt;对比数学和物理定律。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;为形式地表述常识，并在常识间进行有效的形式推理，20世纪70年代人们提出了&lt;strong&gt;非单调逻辑&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="单调性与非单调性"&gt;单调性与非单调性&lt;/h1&gt;
&lt;h2 id="单调性"&gt;单调性&lt;/h2&gt;
&lt;div class="def" markdown="1"&gt;
&lt;p&gt;逻辑系统 FS 是&lt;strong&gt;单调的&lt;/strong&gt;， 如果对 FS 的任意公式集合 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; ⊆ &lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt; 蕴涵&lt;span class="math inline"&gt;&lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;)⊆&lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;)&lt;/span&gt;. 其中&lt;span class="math inline"&gt;&lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;)&lt;/span&gt;表示&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt;的演绎结果集合&lt;span class="math inline"&gt;{&lt;em&gt;A&lt;/em&gt;|&lt;em&gt;Γ&lt;/em&gt;⊢&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;S&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;A&lt;/em&gt;}&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;之前讨论的所有逻辑 &lt;span class="slider"&gt;都是单调的&lt;/span&gt; &lt;span class="slider-notes"&gt;包括包含不一致的情况。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但是&lt;span class="slider"&gt;常识推理不具有单调性&lt;/span&gt;&lt;backquote class="slider-notes"&gt;a 会飞吗？；a 是鸟-&amp;gt;会；a 是鸵鸟-&amp;gt;不会&lt;/backquote&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常识推理的这种特性称为&lt;strong&gt;非单调性&lt;/strong&gt;(与单调性的定义对应)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="def" markdown="1"&gt;
&lt;p&gt;逻辑系统 FS 是&lt;strong&gt;非单调的&lt;/strong&gt;, 如果存在公式集合&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; ⊊ &lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt; 但&lt;span class="math inline"&gt;&lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;)⊈&lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;具有非单调性的推理称为&lt;strong&gt;非单调推理&lt;/strong&gt;, 使用非单调推理的逻辑系统称为 &lt;span class="slider"&gt;&lt;strong&gt;非单调逻辑&lt;/strong&gt;&lt;/span&gt; &lt;span class="slider-notes"&gt;在不完全的知识上推理&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1 id="非单调逻辑的产生"&gt;非单调逻辑的产生&lt;/h1&gt;
&lt;h2 id="非单调逻辑的产生-1"&gt;非单调逻辑的产生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;封闭世界假设/ PLANNER 系统&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点: 需要保证可判定性/小心循环论证！&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用逻辑演算刻划状态转移&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;STRIPS 系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个动作的描述分为三部分：Action, Precondition, Effect&lt;/li&gt;
&lt;li&gt;添加表和删除表指 Effect 中的正文字和负文字。&lt;/li&gt;
&lt;li&gt;书上的例子&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="几种非单调逻辑系统"&gt;几种非单调逻辑系统&lt;/h2&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;赖特(Reiter)的&lt;em&gt;缺席推理逻辑&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;麦克德莫特(McDermott)和多伊尔(Doyle)的&lt;em&gt;非单调逻辑系统&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;麦卡锡(McCarthy)的&lt;em&gt;限定理论&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="缺席推理逻辑"&gt;缺席推理逻辑&lt;/h1&gt;
&lt;div class="ex" markdown="1"&gt;
&lt;ol type="1"&gt;
&lt;li&gt;已知鸟会飞，但只有鸵鸟不会飞&lt;/li&gt;
&lt;li&gt;据说企鹅是鸟，得出企鹅会飞&lt;/li&gt;
&lt;li&gt;又知道企鹅不会飞，不再推出企鹅会飞&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;h3 id="形式规则"&gt;形式规则&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;$$\frac{Bird(x):Mfly(x)}{fly(x)}$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="缺席推理规则的一般形式"&gt;缺席推理规则的一般形式&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;$$\frac{\alpha(\vec x):M\beta_1(\vec x),\dots,M\beta_m(\vec x)}{w(\vec x)}$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math inline"&gt;$\alpha(\vec x)$&lt;/span&gt;: &lt;em&gt;先决条件&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;$\beta_i(\vec x)$&lt;/span&gt;: &lt;em&gt;缺席条件&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;$w(\vec x)$&lt;/span&gt;: &lt;em&gt;结论&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;M: 常读作&lt;em&gt;可能&lt;/em&gt;, &lt;span class="math inline"&gt;$M\beta_i(\vec x)$&lt;/span&gt;表示就现有知识而言&lt;span class="math inline"&gt;$\beta_i(\vec x)$&lt;/span&gt;&lt;strong&gt;可能&lt;/strong&gt;成立， 即&lt;span class="math inline"&gt;$\lnot\beta_i(\vec x)$&lt;/span&gt;尚未出现(缺席)。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果缺席规则中不含自由变元，则称该规则为&lt;em&gt;闭规则&lt;/em&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="缺席理论的定义"&gt;缺席理论的定义&lt;/h2&gt;
&lt;div class="def" markdown="1"&gt;
&lt;p&gt;一个&lt;em&gt;缺席推理逻辑理论&lt;/em&gt;(简称缺席理论或理论)由以下两部分组成：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;缺席推理规则集 D;&lt;/li&gt;
&lt;li&gt;公式集 W，它是已知的或约定的事实集合。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺席理论常用二元矢&lt;span class="math inline"&gt;&amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt; 表示。 当 D 中所有规则是闭规则时，称理论&lt;span class="math inline"&gt;&amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt;为&lt;em&gt;闭理论&lt;/em&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;缺席理论是&lt;strong&gt;非单调的&lt;/strong&gt;。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="缺席理论的推出"&gt;缺席理论的“推出”&lt;/h2&gt;
&lt;div class="def" markdown="1"&gt;
&lt;p&gt;设 &lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt;是闭缺席理论，&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt;为&lt;em&gt;关于 D 的一个算子&lt;/em&gt;， &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt;作用于任意命题集合 S, 其值为满足下列三个性质的&lt;strong&gt;最小&lt;/strong&gt;命题集合&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;)&lt;/span&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;span class="slider"&gt;&lt;span class="math inline"&gt;&lt;em&gt;W&lt;/em&gt; ⊆ &lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="slider-notes"&gt;已知事实均成立。&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span class="slider"&gt; &lt;span class="math inline"&gt;&lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;)) = &lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;)&lt;/span&gt;, 这里的&lt;span class="math inline"&gt;&lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;))&lt;/span&gt;为命题集&lt;span class="math inline"&gt;{&lt;em&gt;A&lt;/em&gt;|&lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;)⊢&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;S&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;A&lt;/em&gt;}&lt;/span&gt; &lt;/span&gt;&lt;span class="slider-notes"&gt; 在经典逻辑的推出下封闭。 &lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span class="slider"&gt; 若 D 中有规则&lt;span class="math inline"&gt;$\frac{\alpha:M\beta_1,\dots,M\beta_m}{w}$&lt;/span&gt;， 且&lt;span class="math inline"&gt;&lt;em&gt;α&lt;/em&gt; ∈ &lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;),¬&lt;em&gt;β&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, …, ¬&lt;em&gt;β&lt;/em&gt;&lt;sub&gt;&lt;em&gt;m&lt;/em&gt;&lt;/sub&gt; ∉ &lt;em&gt;S&lt;/em&gt;&lt;/span&gt;， 则&lt;span class="math inline"&gt;&lt;em&gt;w&lt;/em&gt; ∈ &lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt;)&lt;/span&gt;. &lt;/span&gt;&lt;span class="slider-notes"&gt; 包含缺席规则获得的知识。 &lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="def" markdown="1"&gt;
&lt;p&gt;命题集合E成为关于 D 的算子&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt;的&lt;em&gt;固定点&lt;/em&gt;(fixed points)，如果&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;(&lt;em&gt;E&lt;/em&gt;)=&lt;em&gt;E&lt;/em&gt;&lt;/span&gt;. 此时又称 E 为&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt;的一个&lt;em&gt;扩充&lt;/em&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class="def"&gt;
&lt;p&gt;如果命题 A 包含在缺席理论&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt;&lt;/span&gt;的一个扩充中，那么称 A 在&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt;&lt;/span&gt;中可推出，记为 &lt;span class="slider"&gt;&lt;span class="math inline"&gt;$\sdash_\Delta$&lt;/span&gt;&lt;/span&gt; &lt;span class="slider-notes"&gt;表示非单调推出&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="缺席理论的扩充的性质"&gt;缺席理论的扩充的性质&lt;/h2&gt;
&lt;p&gt;并非所有缺席理论都有扩充，并非有扩充的缺席理论只有惟一的扩充。 参考书上的三个例子。&lt;/p&gt;
&lt;div class="example"&gt;
&lt;ul&gt;
&lt;li&gt;
无扩充&lt;br /&gt; &lt;span class="math inline"&gt;$D=\{\frac{:MA}{\lnot A}\}, W=\emptyset$&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
唯一扩充&lt;br /&gt; &lt;span class="math inline"&gt;$D=\{\frac{:MA}{\lnot B},\frac{:MB}{\lnot C},\frac{:MC}{\lnot F}\}, W=\emptyset$&lt;/span&gt; &lt;br /&gt; &lt;span class="math inline"&gt;&lt;em&gt;E&lt;/em&gt; = &lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;({¬&lt;em&gt;B&lt;/em&gt;, ¬&lt;em&gt;F&lt;/em&gt;})&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;
多个扩充&lt;br /&gt; &lt;span class="math inline"&gt;$D=\{\frac{:MA}{A},\frac{B:MC}{C},\frac{F\lor A:ME}{E},\frac{C\land E:M\lnot A,M(F\lor A)}{G}\}$&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;W&lt;/em&gt; = {&lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt; → &lt;em&gt;F&lt;/em&gt; ∨ &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;A&lt;/em&gt; ∧ &lt;em&gt;C&lt;/em&gt; → ¬&lt;em&gt;E&lt;/em&gt;}&lt;/span&gt; &lt;br /&gt; &lt;span class="math inline"&gt;&lt;em&gt;E&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = &lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;W&lt;/em&gt; ∪ {&lt;em&gt;A&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;}), &lt;em&gt;E&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; = &lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;W&lt;/em&gt; ∪ {&lt;em&gt;A&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;}), &lt;em&gt;E&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt; = &lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;W&lt;/em&gt; ∪ {&lt;em&gt;C&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;, &lt;em&gt;G&lt;/em&gt;})&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class="prop"&gt;
&lt;p&gt;设 E 为一阶命题集，&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt;为一闭的缺席理论。 递归定义&lt;span class="math inline"&gt;&lt;em&gt;E&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;(&lt;em&gt;i&lt;/em&gt; = 1, 2, ⋯)&lt;/span&gt;如下： &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;E&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; = &lt;em&gt;W&lt;/em&gt;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="math display"&gt;$$E_{i+1}=Th(E_i)\cup\{w|\frac{\alpha:M\beta_1,\dots,M\beta_m}{w}\in D,
\alpha\in E_i,\lnot\beta_1,\dots,\lnot\beta_m\not\in E\}$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;则 E 为&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt;&lt;/span&gt;的一个扩充当且仅当&lt;span class="math inline"&gt;$E=\bigcup_{i=0}^{\infty}E_i$&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="cor"&gt;
&lt;p&gt;闭缺席理论&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt;有不一致扩充 E, 当且仅当W不一致。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="prop"&gt;
&lt;p&gt;设&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;W&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&amp;gt;&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;, &lt;em&gt;W&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&amp;gt;&lt;/span&gt;均为缺席理论， 且&lt;span class="math inline"&gt;&lt;em&gt;W&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; ⊆ &lt;em&gt;W&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;. 若&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;的扩充都是一致的，则&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;的扩充也是一致的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="prop"&gt;
&lt;p&gt;设 E, F 为闭缺席理论&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt;的两个扩充， 如果&lt;span class="math inline"&gt;&lt;em&gt;E&lt;/em&gt; ⊆ &lt;em&gt;F&lt;/em&gt;&lt;/span&gt;, 则&lt;span class="math inline"&gt;&lt;em&gt;E&lt;/em&gt; = &lt;em&gt;F&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="规范缺席推理"&gt;规范缺席推理&lt;/h2&gt;
&lt;div class="def"&gt;
&lt;p&gt;一个缺席理论&lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt;称为是&lt;em&gt;规范的&lt;/em&gt;，如果 D 中缺席规则均为 &lt;span class="slider"&gt;如下形式：&lt;/span&gt; &lt;span class="slider-notes"&gt;和封闭世界假设的关联&lt;/span&gt; &lt;br /&gt;&lt;span class="math display"&gt;$$\frac{\alpha(\vec x):M w(\vec x)}{w(\vec x)}$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;它们被称为规范(缺席推理)规则。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;闭规范缺席理论有很多漂亮的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;闭规范缺席理论总有扩充。&lt;/li&gt;
&lt;li&gt;如果 E, F 同为一闭规范缺席理论的扩充，且 $E\neq F$，则 $E\cup F$ 是不一致的。&lt;/li&gt;
&lt;li&gt;设 $\Delta=\lt D,W\gt$ 为闭规范缺席理论，$D'\subseteq D$, 且 $E'_1$ 和 $E'_2$ 为 $\lt D',W\gt$ 的 &lt;span class="slider"&gt;两个不同扩充&lt;/span&gt; &lt;span class="slider-notes"&gt; 只谈一个扩充 $E'_1$, 如下的$E_1$也是存在的。这里强调的是扩充的&lt;strong&gt;数量&lt;/strong&gt;的单调性。 &lt;/span&gt; ，则 $\Delta$ 必有不同扩充 $E_1$ 和 $E_2$， 使 $E'_1\subseteq E_1, E'_2\subseteq E_2$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;闭规范缺席理论的扩充的大小，随闭规范缺席规则数目的增加而单调不减。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="缺席理论的形式证明"&gt;缺席理论的形式证明&lt;/h2&gt;
&lt;div class="def"&gt;
&lt;p&gt;设 &lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt; = &amp;lt;&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;W&lt;/em&gt;&amp;gt;&lt;/span&gt; 为闭规范缺席理论，令 &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;P&lt;/em&gt;(&lt;em&gt;D&lt;/em&gt;)={&lt;em&gt;α&lt;/em&gt;|&lt;em&gt;α&lt;/em&gt;为&lt;em&gt;D&lt;/em&gt;中规则的先决条件}&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;C&lt;/em&gt;(&lt;em&gt;D&lt;/em&gt;)={&lt;em&gt;w&lt;/em&gt;|&lt;em&gt;w&lt;/em&gt;为&lt;em&gt;D&lt;/em&gt;中规则的结论}&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;称一阶命题 &lt;span class="math inline"&gt;&lt;em&gt;β&lt;/em&gt;&lt;/span&gt; 有 &lt;span class="math inline"&gt;&lt;em&gt;Δ&lt;/em&gt;&lt;/span&gt; 中的一个(缺席)&lt;em&gt;证明&lt;/em&gt;， 如果存在 D 的有穷子集的有穷序列 &lt;span class="math inline"&gt;&lt;em&gt;D&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;, &lt;em&gt;D&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, …, &lt;em&gt;D&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;, 使得&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;span class="math inline"&gt;&lt;em&gt;W&lt;/em&gt; ∪ &lt;em&gt;C&lt;/em&gt;(&lt;em&gt;D&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;)⊢&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;S&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;β&lt;/em&gt;&lt;/span&gt;.
&lt;/li&gt;
&lt;li&gt;
对于整数 &lt;span class="math inline"&gt;&lt;em&gt;i&lt;/em&gt;&lt;/span&gt;, &lt;span class="math inline"&gt;1 ≤ &lt;em&gt;i&lt;/em&gt; ≤ &lt;em&gt;k&lt;/em&gt;&lt;/span&gt;, 及 &lt;span class="math inline"&gt;&lt;em&gt;P&lt;/em&gt;(&lt;em&gt;D&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt; − 1&lt;/sub&gt;)&lt;/span&gt; 中每一个 &lt;span class="math inline"&gt;&lt;em&gt;α&lt;/em&gt;&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;W&lt;/em&gt; ∪ &lt;em&gt;C&lt;/em&gt;(&lt;em&gt;D&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;)⊢&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;S&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;α&lt;/em&gt;&lt;/span&gt;.
&lt;div class="tip"&gt;
&lt;p&gt;证明序列中前面的先决条件逐个被后头的结论支持。&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;span class="math inline"&gt;&lt;em&gt;D&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;&lt;/sub&gt; = &lt;em&gt;ϕ&lt;/em&gt;&lt;/span&gt;.
&lt;/li&gt;
&lt;li&gt;
&lt;span class="math inline"&gt;$W\cup \bigcup_{i=0}^{k}{C(D_i)}$&lt;/span&gt; 可满足。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="缺席证明的消解方法"&gt;缺席证明的消解方法&lt;/h2&gt;
&lt;ol type="1"&gt;
&lt;li&gt;构造 S 包括所有 W 中的命题，待证命题否定的子句，以及所有规则的结果子句 $(c_i, \{\delta\})$, 其中 $\delta=\frac{\alpha:Mw}{w}\in D, c_i\textrm{是} w\textrm{的子句}$。&lt;/li&gt;
&lt;li&gt;对 S 消解导出空子句。&lt;/li&gt;
&lt;li&gt;消解过程中使用的结果子句所在的规则构成 $D_0$, 接下来继续消解证明 $D_0$ 中所有规则的先决条件，直到消解过程中不需要使用规则的结果子句，消解结束。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="ex"&gt;
&lt;p&gt;见书例11.6。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="缺席推理的局限性"&gt;缺席推理的局限性&lt;/h2&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;存在闭规范缺席理论是完全不可判定的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以上面的消解算法不可能是完备的。&lt;/p&gt;
&lt;p&gt;尽管如此，上述方法仍然是有力的。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;语义研究进展不足。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h1 id="非单调逻辑"&gt;非单调逻辑&lt;/h1&gt;
&lt;h2 id="非单调逻辑-1"&gt;非单调逻辑&lt;/h2&gt;
&lt;div class="ex" markdown="1"&gt;
&lt;p&gt;设理论 T 有以下三条公理：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;span class="math inline"&gt;正值中午 ∧ &lt;em&gt;M&lt;/em&gt;(出太阳)→出太阳&lt;/span&gt;, 模态词 M 表示与当前已推得的定理相容。&lt;/li&gt;
&lt;li&gt;正值中午&lt;/li&gt;
&lt;li&gt;&lt;span class="math inline"&gt;日食 → ¬(&lt;em&gt;出&lt;/em&gt;&lt;em&gt;太&lt;/em&gt;&lt;em&gt;阳&lt;/em&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;则在 T 中可证&lt;/p&gt;
&lt;p&gt;&lt;code&gt;4. 出太阳&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但若将&lt;/p&gt;
&lt;p&gt;&lt;code&gt;5. 日食&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;加入公理，则 4. 不再可证。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="tip"&gt;
&lt;p&gt;与缺席推理的不同： MA 的地位不同。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="非单调逻辑系统"&gt;非单调逻辑系统&lt;/h2&gt;
&lt;div class="tip"&gt;
&lt;p&gt;M的意义：&lt;br /&gt;&lt;span class="math display"&gt;$$\textrm{如果}\not\vdash\lnot A, \textrm{则}~\sdash MA$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将加入模态词 M 的一阶谓词演算系统记为 FC， 将允许使用 M 的一阶公式全体记为 $L_{FC}$， 对任何公式集 $\Gamma\subseteq L_{FC}$, $Th(\Gamma)=\{A|\Gamma\vdash_{FC}A\}$.&lt;/p&gt;
&lt;div class="def"&gt;
&lt;p&gt;对任何公式集 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt; ⊆ &lt;em&gt;L&lt;/em&gt;&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 定义&lt;em&gt;算子 &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;&lt;/em&gt;, 对任意公式集 &lt;span class="math inline"&gt;&lt;em&gt;S&lt;/em&gt; ⊆ &lt;em&gt;L&lt;/em&gt;&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;(&lt;em&gt;S&lt;/em&gt;)=&lt;em&gt;T&lt;/em&gt;&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt; ∪ &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/sub&gt;(&lt;em&gt;S&lt;/em&gt;))&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;&lt;sub&gt;&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/sub&gt;(&lt;em&gt;S&lt;/em&gt;)&lt;/span&gt; 称为 S 的 &lt;span class="slider"&gt;&lt;em&gt;假设集&lt;/em&gt;&lt;/span&gt; &lt;span class="slider-notes"&gt;与 S 相容的所有假设&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;A&lt;/em&gt;&lt;sub&gt;&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/sub&gt;(&lt;em&gt;S&lt;/em&gt;)={&lt;em&gt;M&lt;/em&gt;&lt;em&gt;Q&lt;/em&gt;|&lt;em&gt;Q&lt;/em&gt; ∈ &lt;em&gt;L&lt;/em&gt;&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt; ∧ ¬&lt;em&gt;Q&lt;/em&gt; ∉ &lt;em&gt;S&lt;/em&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;令&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;T&lt;/em&gt;&lt;em&gt;H&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;)=⋂({&lt;em&gt;L&lt;/em&gt;&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;}∪{&lt;em&gt;S&lt;/em&gt;|&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;(&lt;em&gt;S&lt;/em&gt;)=&lt;em&gt;S&lt;/em&gt;})&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;span class="slider"&gt;&lt;span class="math inline"&gt;&lt;em&gt;P&lt;/em&gt; ∈ &lt;em&gt;T&lt;/em&gt;&lt;em&gt;H&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class="slider-notes"&gt; 这里 &lt;span class="math inline"&gt;⋂&lt;em&gt;C&lt;/em&gt; = {&lt;em&gt;x&lt;/em&gt;|∀&lt;em&gt;S&lt;/em&gt;(&lt;em&gt;S&lt;/em&gt; ∈ &lt;em&gt;C&lt;/em&gt; → &lt;em&gt;x&lt;/em&gt; ∈ &lt;em&gt;S&lt;/em&gt;)}&lt;/span&gt;. 即元素交。&lt;br /&gt; 即是说， &lt;span class="math inline"&gt;&lt;em&gt;T&lt;/em&gt;&lt;em&gt;H&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;)&lt;/span&gt; 表示的是 &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 的 &lt;span class="slider"&gt;所有固定点的交&lt;/span&gt; &lt;span class="slider-notes"&gt;&lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 的最小不动点&lt;/span&gt; 。 当 &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 无固定点时， &lt;span class="math inline"&gt;&lt;em&gt;T&lt;/em&gt;&lt;em&gt;H&lt;/em&gt;(&lt;em&gt;Γ&lt;/em&gt;)&lt;/span&gt; 是全体 FC 公式。 &lt;/span&gt; , 那么称 P 可由 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt; &lt;em&gt;非单调地推出&lt;/em&gt;( &lt;span class="slider"&gt;可证&lt;/span&gt; &lt;span class="slider-notes"&gt;与缺席推理理论不同，要求 P 在&lt;strong&gt;所有&lt;/strong&gt;固定点中，后者只需&lt;strong&gt;某个&lt;/strong&gt;。&lt;/span&gt; )， 并记为 &lt;span class="math inline"&gt;$\Gamma\sdash P$&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;figure&gt;
&lt;img src="/images/logic/nm.jpg" alt="示意图" /&gt;&lt;figcaption&gt;示意图&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;center&gt;
关系示意图
&lt;/center&gt;
&lt;hr /&gt;
&lt;h2 id="非单调逻辑系统扩充的性质"&gt;非单调逻辑系统扩充的性质&lt;/h2&gt;
&lt;p&gt;与缺省逻辑里的 $\Gamma$ 算子一样， $NM_\Gamma$ 算子的固定点也未必存在，存在也未必唯一。&lt;/p&gt;
&lt;div class="ex"&gt;
&lt;p&gt;书上的一些例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt; = &lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt; ∪ {&lt;em&gt;M&lt;/em&gt;&lt;em&gt;C&lt;/em&gt; → ¬&lt;em&gt;C&lt;/em&gt;}&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 没有固定点。
&lt;/li&gt;
&lt;li&gt;
&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt; = &lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt; ∪ {&lt;em&gt;A&lt;/em&gt; ∧ &lt;em&gt;M&lt;/em&gt;&lt;em&gt;B&lt;/em&gt; → &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt; ∧ &lt;em&gt;M&lt;/em&gt;&lt;em&gt;D&lt;/em&gt; → &lt;em&gt;D&lt;/em&gt;, &lt;em&gt;A&lt;/em&gt; ∨ &lt;em&gt;C&lt;/em&gt;}&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 有唯一固定点。
&lt;/li&gt;
&lt;li&gt;
&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt; = &lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt; ∪ {&lt;em&gt;M&lt;/em&gt;&lt;em&gt;C&lt;/em&gt; → ¬&lt;em&gt;D&lt;/em&gt;, &lt;em&gt;M&lt;/em&gt;&lt;em&gt;D&lt;/em&gt; → ¬&lt;em&gt;C&lt;/em&gt;}&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 有两个固定点。
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;甚至可能有无穷个固定点。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="非单调逻辑系统固定点的性质"&gt;非单调逻辑系统固定点的性质&lt;/h2&gt;
&lt;div class="prop"&gt;
&lt;p&gt;设 &lt;span class="math inline"&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;, &lt;em&gt;Q&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;, ⋯, &lt;/span&gt; 是 &lt;span class="math inline"&gt;&lt;em&gt;L&lt;/em&gt;&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 的一个枚举， &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt; ⊆ &lt;em&gt;L&lt;/em&gt;&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;. 令&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; = &lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="math display"&gt;$$
\Gamma_{i+1} = \left\{\begin{array}{ll}
L_{FC} &amp;amp;amp; \textrm{如果有} P\in L_{FC} 
\textrm{使} MP\in\Gamma_i \textrm{且} \Gamma_i\vdash\lnot P\\
\Gamma_i\cup\{MQ_i\} &amp;amp;amp; \textrm{如果}\Gamma_i\cup\{Q_i\}\textrm{一致}\\
\Gamma_i &amp;amp;amp; \textrm{否则}\\
\end{array}\right.
$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;置 &lt;span class="math inline"&gt;$\Gamma_\infty=\bigcup_{i=0}^\infty{\Gamma_i}$&lt;/span&gt;, 则 &lt;span class="math inline"&gt;$\Gamma\sdash P$&lt;/span&gt; 当且仅当对 &lt;span class="math inline"&gt;&lt;em&gt;L&lt;/em&gt;&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 的每一枚举，均有 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;∞&lt;/sub&gt;⊢&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="prop"&gt;
&lt;p&gt;存在 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;′⊆&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 有固定点，但 &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;′&lt;/sub&gt;&lt;/span&gt; 无固定点。 (对比定理 11.2)&lt;/p&gt;
&lt;p&gt;如果 &lt;span class="math inline"&gt;&lt;em&gt;F&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;F&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt; 均为 &lt;span class="math inline"&gt;&lt;em&gt;N&lt;/em&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 的固定点，且 &lt;span class="math inline"&gt;&lt;em&gt;F&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; ⊆ &lt;em&gt;F&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;, 则 &lt;span class="math inline"&gt;&lt;em&gt;F&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = &lt;em&gt;F&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;. (对比定理 11.3)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;对应于闭规范缺席理论的非单调理论不一定有扩充。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="非单调逻辑系统的形式证明"&gt;非单调逻辑系统的形式证明&lt;/h2&gt;
&lt;p&gt;非单调命题逻辑的可证性是可判定的。但一般地，非单调逻辑的可证性是不可判定的。&lt;/p&gt;
&lt;p&gt;下面的算法类似于命题演算的真值表方法。&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;p&gt;要证 $\Gamma\sdash A$, 对使 $\Gamma\to A$ 假的一切可能情况列表。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表的第一列为 $\Gamma$ 中的公式，它们总取值为 1. 第二列为待证公式 A 的表，称为 t 表， A 总取值为 0，由 $\Gamma$ 和 A 的值计算子公式的真值。 当 t 中出现取值为 0 的 MB 形公式时，建立以 $\Gamma\to\lnot B$ 为目标的新表。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对表各分支如下标记(称为适当的) &lt;span class="slider"&gt;open&lt;/span&gt; &lt;span class="slider-notes"&gt;无法否证 B, 所以 MB 可以满足&lt;/span&gt; 或 &lt;span class="slider"&gt;closed&lt;/span&gt; &lt;span class="slider-notes"&gt;矛盾，反证成功&lt;/span&gt; ：&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;当 $\Gamma\sdash \lnot B$ 的表标记open时，对每一表中的 MB 标记为 1.&lt;/li&gt;
&lt;li&gt;表的分支标记为 closed 当且仅当该分支中有公式同时标记了 0 和 1. 一分支标记为 open 当且仅当该分支不能被标记为 closed.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$\Gamma\to A$ 当且仅当在所有适当标记中，t 均被标记为 closed.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="ex"&gt;
&lt;p&gt;见书上的两个例子。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="加贝的语义解释"&gt;加贝的语义解释&lt;/h2&gt;
&lt;p&gt;加贝 (Gabbay) 对非单调逻辑作了 &lt;span class="slider"&gt;直觉主义的语义解释&lt;/span&gt; &lt;span class="slider-notes"&gt;“Hi, 小朋友们大家好，还记得我是谁吗？”——克里普克 P.103&lt;/span&gt; ：&lt;/p&gt;
&lt;div class="def"&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;$$\models_{\mathscr K}^k MA \textrm{当且仅当存在}l\geq k\textrm{使}\models_{\mathscr K}^l A$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ex"&gt;
&lt;p&gt;&lt;br /&gt;&lt;span class="math display"&gt;⊨&lt;em&gt;M&lt;/em&gt;&lt;em&gt;A&lt;/em&gt; ∨ ¬&lt;em&gt;A&lt;/em&gt;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="math display"&gt;⊨¬&lt;em&gt;M&lt;/em&gt;&lt;em&gt;A&lt;/em&gt; ↔ ¬&lt;em&gt;A&lt;/em&gt;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="math display"&gt;⊨(&lt;em&gt;M&lt;/em&gt;&lt;em&gt;A&lt;/em&gt; → &lt;em&gt;B&lt;/em&gt;)↔(¬&lt;em&gt;A&lt;/em&gt; ∨ &lt;em&gt;B&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="math display"&gt;⊨(&lt;em&gt;M&lt;/em&gt;&lt;em&gt;C&lt;/em&gt; → ¬&lt;em&gt;C&lt;/em&gt;)↔¬&lt;em&gt;C&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="加贝语义的非单调可证性"&gt;加贝语义的非单调可证性&lt;/h2&gt;
&lt;div class="def"&gt;
&lt;p&gt;设 &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt; ∈ &lt;em&gt;L&lt;/em&gt;&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;, B 由 A &lt;strong&gt;非单调可证&lt;/strong&gt;( &lt;span class="math inline"&gt;$A\sdash B$&lt;/span&gt; )指存在公式序列 &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;C&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; = &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, &lt;em&gt;C&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;, ⋯, &lt;em&gt;C&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt; = &lt;em&gt;B&lt;/em&gt;&lt;/span&gt;&lt;br /&gt; 以及称为额外假设的公式 &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;M&lt;/em&gt;&lt;em&gt;X&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;1&lt;/sup&gt;, ⋯, &lt;em&gt;M&lt;/em&gt;&lt;em&gt;X&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;(1)&lt;/sub&gt;&lt;sup&gt;1&lt;/sup&gt;; &lt;em&gt;M&lt;/em&gt;&lt;em&gt;X&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;, ⋯, ⋯, &lt;em&gt;M&lt;/em&gt;&lt;em&gt;X&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;(2)&lt;/sub&gt;&lt;sup&gt;2&lt;/sup&gt;; ⋯; &lt;em&gt;M&lt;/em&gt;&lt;em&gt;X&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt;, ⋯, &lt;em&gt;M&lt;/em&gt;&lt;em&gt;X&lt;/em&gt;&lt;sub&gt;&lt;em&gt;k&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;)&lt;/sub&gt;&lt;sup&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sup&gt;&lt;/span&gt;&lt;br /&gt; 使得 &lt;br /&gt;&lt;span class="math display"&gt;$$C_{i-1}\land\bigwedge_{j=1}^{k(i)}MX_j^i\models C_i(i=1,2,\cdots,n)$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ex"&gt;
&lt;p&gt;如果 &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt; ∧ &lt;em&gt;M&lt;/em&gt;&lt;em&gt;B&lt;/em&gt; ⊨ &lt;em&gt;C&lt;/em&gt;&lt;/span&gt; 并且 &lt;span class="math inline"&gt;&lt;em&gt;C&lt;/em&gt; ∧ &lt;em&gt;M&lt;/em&gt;&lt;em&gt;D&lt;/em&gt; ⊨ &lt;em&gt;E&lt;/em&gt;&lt;/span&gt;, 那么 &lt;span class="math inline"&gt;$A\sdash C$&lt;/span&gt;, &lt;span class="math inline"&gt;$C\sdash E$&lt;/span&gt;, 从而易证 &lt;span class="math inline"&gt;$A\sdash E$&lt;/span&gt;, 因为 &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;A&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;&lt;/span&gt;&lt;br /&gt; &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;M&lt;/em&gt;&lt;em&gt;B&lt;/em&gt;; &lt;em&gt;M&lt;/em&gt;&lt;em&gt;D&lt;/em&gt;&lt;/span&gt;&lt;br /&gt; 即为上面非单调可证需要的公式序列和额外假设公式。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;加贝语义中的 $\sdash$ 对比 M &amp;amp; D 的定义中的 $\sdash$ 要更符合直观：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加贝语义中有 $M(A\land B)\sdash MA$ 和 $\lnot MA\sdash\lnot A$&lt;/li&gt;
&lt;li&gt;加贝语义中 $MC\land\lnot C$ 不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但加贝的讨论局限于命题演算中。&lt;/p&gt;
&lt;div class="tip" markdown="1"&gt;
&lt;p&gt;TMS(真值维持系统)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录每条信念的依赖关系&lt;/li&gt;
&lt;li&gt;当新信念否定了旧信念时，回溯依赖关系消除不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h1 id="限定逻辑"&gt;限定逻辑&lt;/h1&gt;
&lt;p&gt;将已发现的具有某些性质的客体视为具有该性质的全部客体， 直至具有该性质的其它客体被发现时修改这一看法。&lt;/p&gt;
&lt;p&gt;Idea: 奥卡姆剃刀(Occam principle)&lt;/p&gt;
&lt;p&gt;麦卡锡并未引入新的算子或逻辑符号，只是在经典逻辑框架内研究适合表示非单调性的特殊推理形式。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="限定"&gt;限定&lt;/h2&gt;
&lt;div class="def"&gt;
&lt;p&gt;n 元谓词 P 在一阶公式 A(P) 中的&lt;em&gt;限定&lt;/em&gt;是指如下的公式模式 &lt;br /&gt;&lt;span class="math display"&gt;$$A(\Phi)\land\forall\vec x(\Phi(\vec x)\to P(\vec x))\to\forall\vec x(P(\vec x)\to\Phi(\vec x))$$&lt;/span&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;(&lt;em&gt;Φ&lt;/em&gt;)&lt;/span&gt; 表示将 A 中所有 P 的出现替换为公式 &lt;span class="math inline"&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="slider"&gt;&lt;em&gt;想表达什么？&lt;/em&gt;&lt;/span&gt; &lt;span class="slider-notes"&gt; 所谓对公式 A 的限定就是：&lt;br /&gt;
如果用谓词 $\Phi$ 满足 P 满足的条件( A )， 并且满足 $\Phi$ 的客体都满足 P， 则满足 P 的客体都满足 $\Phi$ 。 &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="ex"&gt;
&lt;p&gt;见书上例子：方块世界和数学归纳法。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="域限定"&gt;域限定&lt;/h2&gt;
&lt;p&gt;假设个体域为 $\{x|P(x)\}$, 则任意公式 A 中的量词可如下改变，A 的意义不变：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 中的 $\exists x B(x)$, 可改为 $\exists x(P(x)\land B(x))$.&lt;/li&gt;
&lt;li&gt;A 中的 $\forall x B(x)$, 可改为 $\forall x(P(x)\to B(x))$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公式 A 的&lt;em&gt;域限定&lt;/em&gt;指对 A 中 P 作限定，即&lt;/p&gt;
&lt;p&gt;
&lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;A&lt;/em&gt;&lt;sup&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/sup&gt; → ∀&lt;em&gt;x&lt;/em&gt;&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;其中 $A^\Phi$ 表示将 A 中 $\exists x B(x)$ 改为 $\exists x(\Phi(x)\land B(x))$, $\forall x C(x)$ 改为 $\forall x(\Phi(x)\to C(x))$ 后所得的公式。&lt;/p&gt;
&lt;p&gt;意义：若 A 在论域 $\{x|\Phi(x)\}$ 中为真，则所有满足 A 的个体都满足 $\Phi(x)$.&lt;/p&gt;
&lt;div class="ex"&gt;
&lt;p&gt;令 B(x) 表示 x 是渡河工具，&lt;span class="math inline"&gt;&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; 表示 x 是船。 A 为 &lt;span class="math inline"&gt;∀&lt;em&gt;x&lt;/em&gt;&lt;em&gt;B&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;. 对 A 用 &lt;span class="math inline"&gt;&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; 做限定，得 &lt;br /&gt;&lt;span class="math display"&gt;∀&lt;em&gt;x&lt;/em&gt;(&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)→&lt;em&gt;B&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)) → ∀&lt;em&gt;x&lt;/em&gt;&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt; 由于 &lt;span class="math inline"&gt;&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)→&lt;em&gt;B&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; 为真，故 &lt;span class="math inline"&gt;∀&lt;em&gt;x&lt;/em&gt;&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; 为真，即所有渡河工具都是船。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="限定论可证"&gt;限定论可证&lt;/h2&gt;
&lt;div class="def"&gt;
&lt;p&gt;对任意公式 A, 令 &lt;span class="math inline"&gt;&lt;em&gt;Ω&lt;/em&gt;(&lt;em&gt;A&lt;/em&gt;)={[&lt;em&gt;A&lt;/em&gt;&lt;sup&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/sup&gt; → ∀&lt;em&gt;x&lt;/em&gt;&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)]&lt;sup&gt;0&lt;/sup&gt;|&lt;em&gt;Φ&lt;/em&gt;为任一含自由变元&lt;em&gt;x&lt;/em&gt;的一阶公式}&lt;/span&gt;. 这里 &lt;span class="math inline"&gt;&lt;em&gt;B&lt;/em&gt;&lt;sup&gt;0&lt;/sup&gt;&lt;/span&gt;表示 B 的全称封闭式。又令 &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;M&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;(&lt;em&gt;A&lt;/em&gt;)=&lt;em&gt;Ω&lt;/em&gt;(&lt;em&gt;A&lt;/em&gt;)∪{&lt;em&gt;A&lt;/em&gt;},&lt;/span&gt;&lt;br /&gt; &lt;span class="math inline"&gt;&lt;em&gt;M&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;(&lt;em&gt;A&lt;/em&gt;)&lt;/span&gt; 称为 A 的&lt;em&gt;最小完备集&lt;/em&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="space"&gt;

&lt;/div&gt;
&lt;div class="def"&gt;
&lt;p&gt;如果 &lt;span class="math inline"&gt;&lt;em&gt;M&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;(&lt;em&gt;A&lt;/em&gt;)⊢&lt;sub&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;S&lt;/em&gt;&lt;em&gt;F&lt;/em&gt;&lt;em&gt;C&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;B&lt;/em&gt;&lt;/span&gt;, 则称一阶公式 B 由一阶公式 A &lt;em&gt;限定论可证&lt;/em&gt;，记为 &lt;span class="math inline"&gt;$A\sdash_{mc}B$&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ex"&gt;
&lt;p&gt;限定一阶语言仅含一个一元谓词 P(x), 有 &lt;span class="math inline"&gt;$\exists x P(x)\sdash_{mc}\forall x P(x)$&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;限定论可证的非单调性：当限定被取消或改变时。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="限定理论的语义"&gt;限定理论的语义&lt;/h2&gt;
&lt;div class="def"&gt;
&lt;p&gt;设 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt; 为一阶命题集，称结构 &lt;span class="math inline"&gt;𝔄 = &amp;lt;&lt;em&gt;U&lt;/em&gt;, &lt;em&gt;I&lt;/em&gt;&amp;gt;&lt;/span&gt; 为 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt; 的&lt;em&gt;最小模型&lt;/em&gt;， 如果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
对每个 &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt; ∈ &lt;em&gt;Γ&lt;/em&gt;, ⊨&lt;sub&gt;𝔄&lt;/sub&gt;&lt;em&gt;A&lt;/em&gt;&lt;/span&gt;.
&lt;/li&gt;
&lt;li&gt;
对 &lt;span class="math inline"&gt;𝒰&lt;/span&gt; 的任一子结构 &lt;span class="math inline"&gt;𝔄′= &amp;lt; &lt;em&gt;U&lt;/em&gt;′,&lt;em&gt;I&lt;/em&gt;′&amp;gt;(&lt;em&gt;U&lt;/em&gt;′⊂&lt;em&gt;U&lt;/em&gt;, &lt;em&gt;I&lt;/em&gt;′=&lt;em&gt;I&lt;/em&gt;∣&lt;sub&gt;&lt;em&gt;U&lt;/em&gt;′&lt;/sub&gt;, &lt;em&gt;I&lt;/em&gt;∣&lt;sub&gt;&lt;em&gt;U&lt;/em&gt;′&lt;/sub&gt;&lt;/span&gt; 表示将解释 I 限于 &lt;span class="math inline"&gt;&lt;em&gt;U&lt;/em&gt;′&lt;/span&gt;, 例如对一元谓词 P, &lt;span class="math inline"&gt;&lt;em&gt;I&lt;/em&gt;∣&lt;sub&gt;&lt;em&gt;U&lt;/em&gt;′&lt;/sub&gt;(&lt;em&gt;P&lt;/em&gt;)=&lt;em&gt;I&lt;/em&gt;(&lt;em&gt;P&lt;/em&gt;)∩&lt;em&gt;U&lt;/em&gt;′)&lt;/span&gt; 存在 &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt; ∈ &lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt;, 使 &lt;span class="math inline"&gt;$\not\models_{\mathfrak{A}'} A$&lt;/span&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="space"&gt;

&lt;/div&gt;
&lt;div class="def"&gt;
&lt;p&gt;称一阶命题 B 为一阶命题集 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt; 的&lt;em&gt;最小逻辑结果&lt;/em&gt;, 记为 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;⊨&lt;sub&gt;&lt;em&gt;m&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;B&lt;/em&gt;&lt;/span&gt;, 如果 B 在所有 &lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;/span&gt; 的最小模型中均真。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ex"&gt;
&lt;p&gt;见书上例子。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;div class="ex"&gt;
&lt;p&gt;&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = ∅&lt;/span&gt;, 其最小模型为所有个体域为幺元集的结构， 有 &lt;br /&gt;&lt;span class="math display"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;⊨&lt;sub&gt;&lt;em&gt;m&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;&lt;/sub&gt;∀&lt;em&gt;x&lt;/em&gt;∀&lt;em&gt;y&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;y&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="math inline"&gt;&lt;em&gt;Γ&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; = {∃&lt;em&gt;x&lt;/em&gt;∃&lt;em&gt;y&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt; ≠ &lt;em&gt;y&lt;/em&gt;)}&lt;/span&gt;, 其最小模型为所有个体域含有两个元素的结构， 有 &lt;br /&gt;&lt;span class="math display"&gt;$$\Gamma_2\not\models_{mc}\forall x\forall y(x=y)$$&lt;/span&gt;&lt;br /&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;上面例子说明 $\models_{mc}$ 不是单调的。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="限定可证性的合理性和完备性"&gt;限定可证性的合理性和完备性&lt;/h2&gt;
&lt;div class="prop"&gt;
&lt;p&gt;对任何一阶命题 A, B, 如果 &lt;span class="math inline"&gt;$A\sdash_{mc} B$&lt;/span&gt;, 则 &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;⊨&lt;sub&gt;&lt;em&gt;m&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;B&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="pf"&gt;
&lt;p&gt;设 &lt;span class="math inline"&gt;𝔄 = &amp;lt;&lt;em&gt;U&lt;/em&gt;, &lt;em&gt;I&lt;/em&gt;&amp;gt;&lt;/span&gt; 为 A 的最小模型，C 为 &lt;span class="math inline"&gt;&lt;em&gt;Ω&lt;/em&gt;(&lt;em&gt;A&lt;/em&gt;)&lt;/span&gt; 中的任一公式。 先证 &lt;span class="math inline"&gt;⊨&lt;sub&gt;𝔄&lt;/sub&gt;&lt;em&gt;C&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;只需证 &lt;span class="math inline"&gt;⊨&lt;sub&gt;𝔄&lt;/sub&gt;[&lt;em&gt;A&lt;/em&gt;&lt;sup&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/sup&gt; → ∀&lt;em&gt;x&lt;/em&gt;&lt;em&gt;Φ&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)]&lt;sup&gt;0&lt;/sup&gt;&lt;/span&gt;. 将论域限定到满足 &lt;span class="math inline"&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/span&gt; 的个体集上即可。&lt;/p&gt;
&lt;p&gt;再证 &lt;span class="math inline"&gt;&lt;em&gt;A&lt;/em&gt;⊨&lt;sub&gt;&lt;em&gt;m&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;&lt;/sub&gt;&lt;em&gt;B&lt;/em&gt;&lt;/span&gt;. 将 &lt;span class="math inline"&gt;$\sdash_{mc}$&lt;/span&gt; 转化到 FSFC上即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="space"&gt;

&lt;/div&gt;
&lt;div class="prop"&gt;
&lt;p&gt;限定可证性不具有完备性。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="pf"&gt;
&lt;p&gt;考虑例 11.18.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="性质限定"&gt;性质限定&lt;/h2&gt;
&lt;p&gt;“船可以渡河”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;域限定：只有船可以渡河&lt;/li&gt;
&lt;li&gt;性质限定：船只能渡河&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="def"&gt;
&lt;p&gt;设 &lt;span class="math inline"&gt;$A(\vec P)$&lt;/span&gt; 为一二阶公式， &lt;span class="math inline"&gt;$\vec P$&lt;/span&gt; 为一组谓词变元 &lt;span class="math inline"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;, …, &lt;em&gt;P&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 的缩写。 又设 &lt;span class="math inline"&gt;$E(\vec P, \vec x)$&lt;/span&gt; 是含自由谓词变元 &lt;span class="math inline"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;, …, &lt;em&gt;P&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 和个体变元 &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, …, &lt;em&gt;x&lt;/em&gt;&lt;sub&gt;&lt;em&gt;m&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 的二阶公式。称下列二阶公式为 &lt;span class="math inline"&gt;$E(\vec P, \vec x)$&lt;/span&gt; 关于 &lt;span class="math inline"&gt;$A(\vec P)$&lt;/span&gt; 的&lt;em&gt;性质限定&lt;/em&gt;：&lt;/p&gt;
&lt;p&gt;&lt;span class="slider"&gt;&lt;span class="math inline"&gt;$A(\vec P)\land\forall\vec{P'}(A(\vec{P'})\land\forall{\vec x}(E(\vec{P'}, \vec x)\to E(\vec P, \vec x))\to\forall \vec x(E(\vec{P'},\vec x)\leftrightarrow E(\vec P, \vec x)))$&lt;/span&gt;&lt;/span&gt; &lt;span class="slider-notes"&gt;对比限定的原始形式：&lt;span class="math inline"&gt;$A(\Phi)\land\forall\vec x(\Phi(\vec x)\to P(\vec x))\to\forall\vec x(P(\vec x)\to\Phi(\vec x))$&lt;/span&gt;　 口&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ex"&gt;
&lt;p&gt;令 E(Q, x) 表示 “x 具有性质 Q”，P 表示“能渡河”的性质，A(Q) 表示“Q 是船的性质”， 若接受 A(P)，则 E(Q, x) 关于 A(P) 的性质限定为：&lt;/p&gt;
&lt;p&gt;&lt;span class="slider"&gt;&lt;span class="math inline"&gt;∀&lt;em&gt;P&lt;/em&gt;′(&lt;em&gt;A&lt;/em&gt;(&lt;em&gt;P&lt;/em&gt;′) ∧ ∀&lt;em&gt;x&lt;/em&gt;(&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;P&lt;/em&gt;′,&lt;em&gt;x&lt;/em&gt;)→&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;P&lt;/em&gt;, &lt;em&gt;x&lt;/em&gt;)) → ∀&lt;em&gt;x&lt;/em&gt;(&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;P&lt;/em&gt;′,&lt;em&gt;x&lt;/em&gt;)↔&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;P&lt;/em&gt;, &lt;em&gt;x&lt;/em&gt;)))&lt;/span&gt;&lt;/span&gt; &lt;span class="slider-notes"&gt;如果一个船的性质是“能渡河”的子属性，则这个性质就是“能渡河”。&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h3 id="性质限定续"&gt;性质限定(续)&lt;/h3&gt;
&lt;div class="def"&gt;
&lt;p&gt;&lt;span class="math inline"&gt;$A(\vec P), \vec P$&lt;/span&gt; 的意义同定义 11.15,称下列二阶公式为 A 中 &lt;em&gt;谓词变元 &lt;span class="math inline"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;&lt;/span&gt; 具有 &lt;span class="math inline"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, ⋯, &lt;em&gt;P&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; 的限定&lt;/em&gt;， 记为 &lt;span class="math inline"&gt;&lt;em&gt;C&lt;/em&gt;&lt;em&gt;i&lt;/em&gt;&lt;em&gt;r&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;&lt;em&gt;u&lt;/em&gt;&lt;em&gt;m&lt;/em&gt;(&lt;em&gt;A&lt;/em&gt;; &lt;em&gt;P&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;, &lt;em&gt;P&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, ⋯, &lt;em&gt;P&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt;)&lt;/span&gt;：&lt;/p&gt;
&lt;p&gt;
&lt;span class="slider"&gt;&lt;span class="math inline"&gt;$A(\vec P)\land \forall\vec{P'}(A(\vec{P'})\land\forall\vec{x}(P_0'(\vec x)\to P_0(x))\to\forall\vec x(P_0'(\vec x)\leftrightarrow P_0(\vec x)))$&lt;/span&gt;&lt;/span&gt; &lt;span class="slider-notes"&gt;继续对比限定的原始形式：&lt;span class="math inline"&gt;$A(\Phi)\land\forall\vec x(\Phi(\vec x)\to P(\vec x))\to\forall\vec x(P(\vec x)\to\Phi(\vec x))$&lt;/span&gt;　 口&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ex"&gt;
&lt;p&gt;A(D, L) 表示如下事实： &lt;br /&gt;&lt;span class="math display"&gt;∀&lt;em&gt;x&lt;/em&gt;(&lt;em&gt;D&lt;/em&gt;&lt;em&gt;x&lt;/em&gt; ↔ ¬&lt;em&gt;L&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;)∧&lt;em&gt;L&lt;/em&gt;&lt;em&gt;a&lt;/em&gt; ∧ &lt;em&gt;D&lt;/em&gt;&lt;em&gt;b&lt;/em&gt; ∧ &lt;em&gt;R&lt;/em&gt;&lt;em&gt;c&lt;/em&gt; ∧ (&lt;em&gt;a&lt;/em&gt; ≠ &lt;em&gt;b&lt;/em&gt; ∧ &lt;em&gt;a&lt;/em&gt; ≠ &lt;em&gt;c&lt;/em&gt; ∧ &lt;em&gt;b&lt;/em&gt; ≠ &lt;em&gt;c&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt; 其中 Dx 表示 x 死了， Lx 表示 x 活着，Rx 表示 x 是兔子， 想要限定“全部死了的客体就是已知死了的客体(即 b)”。 只用之前的限定方法限定 D，由于无法推出 &lt;span class="math inline"&gt;¬&lt;em&gt;D&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;(&lt;em&gt;L&lt;/em&gt;&lt;em&gt;c&lt;/em&gt;)&lt;/span&gt;，无法得到我们想要的结果。 用性质限定，得到 &lt;br /&gt;&lt;span class="math display"&gt;$$\forall x(P_0(x)\leftrightarrow\lnot P_1(x))\land P_1(a)\land P_0(b)\land Rc\land (a\neq b\land a\neq c\land b\neq c)\land \forall x(P_0(x)\to Dx)\\
\to\forall x(P_0(x)\leftrightarrow Dx)$$&lt;/span&gt;&lt;br /&gt; 令 &lt;span class="math inline"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; 为 &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;b&lt;/em&gt;&lt;/span&gt;, &lt;span class="math inline"&gt;&lt;em&gt;P&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; 为 &lt;span class="math inline"&gt;&lt;em&gt;x&lt;/em&gt; ≠ &lt;em&gt;b&lt;/em&gt;&lt;/span&gt;，即得 &lt;br /&gt;&lt;span class="math display"&gt;∀&lt;em&gt;x&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;b&lt;/em&gt; ↔ &lt;em&gt;D&lt;/em&gt;&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt; 即得我们想要的结果。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="性质限定的可满足性"&gt;性质限定的可满足性&lt;/h2&gt;
&lt;p&gt;如果 $A(P)$ 的限定是可满足的，那么 $A(P)$ 也是可满足的，但反之不然。&lt;/p&gt;
&lt;div class="ex"&gt;
&lt;p&gt;见书上例 11.21&lt;/p&gt;
&lt;/div&gt;
&lt;div class="prop"&gt;
&lt;p&gt;如果 &lt;span class="math inline"&gt;$A(\vec P)$&lt;/span&gt; 为一可满足的 &lt;span class="slider"&gt;全称命题&lt;/span&gt; &lt;span class="slider-notes"&gt;前束范式中不含存在量词&lt;/span&gt; ，那么 &lt;span class="math inline"&gt;$Circum(A(\vec P), \vec P)$&lt;/span&gt; 也是可满足的。&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2 id="限定理论的应用前景"&gt;限定理论的应用前景&lt;/h2&gt;
&lt;p&gt;Frame problem: 在动作后状态的改变只局限在动作影响到的部分上。&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id="thank-you"&gt;Thank you!&lt;/h1&gt;
</summary><category term="test"></category><category term="logic"></category><category term="AI"></category></entry><entry><title>测试密码功能</title><link href="http://blog.skydark.info/test/2012/03/15/passwd/" rel="alternate"></link><published>2012-03-15T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-03-15:test/2012/03/15/passwd/</id><summary type="html">&lt;div id="pec-encrypted-content" style="display:none"&gt;lx/uI+6EbIUm2jj4OTLeVQ==;yTpHEibIimAHteBsBPGdIkpUE9Pan5QK4DYOL4yzkEF6Qpii2htO3tjUJt1AShimGCtlr4IWKjS4BfNNUNJbqTzANm6LZCeLjHbVv/2zX5xzvGuT/0UeocVRIngTZY4fZEUB+A6ikVGX8k9QWo4RARiK0nTA5m4OmukV2rlbk47EmKe+x3hlRrqyZmqFNkGx0IelJj1SMXdd+9NAd0LXn/oJBatNG49VMXc+2MrQOkvMhZyWSCT5JbLqlvcVJuNN5xSHqvLouKK3id8kStprJkEWTFIIYevI/st0rrCd4UowNXJW37wdk1M8kFixEG+lDnZjmX5ws18mUV00BbvU0ARCztiI7NcqEe48iuOFPIVqmMaiyMOBtJG3pv+Z9Tmx6pvsIxn8aklUqjWXXo8SLKcFqco7cKyWgAM/vWzto1cxCQiNU1I4HTKzpBVgGoI3s3l2m0DfibfJTBq68hCLqKeG11QKlTPkydwT1ggJkDN8Uaiuud2Qy+NiPtihhXR6NWtHOKf5sAfd+cRpYB9DTejzHGfiskI4Zf+0ZyDqOOUe5zQvPfKA3VUXDvoUMWFoROqkNyZsu1LxsiMWSCd6bOWp33NHP7HRRMPjiGzTxW001XjSJkjNdpXl/X8vP5//DZ78NH082+vez1xZ0uxkUsI6ng/Egjixbx0NT4vAms8=;^&lt;/div&gt;
&lt;div id="pec-decrypted-content"&gt;
    &lt;h4&gt;&lt;i&gt;&lt;/i&gt;&lt;/h4&gt;
&lt;/div&gt;

&lt;form id="pec-decrypt-form" class="form-inline"&gt;
  &lt;div class="form-group"&gt;
    &lt;label for="pec-content-password" class="control-label"&gt;请输入密码（提示：密码是test）&lt;/label&gt;
    &lt;input type="password" class="form-control" id="pec-content-password" placeholder="Password" /&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;button type="submit" id="pec-decrypt-content" class="btn btn-primary"&gt;解密&lt;/button&gt;
  &lt;/div&gt;
&lt;/form&gt;


    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/cipher-core.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/pad-nopadding.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/md5.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/aes.js"&gt;&lt;/script&gt;


&lt;script type="text/javascript"&gt;
    (function () {
        var strip_padding = function (padded_content, padding_char) {
            /*
             * Strips the padding character from decrypted content.
             */
            for (var i = padded_content.length; i &gt; 0; i--) {
                if (padded_content[i-1] !== padding_char) {
                    return padded_content.slice(0, i);
                }
            }
        };

        var decrypt_content = function (password, iv_b64, ciphertext_b64, padding_char) {
            /*
             * Decrypts the content from the ciphertext bundle.
             */
            var key = CryptoJS.MD5(password),
                iv = CryptoJS.enc.Base64.parse(iv_b64),
                ciphertext = CryptoJS.enc.Base64.parse(ciphertext_b64),
                bundle = {
                    key: key,
                    iv: iv,
                    ciphertext: ciphertext
                };

            var plaintext = CryptoJS.AES.decrypt(bundle, key, {iv: iv, padding: CryptoJS.pad.NoPadding});

            try {
                return strip_padding(plaintext.toString(CryptoJS.enc.Utf8), padding_char);
            }
            catch (err) {
                // encoding failed; wrong password
                return false;
            }
        };

        var init_decryptor = function() {
            var decrypt_btn = document.getElementById('pec-decrypt-content'),
                password_input = document.getElementById('pec-content-password'),
                encrypted_content = document.getElementById('pec-encrypted-content'),
                decrypted_content = document.getElementById('pec-decrypted-content'),
                decrypt_form = document.getElementById('pec-decrypt-form');

            decrypt_btn.addEventListener('click', function () {
                // grab the ciphertext bundle
                var parts = encrypted_content.innerHTML.split(';');

                // decrypt it
                var content = decrypt_content(
                    password_input.value,
                    parts[0],
                    parts[1],
                    parts[2]
                );

                if (content) {
                    // success; display the decrypted content
                    decrypted_content.innerHTML = content;
                    decrypt_form.parentNode.removeChild(decrypt_form);
                    encrypted_content.parentNode.removeChild(encrypted_content);

                    // any post processing on the decrypted content should be done here
                }
                else {
                    // ¯\_(ツ)_/¯
                    password_input.value = '';
                }
            });
        };

        document.addEventListener('DOMContentLoaded', init_decryptor);
    })();
&lt;/script&gt;</summary><category term="test"></category></entry><entry><title>Why Things Go Wrong</title><link href="http://blog.skydark.info/transplant/2012/03/11/why-things-go-wrong/" rel="alternate"></link><published>2012-03-11T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-03-11:transplant/2012/03/11/why-things-go-wrong/</id><summary type="html">&lt;div class="alert alert-warning"&gt;
警告: 这篇文章仍然缺乏部分材料。
&lt;/div&gt;

&lt;div class="alert alert-info js-toggle-next dropdown"&gt;
欢迎指正。
&lt;/div&gt;

&lt;div class="alert alert-success"&gt;
本来还推荐 Orion 君的&lt;a href="http://ori0n.co.de/?post=5"&gt;文章&lt;/a&gt;……呃，但是 O 君的 blog 挂了……
&lt;/div&gt;

&lt;h2 id="_1"&gt;事件提要&lt;/h2&gt;
&lt;p&gt;这篇文章介绍的是 &lt;a rel="tooltip" title="以本文最初写成的时间来看，是“当时”" class="label"&gt;前段时间&lt;/a&gt;
某移植组与汉化组(们)之间的争执事件。&lt;/p&gt;
&lt;p&gt;下面会用H来指代huoyanyan, A组指代H的Android Galgame移植组和&lt;a href="http://bbs.acgfuture.com"&gt;ACGF组&lt;/a&gt;，
C组指代&lt;a href="http://bbs.dmacgn.com/"&gt;冥月汉化组&lt;/a&gt;和&lt;a href="http://bbs.xxxc.at"&gt;下限消除论坛&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;需要强调的是，这里用A组和C组只是为了方便代表双方，
并不表示A组和移植组以及ACGF是完全等同的，
或者C组的观点即是C组所有相关人员的观点，
或者冥月和XXXC关系密切等等。
再次强调，&lt;strong&gt;这里只是为了方便代表双方&lt;/strong&gt;。
在必须要严格指明的场合，会使用原名来进行区分。&lt;/p&gt;
&lt;p&gt;本文希望能尽量还原事件的原貌，因此会采用一些QQ记录作为证据。
其中关于我自己和H的名字不会省略，其余非直接相关组员的名字一般会记作X等。
与主题无关的一些记录可能会去掉，但以不影响上下文理解为优先。&lt;/p&gt;
&lt;p&gt;由于很多材料并不容易找到，而我的记性又很差，
因此对于我不得不采用记忆来举证的部分是存疑的。&lt;/p&gt;
&lt;p&gt;需要强调的是，虽然人的性格并不容易改变，但是人的观点是可能变化的，尤其是信息量在不断增大的过程中。
因此在不确保对方当前观点的情况下，使用其以往观点来攻击可能是不合适的。&lt;/p&gt;
&lt;p&gt;我没有必要假装这是篇客观的文章。
其中肯定会夹杂我的大量主观看法，即便我竭力注意，也难免会有偏见。
因此，&lt;/p&gt;
&lt;div class="alert alert-danger"&gt;
&lt;p&gt;&lt;strong&gt;身份 &amp;amp;&amp;amp; Bias Warning:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我最早是独立移植者。在死吻事件之前加入A组，在去年八月退出A组，现在是不做移植的苦逼在读生。&lt;/li&gt;
&lt;li&gt;我在XXXC注册的日期是7月22日，但之前大约潜水过一个月，至少我第一次看XXXC的时候喷泉版的帖子还没超过两页。在XXXC的第一贴是9月的新人报到，原因是XXXC自那时起要报到后才有发帖权限。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;首先必须说明的是，&lt;strong&gt;&lt;em&gt;在谈到汉化和移植的时候是万万不可讨论“法律”的&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事实上，关于汉化的权益尚有一争(&lt;a href="http://bbs.9gal.com/read.php?tid=317993"&gt;镜子在绯月的帖子&lt;/a&gt;的回复中有很多值得参考的内容)，
而移植在国内真要谈起法来基本是没的跑的。&lt;/p&gt;
&lt;p&gt;这方面国内其实应该向日本方面学习，他们都是提供移植工具让玩家自己动手的，类似于汉化组只提供补丁不提供本体。尽管我仍然不确信这样是否安全。
然而国内这么做的确实极少。&lt;/p&gt;
&lt;p&gt;假如在某条准绳下俩东西都差不多，那么要么是俩东西真的差不多，要么是准绳选择的不大合适。实际上目前状况是后者。&lt;/p&gt;
&lt;p&gt;不经授权的移植，如果放到新番区就是封别人的字幕二压，放到轻小说区就是不授权转载轻小说翻译，放到网盘区就是盗链党了。
无论从哪个角度来看，这样做都不是合情理的。在这种情况下非要和别人讨论法律，实际上和争不过别人就耍流氓性质差不太多——如果有更好的选择，自然没有必要选择法律这条准绳了。&lt;/p&gt;
&lt;p&gt;所以其实关键不在于合法性，而在于合理性。
死吻事件的关键在于C组明确说明&lt;strong&gt;拒绝移植&lt;/strong&gt;，然而A组仍然移植&lt;strong&gt;并公开&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;但问题其实就在这里。&lt;strong&gt;&lt;em&gt;A组并不认为自己公开了，而C组不以为然&lt;/em&gt;&lt;/strong&gt;。
争执都是从这里开始的。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="a"&gt;A组情况概述&lt;/h2&gt;
&lt;p&gt;我加入A组是在2011年3月，在那之前有公开的移植作品。
当时是因为A组有人移植了初音的一款同人游戏，我发现了一些bug就发了邮件，然后被H邀请加入。&lt;/p&gt;
&lt;p&gt;我注意到A组其实更早些，毕竟当时很多人用的是A组中natdon君修改的支持GBK的ONS.
我在被邀请之前之所以没有主动要求加入，一方面是从 H 发布的文章中感到他过于有表现欲，另一方面只是我看到进组的三个条件略发怵，单纯因为我很懒很随意，而这听起来(时间规定上)太正式，虽然进去后发现完全不是那么回事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、尊重开源精神，重视版权意识，任何公开发布的作品，必须取得相对应的授权。同时尊重组内组外一切作品！&lt;br /&gt;
2、每周六晚9点到10点为研讨时间，请尽可能参与研讨中，分享你所懂得知识，并虚心聆听别人的经验。记住，只有分享才有进步。&lt;br /&gt;
3、任何申请进群者，必须为了解Galgame人群，并确认已经掌握最基本的ONS常识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;移植组的成员很复杂。我认为这是后面事件的一个主要原因。
即使加上了上面的几个要求，组内真正干活的人还是远没有打酱油的人多。
每次周六的讨论，实际上讨论移植的并不多。全组几十号人，移植者并不占多数。
据说现在组内也差不多如此，H在对C组宣战时宣称的百名开发者，实际上当然是算上酱油人数的。&lt;/p&gt;
&lt;h3 id="h"&gt;H的情况&lt;/h3&gt;
&lt;p&gt;谈论这次事件，不得不谈的核心人物是H.
不得不说，他的性格和办事风格确实使得整个事件变得复杂化了。&lt;/p&gt;
&lt;p&gt;H的特点是热情，按他自己的昵称就是QB,
我个人认为这个昵称取的非常合适。
但是这种热情实际上并不总是招人待见，尤其是对那些喜欢清净的人来说，有时会被当作是一种骚扰。&lt;/p&gt;
&lt;p&gt;H对内也比较宽容随意，否则现在A组内也不会有那么多人的支持。
但这也就导致组内对外声音很嘈杂，大家都觉得可以随便说；
更考虑到组内有一定数量的非成年人(不是指生理年龄)，这就很容易导致&lt;a href="http://tieba.baidu.com/p/1402782032"&gt;说错话的情况发生&lt;/a&gt;。
实际上我一直觉得攻击力最强的往往是队友……&lt;/p&gt;
&lt;p&gt;H的对外我就不提了，这次的事件本身就在于双方的误解，但我认为H并没有曾使得误解朝好的方向发展过，尽管这的确不是他单方面可以做好的。&lt;/p&gt;
&lt;p&gt;另外，H的话从有些意义上讲并不那么靠谱，有时的话会夸大，有时很有表现欲，总的来说言行一致性较差。
比如说他说“正在联络”的事情其实很难说是不是真的在联络。H还有一次某个晚上突然说要建立英化组并且二话不说就发了博文招人，结果在我指出老外战斗力比咱强多了之后当晚就取消了(所以估计没多少人知道这事情)。&lt;/p&gt;
&lt;p&gt;H对外发布公告时喜欢带着一堆头衔说话，我个人更愿意猜测这是在壮胆，但很显然这又是一个非常不受外人待见的属性。
事实上，C组很多人以此认定H创建A组是以出名为目的的。&lt;/p&gt;
&lt;p&gt;总的来说，这些都不是招技术宅喜爱的属性。
因此很多人并不喜欢他。在我离开后，有移植者问我“你似乎很信任H？”，我的回复是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;信任H？怎么说呢，你知道，我选择退出了ACGF的，尽管我在关注。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对我私人而言，我对H最大的意见莫过于我在组里的时候，有人问Fate移植版的问题，H总是回答该游戏不是移植组作品不负责云云……就算这是我没进组时的作品，顺便叫我一下不好么……&lt;/p&gt;
&lt;p&gt;当然，因为我从来没有直接向H抱怨过此事，因此这是我的错误。这只是我的私人问题。
H本身对我很关切，像上面说的那样，H对内是很宽容的。&lt;/p&gt;
&lt;p&gt;总的来说，对H个人的评价各方面褒贬不一。
我个人觉得XXXC上的&lt;a href="http://bbs.xxxc.at/thread-3312-1-1.html"&gt;这个帖子&lt;/a&gt;的评价很到位。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于你，我还是有一些好感的，但是你的一些做法真的需要改改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2 id="_2"&gt;缘起，怨起&lt;/h2&gt;
&lt;p&gt;前面废话说了很多，现在说明下A组和C组到底是怎么结下梁子的。&lt;/p&gt;
&lt;h3 id="_3"&gt;最初的祸根&lt;/h3&gt;
&lt;p&gt;最初的祸根是内幕，我的意思是说，它并没有直接导致A组和C组的争执，但它才是祸根。&lt;/p&gt;
&lt;p&gt;缘起自2011年4月，zcdyz君想要移植死吻，H向C组请求授权失败。
这个时候，H选择建立临时讨论组进行讨论。下面的奋斗是H.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2011-4-11 22:00:26 奋斗&lt;br /&gt;
我简单说说情况，昨天组内的一名成员向我提起&lt;br /&gt;
说已经研究出了死神之吻乃离别之味的移植ONS方法&lt;br /&gt;
于是这位组员希望我能帮他拿到死神之吻的授权移植&lt;br /&gt;
我昨晚接触到了那个汉化组，并且跟他们组谈了2个小时左右，但最终还是失败了&lt;br /&gt;
&lt;span class="label label-info"&gt;(与 星野 夢美 的聊天记录，略)&lt;/span&gt;&lt;br /&gt;
这里是所有的对话过程，大家请看&lt;br /&gt;
2011-4-11 22:05:10 X&lt;br /&gt;
真不知他们是怎么想的&lt;br /&gt;
2011-4-11 22:05:19 Y&lt;br /&gt;
移植不是也能增加他们汉化组的名气？真是不能理解&lt;br /&gt;
2011-4-11 22:05:01 Skydark&lt;br /&gt;
（翻译比较担心自己的汉化成果？）&lt;br /&gt;
2011-4-11 22:06:00 Z&lt;br /&gt;
...貌似商量的时候没有给他说“移植的时候不会改变原有的汉化成员名单”之类的事情啊&lt;br /&gt;
2011-4-11 22:06:25 奋斗&lt;br /&gt;
已经说明了即使不出现研究组也没关系，也就是只以他们汉化组的名义发布，也不行&lt;br /&gt;
2011-4-11 22:06:26 Skydark&lt;br /&gt;
(在澄空见过有翻译担心被盗用然后监督出来求加密的……)&lt;br /&gt;
2011-4-11 22:08:41 奋斗&lt;br /&gt;
然后就是询问各位的意见，因为这个引擎我们大家都没弄过，我实在不想放弃这个机会，因此我想各位能否一同研究一下&lt;br /&gt;
2011-4-11 22:09:28 奋斗&lt;br /&gt;
本来我想说，内部搞，不发布也好，但是想想其实可能性不大，资源总有流出去的时候，所以我宁可跟大家坦白点说，如果移植的话，大家怎么看？&lt;br /&gt;
&lt;span class="label label-info"&gt;(与 zcdyz 的聊天记录，略)&lt;/span&gt;&lt;br /&gt;
2011-4-11 22:10:10 Skydark&lt;br /&gt;
（如果已有成品，比如日文版的，倒是可以给他们看一下截图，然后重申下对他们汉化成果的尊重，以及纯粹推广用意？）&lt;br /&gt;
2011-4-11 22:12:45 奋斗&lt;br /&gt;
我个人认为，从剧本上来说，我个人评分不会超过80，但是从引擎上来说，了解多一个引擎，不会是坏事&lt;br /&gt;
……&lt;br /&gt;
2011-4-11 22:17:33 奋斗&lt;br /&gt;
是的，我也认为可以内部研究&lt;br /&gt;
但是，如果研究成果出来了，我们大家应该都不可能保证这个东西会不会流出去&lt;br /&gt;
2011-4-11 22:17:14 Skydark&lt;br /&gt;
（我刚学NS的时候试手用的是鸑鷟橘子传，也是没敢发……）&lt;br /&gt;
2011-4-11 22:18:07 Z&lt;br /&gt;
资源流出是不可抗的因素造成的....&lt;br /&gt;
2011-4-11 22:18:09 奋斗&lt;br /&gt;
应该说，根据动漫界的规律，这个似乎是必然的&lt;br /&gt;
与其流出去之后，我们被人责问&lt;br /&gt;
还不如我们考虑一个更好的方案&lt;br /&gt;
……&lt;br /&gt;
2011-4-11 22:20:13 奋斗&lt;br /&gt;
我提供几个方案给大家看看：&lt;br /&gt;
1、寻找第三方发布&lt;br /&gt;
2、成品完成以后，我们直接交给汉化组，由他们决定发布与否，这样万一流出，我们也可以推到汉化组身上&lt;br /&gt;
2011-4-11 22:20:31 X&lt;br /&gt;
做汉化的人自己有授权吗？&lt;br /&gt;
2011-4-11 22:20:36 奋斗&lt;br /&gt;
当然没有获得日本的授权&lt;br /&gt;
问题是我们使用了日文文本&lt;br /&gt;
2011-4-11 22:20:53 Z&lt;br /&gt;
但是汉化文本已经属于他们的东西了&lt;br /&gt;
2011-4-11 22:21:08 奋斗&lt;br /&gt;
3、把日语版移植先做出来，然后让群众逼汉化组放文本&lt;br /&gt;
2011-4-11 22:21:25 X&lt;br /&gt;
这个可行&lt;br /&gt;
2011-4-11 22:21:37 Z&lt;br /&gt;
+1&lt;br /&gt;
2011-4-11 22:21:44 奋斗&lt;br /&gt;
我是想尽可能避免与汉化组产生冲突&lt;br /&gt;
2011-4-11 22:21:03 Skydark&lt;br /&gt;
（移植出日语版也稍有点……怎么说呢，还是有冲突的意思）&lt;br /&gt;
（日本那边移植fate的时候为了规避正版，都是要求在原游戏基础上自行拆包然后用脚本生成器生成的，仙剑SDL版则是只提供程序不提供数据包的方式，不过老实说，真用这类做法，和汉化组结下梁子是肯定的了，最好不要这么做……）&lt;br /&gt;
2011-4-11 22:21:58 奋斗&lt;br /&gt;
3个方案，大家投个票吧，可以弃权&lt;br /&gt;
2011-4-11 22:22:09 X&lt;br /&gt;
这貌似也没什么冲突吧&lt;br /&gt;
2011-4-11 22:22:20 奋斗&lt;br /&gt;
1、寻找第三方发布&lt;br /&gt;
2、成品完成以后，我们直接交给汉化组，由他们决定发布与否，这样万一流出，我们也可以推到汉化组身上&lt;br /&gt;
3、把日语版移植先做出来，然后让群众逼汉化组放文本&lt;br /&gt;
2011-4-11 22:22:42 Y&lt;br /&gt;
群众会去逼汉化组吗？&lt;br /&gt;
……
2011-4-11 22:22:46 奋斗&lt;br /&gt;
放心，群众不一定要逼，那时是我去逼&lt;br /&gt;
……&lt;br /&gt;
2011-4-11 22:22:59 奋斗&lt;br /&gt;
我会代表群众再去谈判&lt;br /&gt;
……&lt;br /&gt;
2011-4-11 22:22:40 Skydark&lt;br /&gt;
（弃权票，但是我支持纯研究向作业，尽管基本还是围观用意就是了XD）&lt;br /&gt;
……&lt;br /&gt;
2011-4-11 22:24:30 X&lt;br /&gt;
如果，真的发布了日文版&lt;br /&gt;
玩家都会玩吗？&lt;br /&gt;
2011-4-11 22:24:49 奋斗&lt;br /&gt;
我会把PC中文版的地址也放在发布贴上&lt;br /&gt;
……&lt;br /&gt;
2011-4-11 22:25:10 奋斗&lt;br /&gt;
这样就能迫使看到的人知道有中文版&lt;br /&gt;
……&lt;br /&gt;
2011-4-11 22:25:27 奋斗&lt;br /&gt;
如此，肯定有人会跟帖问，为什么不作出中文版&lt;br /&gt;
……&lt;br /&gt;
2011-4-11 22:26:33 奋斗&lt;br /&gt;
那就决定下来了，先做出日语版，再考虑之后的事情，这样也好，这样就能在群内公开这个研究计划&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从这段记录中可以看到H的矛盾之处。一方面以研究为优先，一方面又有极强的表现欲(我想这样解释应该是合适的)，不惜与汉化组结梁子来发布作品。
单从这个角度来说，H的表现非常吻合C组对其所认定的形象。&lt;/p&gt;
&lt;p&gt;但这是段内部讨论的记录，其讨论结果是“先做出日语版，再考虑之后的事情”。
从后面的表现来看，H并没有去按照这里的提议去做。
这件事件的关键意义在于在组员心中埋下了“要么悄悄公开吧”的选项。
这对于组员观点差距明显的A组而言是很危险的——实际上，当时选择最多的是3.&lt;/p&gt;
&lt;p&gt;另外这段讨论里也提到了各个组员对授权问题的不同看法。
有很看重授权的，也有觉得在日版游戏面前根本谈不上授权只是面子问题的。
这里不需要争执对错(我个人的观点之前已经表述过)，关键在于&lt;em&gt;组内有相差很大的观点，并且一直没有形成统一意见&lt;/em&gt;。
就我个人观察，移植者大多持前种观点，分流组及其他人员一般持后者观点，而前者人数显然不占优势。
至于后来的ACGF组的成分就更加复杂——移植者的增长速度永远不可能比群本身的速度快，更何况ACGF组不仅是移植组，有时各组内人员彼此都不熟悉。
所以这种意见分歧直接导致了事件发生需要对外解释的时候，队友成为了最大的妨碍。&lt;/p&gt;
&lt;p&gt;直到这时，A组和C组其实一直相安无事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;另附：熟悉我的人知道，依我的性格，我的弃权和反对票差不多。实际上三个选项没有一个能选的——第二个的问题主要在后半段话上。这三个选项指向性太强。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_4"&gt;第一次摩擦：结怨&lt;/h3&gt;
&lt;p&gt;很多时候梁子都是不经意间因为某个小事情结下的，这次也不例外。
说实在的，A组和C组的梁子其实是一场误会引起的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2011-6-11 18:35:49 某H&lt;br /&gt;
全体android galgame研究组成员注意&lt;br /&gt;
2011-6-11 18:36:14 某H&lt;br /&gt;
我想知道&lt;br /&gt;
2011-6-11 18:36:30 某H&lt;br /&gt;
http://bbs.9gal.com/read.php?tid=263604&lt;br /&gt;
2011-6-11 18:36:33 某H&lt;br /&gt;
这个是谁做的！&lt;br /&gt;
2011-6-11 18:36:37 某H&lt;br /&gt;
不是研究组对吧？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个苍雪(绯月)的帖子已经被删除了。遗憾的是现在我也找不到截图了。
&lt;span class="label label-important"&gt;这里需要更多证据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果我的记性没犯错的话，这个帖子及其引发的误解的产生可以简单概括为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;H以前(4月)曾经向冥月汉化组组长镜子请求过移植授权，被拒绝了；&lt;/li&gt;
&lt;li&gt;时隔数月，一个PSP移植者再次向镜子请求授权，两天发了5条PM，引发了镜子的不满；&lt;/li&gt;
&lt;li&gt;镜子在绯月发帖抱怨，语气不佳——不然就不叫抱怨了，虽然从自己的角度看有时可能会认为在调侃；&lt;/li&gt;
&lt;li&gt;抱怨贴中误以为那个PSP移植者是从A组中出来的，因此矛头也指向了A组。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;显然平白无故挨了一箭谁都会不爽，H选择了抗议，并PM给了镜子。
原短信内容在XXXC月刊第二期P28可以找到。&lt;/p&gt;
&lt;p&gt;不幸的是，如上所说，H的风格有时很容易招人反感。
我们组员当时自然不知道H的短信内容，但现在来看，H的话的确不招人待见——还是这么说，H说话喜欢带上一堆称谓，对其他人来看这就是试图用身份压人的表现，更何况那身份别人还不怎么在乎。&lt;/p&gt;
&lt;p&gt;镜子随后更改了帖子，并发了道歉贴。
因为对H的风格不以为然，道歉贴也的确很没诚意。
从聊天记录来看，当时修改的帖子的内容估计是“发短信的移植者&lt;em&gt;不一定&lt;/em&gt;是A组成员”这种类型的。
&lt;span class="label label-important"&gt;这里需要更多证据&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2011-6-11 18:48:15 某H&lt;br /&gt;
我已经写了抗议的短信PM他了&lt;br /&gt;
2011-6-11 18:57:26 X&lt;br /&gt;
改成这样 就有点过分了&lt;br /&gt;
2011-6-11 18:59:07 Skydark&lt;br /&gt;
（个人感觉，这只是说明还是没有对H放下防备而已。从回复看，他对H态度还是挺好的。当然也可能是H解释的时候愤怒的感情比较重，没有突出毫无关联这点来。当然，我希望确实是毫无关联）&lt;br /&gt;
2011-6-11 18:59:28 X&lt;br /&gt;
删掉就删掉&lt;br /&gt;
用什么 不一定&lt;br /&gt;
这神马态度&lt;br /&gt;
2011-6-11 19:00:56 某H&lt;br /&gt;
TMD，我第一次那么来气！&lt;br /&gt;
2011-6-11 19:01:12 Skydark&lt;br /&gt;
（因为上次H也是比较积极，所以印象分降下来罢了。很多人是不喜欢被别人打扰的，我也是。）&lt;br /&gt;
（然后这次这人更积极，一旦误会双重叠加非常麻烦，现在重点是解释清楚确实无关）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随后H公开发表了一篇回复。
聊天记录里保存了草稿，实际发出的内容有出入——
至少从之后的聊天记录可以看到，还有一段以“这不是威胁”打头的文字。
如果我的记忆无误，那段文字的大意是“如果再这样下去，移植这类的事情就没人愿意做了”。
&lt;span class="label label-important"&gt;这里需要更多证据&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2011-6-11 19:43:23 某H(707168973)&lt;br /&gt;
可能自古以来，移植界和汉化界的交集都不算多，虽然同为GALGAME做事，但是却没什么往来。&lt;br /&gt;
可能自古以来，移植界就不太出名，因为汉化组的朋友必定更加辛苦。移植也不过是“搬运”到另一个平台罢了。&lt;br /&gt;
是啊，我想无论问哪边，都有不同的答案。那么就让我这个同时创立了android galgame研究组和风铃汉化组的人来说说吧。&lt;br /&gt;
我在网络上使用的ID只有两种：huoyanyan、okhuoyanyan（后者只有在前者无法注册的情况下，才使用），所有对别的组织的联系工作，全部是我一个人联系的，使用的ID也只有这个。&lt;br /&gt;
最近研究组遭受到的质疑在不断增加，可能是因为作为组长的我坚持保证每个汉化游戏都必须取得授权，因此研究组向各个汉化组取得了联系，并一一索取移植的授权。当然途中会有一些小冲突，但是研究组都尽可能地低姿态去承受。这点，可能引起了某些巨巨的不满吧？但是也请理解研究组的工作，那也是为了尊重每个组织所做的努力。&lt;br /&gt;
这里，我解释一下为何会这样锲而不舍地，或者是某些巨巨口中所说，”热情过度“地进行要授权。&lt;br /&gt;
1、研究组是一个研究环境，作为组长的我，希望尽可能营造一个可以专心研究移植的地方，因此一些外围的东西，一般都是由我和副组长两位共同提供和营造的。&lt;br /&gt;
2、我，也就是Huoyanyan，主要负责对外，包括承受外界的压力，对外言论的发表，以及跟其他组织接触。&lt;br /&gt;
3、副组长，Backchaos，主要负责对内，维护组内稳定，解决组内矛盾，提供必要的工具，并在必要的时候协助我的工作。&lt;br /&gt;
别问我为什么有这样的热情，除非你们一辈子不想玩到汉化或者移植。汉化和移植我认为，在本质上都是一种对GAL的爱才出现的产物。质疑移植，也就是在质疑汉化。因为在本质上那是一样的存在。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当时组员的反应：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2011-6-11 19:53:42 Skydark&lt;br /&gt;
（这事真和你没关系，是另一个人赶的不凑巧，然后这位也比较多疑罢了）&lt;br /&gt;
2011-6-11 19:53:49 某H&lt;br /&gt;
。。。我想说的是。。。我看了那么久。。。我觉得那个PM的人真的很有礼貌啊……&lt;br /&gt;
2011-6-11 19:53:58 X&lt;br /&gt;
SKY大大 你还是认为这只是一个巧合？&lt;br /&gt;
2011-6-11 19:53:59 某H&lt;br /&gt;
都是您啊，大大啊，请之类的……&lt;br /&gt;
TMD，这算什么啊……&lt;br /&gt;
2011-6-11 19:54:15 X&lt;br /&gt;
或者说您想把它弄成一个巧合？&lt;br /&gt;
看到“不一定”那三个字 我就蛋疼了&lt;br /&gt;
这明摆就是找抽&lt;br /&gt;
2011-6-11 19:54:47 Skydark&lt;br /&gt;
（要是有人在非交互状态下两天给我发5条，我心情也不爽，只不过我不是那种不爽就要发帖解气那种人罢了）&lt;br /&gt;
（这种帖子见太多了，更何况我又不是没当过被告当事人，无非是一时嘴快，最后还是得再找台阶下来）&lt;br /&gt;
2011-6-11 19:56:33 X&lt;br /&gt;
[图片]难道找您要授权 您不觉得是在给您长脸 倍有面子么&lt;br /&gt;
有什么好不爽的？&lt;br /&gt;
2011-6-11 19:58:43 Skydark&lt;br /&gt;
（不是所有人都喜欢被别人找的，比如demonophobia吧就不喜欢被宣传。当然和这次事件无关。假如大家都是开放的心态，很多事都好办，但是现实不是如此。）&lt;br /&gt;
2011-6-11 20:00:47 Skydark&lt;br /&gt;
（1.我还是比较像吐槽“自古以来”……&lt;br /&gt;
2.我觉得“这不是威胁”这段……好吧，你看那人的帖子的感受，也许就是那人看你帖子的感受……）&lt;br /&gt;
2011-6-11 20:45:55 某H&lt;br /&gt;
一开始要求授权，是为了尊重汉化的劳动&lt;br /&gt;
2011-6-11 20:46:05 X&lt;br /&gt;
授权什么的 都是给他面子&lt;br /&gt;
面子都是互相给的嘛&lt;br /&gt;
2011-6-11 20:46:18 某H&lt;br /&gt;
我们尊重他们&lt;br /&gt;
他们却给我晒下限&lt;br /&gt;
2011-6-11 20:46:30 X&lt;br /&gt;
他们也要尊重我们啊  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顺提这里的X是位性格很直率的组员。
之前提到过，他的态度也代表了组里部分人的一种态度。
而对于现在的ACGF，这“部分人”可能已经占了多数。&lt;/p&gt;
&lt;p&gt;不幸的是，H的这次回复似乎并没有解释清楚什么。或者说，并没有产生解释清楚的效果。
在我的记忆中，这次回复后有C组成员认为这篇回复过于官腔(同感，“自古以来”和“代表”是很容易吸引吐槽的)，
或者用另一种更直白说法就是显得“自大”或“装X”。
所以实际上从这次事件后，C组就将H视为了类似大湿或收编帝等的存在，并经常性地进行调侃，有些称作调侃也许并不合适，在H此次宣战的材料中有所收集(注意不要扩大时间范围)，有些的确是极不恰当的人身攻击，但是因为已将H定性为“装X”，因此C组对此类言论普遍给予容忍，这是不恰当的。
在XXXC论坛上以HYY为关键字在相应时间段的帖子中可以找到。&lt;/p&gt;
&lt;p&gt;总的来说，以我个人的观点来看，那次的摩擦是一次误解，双方都有问题。
原本并不是什么大事件，但由于双方性格极度不合拍，导致彼此间留下了很不好的印象，这就埋下了祸根。&lt;/p&gt;
&lt;h3 id="_5"&gt;第二次摩擦：冲突&lt;/h3&gt;
&lt;p&gt;如上所说，XXXC对H一直是用一种娱乐的态度来面对。
一方将对方当笑话，另一方将对方当下限。
这虽然不是很愉快的事情，但终归也没有形成正面冲突。
真正使双方扯下面皮的是在七月末的时候。
祸因正是四月就埋下的死吻移植。&lt;/p&gt;
&lt;p&gt;我能找到的最早的死吻移植发布信息在这里：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2011-6-12 13:23:33 zcdyz&lt;br /&gt;
死神の接吻は別離の味(死神之吻乃离别之味) 内测低调发布。。。&lt;br /&gt;
http://zhang3693699.blog.163.com/blog/static/29856020201151203941796/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常巧的(指并非预谋的)，就内测发布在那次摩擦事件的第二天。
当然在这个时间点之前群内也有各种版本的交流，这里的“最早”指暴露在群外。
这个发布文现在已经被删除。&lt;/p&gt;
&lt;p&gt;这篇博文发表在很少被注意到的私人博客上，并且脚本设定了密码。
密码在我所了解的范围内，的确没有泄露出去。&lt;/p&gt;
&lt;p&gt;作出发布在私人博客上这个决策，我想和之前临时讨论组中的讨论有关。
但无论如何，在这个时间点，以整个组为单位，A组没有试图进行扩散。
强调“以整个组为单位”是因为之前提到过的原因——H无法保证所有组员意见一致。
但这里重点在于，A组的确没有扩散或如之前讨论般要挟的意图。
事实上的确有偶然发现那里并要求密码的人，但是在我的记忆中，H是断然拒绝了的。
&lt;span class="label label-info"&gt;这里需要更多证据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在今年2月ACGFuture的一个帖子里，移植者zcdyz君(他应该正在高三)在&lt;a href="http://bbs.acgfuture.com/forum.php?mod=viewthread&amp;amp;tid=21807&amp;amp;extra=page%3D3&amp;amp;page=5"&gt;回复&lt;/a&gt;中提到了他对这个事件，以及移植本身的看法:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;……作为"死吻"的始作俑者(那是我在博客草率透露引起的。。。虽然我没有散发，但的确造成了不好的影响)，我看到“汉化”与“移植”矛盾只有痛心和无奈，我不知道为什么……&lt;br /&gt;
……但我仍然没有改变最初的目的我移植是为了自己玩，有他人移植皆大欢喜，没人移植自己动手 = =！&lt;br /&gt;
但同时我也想让更多的人接触到这些游戏(或许有种布道者的心情吧)，我会去要授权，有授权就发布给更多的人享用，没授权就当我自娱自乐 - -!……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外强调，请注意区分移植者和移植组。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;不幸的是，C组最终发现了这个发布贴。
于是在澄空等论坛出现了标题为
“&lt;a href="http://bbs.sumisora.org/read.php?tid=11005230"&gt;无断移植，难道所有的汉化作品非得For Android&lt;/a&gt;”等的帖子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;……今年开始，某个Android移植组打着传道的旗号，开始大肆移植以汉化的作品到其他平台。不管授权与否，都大肆移植，同时触手伸向其他各个领域……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个说法是有夸大之嫌的。
事实上，在我印象中，当时公开发表的移植作品，
除了221留下的东西之外，由组员自己负责的，应是均获得授权了的。
&lt;span class="label label-info"&gt;这里需要更多证据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但无论如何，在对方明确拒绝过的前提下，即便是发布在私人博客并加密码，这仍然让人觉得有挑衅的意味。
上面曾经说过，放出移植在博客上这个决定可能原先还真的是有挑衅意味的。
然而在真的放出后，似乎也没有人真的想去这么做了。
正如之前强调过的一样，我认为人的性格虽难以改变，但观点确实是可能变化的。
尽管这里可能并非是观点的变化，但是没有放出和扩散真正可用的版本应是事实。
&lt;span class="label label-info"&gt;这里需要更多证据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;无论如何，在对方明确拒绝过的前提下作出这样的选择，有口难辨其实并不奇怪。
H的解释也并不让人满意，其言论似乎并没有搞明白对方是如何看待自己的，反而让人认为“HYY=很优越”。&lt;/p&gt;
&lt;p&gt;而在这时，又有A组支持者(或“中立者”)冒出来谈法律。如上所提，这种观点在这种场合实际上是忌讳。
最终后果自然不欢而散，双方互相认定对方为下限。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;附带这里要解释一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有些A组组员并不在澄空，因此产生了大量疑似马甲的临时注册ID出现。但实际上它们不是马甲，因为根本没有对应的主号。然而造成的效果显然是使得C组及支持者认为A组没人敢正面应对。&lt;/li&gt;
&lt;li&gt;在&lt;a href="http://bbs.sumisora.org/read.php?tid=11005230"&gt;澄空的帖子&lt;/a&gt;，轩辕大在58楼发帖说：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;……他们是先做好了以后，再问同意不同意授权......也就是说他们已经先硬来了，管你同意不同意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，从之前提到的资料来看，询问授权的时候移植并没有做好。&lt;br /&gt;
   另外，以我个人的观点来看，在确保能做之后再去申请授权更靠谱一些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="acgf"&gt;ACGF计划&lt;/h3&gt;
&lt;p&gt;自双方互相视为下限后，基本就变成了两边平行各做各的的状态。&lt;/p&gt;
&lt;p&gt;其间发生了H的Blog被举报。H在举证贴中认为是C组成员所为，我认为证据不足。
事实上，那些帖子只能说明C组成员在见到H的Blog被封后很开心，但无法说明C组有人参与。
XXXC&lt;a href="http://bbs.xxxc.at/thread-3312-3-1.html"&gt;这个帖子&lt;/a&gt;的42楼拓海大表示此事正在进行调查。&lt;/p&gt;
&lt;p&gt;然后H提出了ACGF计划。我是在去年8月退出A组的，刚好在提出计划后不久。
理由上，一方面打算安心学术(很不幸的，我不知道该用怎样的表情面对)，
一方面H也的确没有令我信服的留下我的理由，而让我离开的理由却随手都是。&lt;/p&gt;
&lt;p&gt;H一开始提出ACGF计划时其实我是认可的。H&lt;a href="http://wenku.baidu.com/view/4ffbc40ebb68a98271fefa09.html"&gt;一开始所透露的想法&lt;/a&gt;是希望将重心逐渐扭转到对&lt;strong&gt;国产GAL&lt;/strong&gt;的支持上，那移植组和声优组显然都可以为国产GAL的制作提供支持。
这是一条合法且有益的商业途径——虽然目前实际能看到的最大成果是实现了一个不合法内容的论坛(非贬义，含18X的GAL论坛大家都懂的)。&lt;/p&gt;
&lt;p&gt;H当时在大张旗鼓的整合ACGF，谈的理想的确很诱人(尽管“你知道，我选择退出了ACGF的”)。
只可惜，A组向ACGF发展的过程中有很多问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;假如这个想法是由一个同人界著名大腕(或著名公车)领衔的话，无论如何都是好事。只可惜H不是那么一个领衔人物。与C组关系搞僵就注定这件事情很难搞清楚。H在认定C组为下限后就不再试图解释，这实际上令情况变得更糟，因为汉化组已经普遍接受A组的行为是下限的这种看法。这段时间里，汉化组发布汉化补丁时标注“谢绝移植”的越来越多。后来也有移植者选择自行联系解决问题的，他们甚至特别强调以个人名义发布，并拒绝再度演绎。XXXC的杂志其实说的很对:大家并不拒绝移植，只是拒绝A组。当然，在这些事件之后，大家对移植的态度也越来越保守，尽管仍然有合作的案例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;研究组转型缓慢。&lt;/p&gt;
&lt;p&gt;我离开A组最后做的事情就是雪之本境和雾之本境(DEMO版)的移植，
因为H说过SP-time联系过他寻求合作，这次合作实际上是H执行ACGF计划的契机。
我将脚本遗留给了H，并且说明需要时会提供支持。
(当然，我离开时提醒过，ONS商业化是有难度的，虽然日本似乎已有实例，开发自己的引擎才是当务之急——呃，当时是有PGM这个希望的)&lt;/p&gt;
&lt;p&gt;后来我看到雾本贴吧里开始了移植。
我发帖试探H这边的合作情况，被SP-time断然否决，但我问H时H对我说仍然在和SP-time谈——此时其实已经谈了数个月了，H直接跟我说合作失败并不会让我觉得太沮丧，但是我认为他仍然在尝试无意义地敷衍我。
最终我在XXXC看到雾本的广告，私下里觉得事情基本上是吹了。&lt;/p&gt;
&lt;p&gt;抛开雾本一事不谈，ACGF之后与国产游戏联合的事情我还记得叙事曲和星月夜，但是似乎并无研究组参与。有消息说星月夜可能是ACGF直属，而叙事曲也与ACGF有特殊内在关系，但这其实更加说明没有单独的制作组愿与ACGF联合这个现状。&lt;/p&gt;
&lt;p&gt;无论怎样，大家能看到的研究组之后的进展几乎都在移植日本GAL上，并且很大一部分还是18X.此次汉化组联名反对的一个重要理由，就是ACGF在商业化的同时还有18X移植的组织存在。简单地说，如果将二者&lt;strong&gt;完全&lt;/strong&gt;分离，汉化组在这方面的顾虑就不会太多。&lt;/p&gt;
&lt;p&gt;但我注意到很多组员根本不清楚汉化组担心的是什么，很多组员根本不明白“完全分离”是什么。&lt;strong&gt;简单地说，如果我是汉化组，我看到你们的说辞，我也会选择明哲保身。&lt;/strong&gt;实际上我现在都有这种想法了。也就是说，你们连自以为知道你们最初的理想的我都说服不了。我觉得我之前太天真，你们现在已经做不到&lt;strong&gt;完全&lt;/strong&gt;分离了。而且可能你们也并不打算分离了。&lt;/p&gt;
&lt;p&gt;&lt;div class="hidden"&gt;
更何况，我还知道你们的论坛里一开始就有一个我竭力反对建立的里区存在。你们当时的这个决定对我退出起到了很好的推进作用。
&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在自身发展上，ACGF不容易留住人。&lt;/p&gt;
&lt;p&gt;实际上，H一开始所希望的是将ACGF建立成一个综合门户。
然而直到现在为止，也只是成立了一个论坛。
H希望ACGF向多元化发展，然而实际上，就算ACGF一直说明自己不是移植站，但是去的群众基本还都是冲着移植去的。
像我之前所说的那样，甚至讨论被移植的游戏剧情的人都不多。移植贴也都被加了权限，移植者冰枫也发表过很大的意见。毕竟，大多数移植者是希望更多人玩到才移植的。虽然理解论坛需要发展，但是创建更多的内容去留人比权限留人要有价值的多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;H的对外宣传策略。&lt;/p&gt;
&lt;p&gt;当然，我以最大的善意希望真的&lt;strong&gt;只是宣传策略的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;H一直以来并不重视对外强调ACGF的计划核心在原创上，反而强调商业化的更多一些。
这也难怪，因为事实上，ACGF移植的成品远超过原创的作品。&lt;/p&gt;
&lt;p&gt;现在ACGF旗下的两大主力移植组汉化组目前实际上都是不适宜商业化的部分，却与其他部门混杂在一起。
在外人眼中，他们只能看到ACGF是一个在搞移植和汉化的商业化组织，自然会以为ACGF是一个正在或者试图以移植和汉化盈利的组织。
在国内的大环境下，谈及ACG的商业化总给人危险的气息，因为很有可能会害死整个圈子。
在不明确解释清楚的前提下，这等于是顺手拉了一堆仇恨——更何况，实际上他们现在的确在拉着一个谈论18X的坛子意图搞商业化。
所以若是试图以非法的日本GAL移植来吸引人为商业化奠基的话，那是犯了中文GAL界的大忌。
就算真的要转向原创，和目前正在做的18X部分哪怕有一点点关联也是同样危险的。
这在已经宣传商业化的情况下，等于要推到重来。
简单地说，在你们的原创品牌还没打响(至少还没移植般出名，虽然是各种意义上)时就提商业化，未免&lt;strong&gt;操之过急&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;赢利点应该在更踏实的基础上，在成熟之后考虑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;div class="js-toggle-next alert alert-danger dropdown"&gt;
H是否真的是不打算以移植盈利？
&lt;/div&gt;
&lt;div markdown="1" class="alert alert-success"&gt;
我们可以注意到，一些移植者已经开始特意在发布页面上注明不得以各种方式盈利了。
&lt;span class="label label-danger"&gt;这部分请&lt;em&gt;参考&lt;/em&gt;H的留言中的第9条&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以前也有移植者询问我，“允许他拿着你的东西赚钱？”。当时我的回答是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;允许。前提是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把相关版权问题解决好;&lt;/li&gt;
&lt;li&gt;“凭借广告等方式间接获利”，也就是说不因赢利而阻碍传播，毕竟我移植是为了与更多人分享快乐，如果能因此让更多人玩到我没意见。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不幸的是，虽然H有一定的脉络，但第一个还是难度过大了点。&lt;/p&gt;
&lt;p&gt;当然，如果真能弄好第一个，我这边不会设立什么其他阻碍。我的移植目的已经说过了，所以无所谓钱的问题。我目前经济上暂时没有压力，清净点反而是好事。&lt;/p&gt;
&lt;p&gt;你对这个比较有意见？我一直觉得，ACGF应该多思考与国内制作者合作及打好关系(汉化事件处理的很糟，in my opinion)，而不是抱着那些老的版权问题难以解决的东西复刻下去。赢利点应该在更踏实的基础上，在成熟之后考虑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;呃，我坦白，这段话和“不允许他拿着我的东西赚钱”虽然性质上有所区别，结论上其实差不多。
&lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以事实上，ACGF计划执行的很缓慢，尽管按H的说法这在预期之中。&lt;/p&gt;
&lt;p&gt;A组内也逐渐有很多人对现状产生了不安和不满。
&lt;a href="http://bbs.acgfuture.com/forum.php?mod=viewthread&amp;amp;tid=21807"&gt;这个匿名帖子&lt;/a&gt;是很好的例子，里面有很多值得一看的内容。
其中提到H曾经在某时做过一个决定，说之后的移植不再考虑授权了。
这是一个让我愤怒的决定，实际上我认为，当你作为组长认为授权太疲乏难办的时候，正确的做法不是不去管它，而是下放给组员自己解决。
组长的态度应该是要求组员严格遵守规定，而不是像之前那样再让危险的看法在组中蔓延。&lt;span class="label"&gt;这部分可&lt;em&gt;参考&lt;/em&gt; H 的留言中的第10条&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;幸好事实证明，很多移植者是尊重授权的。之后的以&lt;em&gt;个人身份移植&lt;/em&gt;的游戏，除了MO情况特殊，应是全都取得授权了的。&lt;/p&gt;
&lt;p class="hidden"&gt;为什么要强调某部分，是因为和 H 后来论战中所叙述的不同，&lt;strong&gt;的确有游戏的授权有很大的问题&lt;/strong&gt;。
这方面另有推荐的文章概述，我并非知情人，不想说太多。
我只能说，这比我当时还在组内时的状况要糟糕太多，从而能看出现在组内风气的走向很有问题。&lt;/p&gt;
&lt;h3 id="_6"&gt;第三次摩擦：决裂&lt;/h3&gt;
&lt;p&gt;不幸的是，在今年的妇女节，Andmoe的分流贴被镜子大看到了。&lt;/p&gt;
&lt;p&gt;我离开组后很多事情并不清楚，但从我之前了解到的情况来看，Andmoe应该是已退出A组，并且退出有相当一段时间了。
&lt;span class="label label-info"&gt;这里需要更多证据&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个分流贴是否如同H所说，脚本被加密了，似乎已经难以验证了。
但我认同H的说法，即这不是以组为单位或被指使的有意流出的——尽管Andmoe这个帖子发布日期在2011年7月。&lt;/p&gt;
&lt;p&gt;从&lt;a href="http://bbs.9gal.com/read.php?tid=317993"&gt;镜子在绯月的发帖&lt;/a&gt;的帖子可以看出，这次误事的又是队友，或者不是队友胜似队友。
那个公布移植包的贴吧发帖下面喊糟糕的除了镜子大，全是移植者。&lt;/p&gt;
&lt;p&gt;但是这个时候，镜子已经忍无可忍了。这是最正常的反应，毕竟在镜子大看来，这是再三下限了。&lt;/p&gt;
&lt;p&gt;于是又是一场大争执。问题就在这里，这个时候又有人拿法律出来了。上面早就提过，这是忌讳。
因此整个讨论变得毫无意义。事实上，除了绯月镜子大的帖子及回复，还有A组沙耶的帖子，我基本懒得再去爬楼了。
因为真的没人愿听你解释了，而你不彻底解释清楚来龙去脉，怕是没人信你的道歉的。&lt;/p&gt;
&lt;p&gt;于是最终H直接选择对仗了。老实说，刚听到消息我觉得他疯了。
顺提，H的宣战宣言恰好是C组认为最“装X”的类型。&lt;/p&gt;
&lt;p&gt;好处在于，这次H终于决定要把自己这边解释清楚了。这可能是挽救的最后一次机会了。我个人认为，这种摆上台面自我澄清的事情早就该做了，虽然不该以这种形式。&lt;/p&gt;
&lt;p&gt;到目前为止，ACGF单方面似乎有试图共识的倾向。
但显然汉化组不会轻易买帐(单方面宣战然后单方面表示和解很蛋疼的)，影响恐怕还是很久都不会消失的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Update: 恭喜，已经有神队友对镜子说“双方已达成共识”了……BGM38&lt;/p&gt;
&lt;p&gt;移植者几乎没有人参与论战。&lt;/p&gt;
&lt;p&gt;Latest:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bbs.sumisora.org/read.php?tid=11022956"&gt;【联合声明】对于ACGFuture论坛的“Android Galgame 研究组”无视汉化组授权的移植行为的声明&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先，基本接近尾声了。&lt;/p&gt;
&lt;p&gt;然后，还是得说一下。
这里头掌家的这段QQ记录中所说的“做了分钱”一段，
应是指帮助雪本和雾本移植一事。
这是ACGF试图商业化的第一步。&lt;/p&gt;
&lt;p&gt;上面曾经说过，雪本我去做了。我的想法是钱这事别拿来烦我，我就是想帮帮SP-time.
说实在的，我一度想绕过ACGF直接提供给SP-time.
因为我的想法就是移植了，等像鸑鷟那样彻底市面上找不到了再免费推广用。&lt;/p&gt;
&lt;p&gt;不过就我所知这事没成，所以这里最终肯定跟钱是没有关系的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2011-5-28 21:08:08 某H&lt;br /&gt;
然后进入第二个议程，就是关于sp-time项目的支持，可能各位都不太清楚这个项目，我先介绍一下sp-time：http://baike.baidu.com/view/5093158.htm&lt;br /&gt;
……&lt;br /&gt;
2011-5-28 21:08:40 某H&lt;br /&gt;
这个月上旬，sp-time的一位成员与研究组接触，希望我们研究组能为即将完成的雾之本境进行android的专项移植。&lt;br /&gt;
……&lt;br /&gt;
2011-5-28 21:08:53 某H&lt;br /&gt;
鉴于雾之本境是商业化性质的GAL，因此这次移植也是付费进行的。&lt;br /&gt;
……&lt;br /&gt;
2011-5-28 21:11:54 某H&lt;br /&gt;
以上，是我与backchaos达成的4项共识&lt;br /&gt;
2011-5-28 21:09:34 Skydark&lt;br /&gt;
（1-4完整的一次性发出来一下，比较清楚）&lt;br /&gt;
2011-5-28 21:12:59 backchaos&lt;br /&gt;
1、研究组的发展是基于开源准则运行的，以前或者以后，都不应该与商业化挂钩，并尽可能保持公开，共享，尊重等氛围继续下去。&lt;br /&gt;
2、但是促进国内原创GAL发展也是相当重要的环节。虽然目前的GAL移植主要还是建立在日本的游戏中，但是在不久后的未来，国内民间的GAL团体会不断增加，这点趋势是可以预料的。&lt;br /&gt;
3、民间GAL商业化移植，不论是国外还是国内，都没有先例。我们没有可以借鉴的例子。但是这不正代表我们正在为这个行业竖起规则么？&lt;br /&gt;
4、关于研究经费：研究经费，将由组长进行谈判并协商好。获得的经费100%分发到移植项目中。组长不收取任何费用。&lt;br /&gt;
……&lt;br /&gt;
2011-5-28 21:12:51 某H&lt;br /&gt;
研究经费：是指GAL开发团队支付给本次专项移植所需要的费用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="js-toggle-next alert alert-info dropdown"&gt;
我的态度
&lt;/div&gt;

&lt;div class="alert alert-success"&gt;
&lt;p&gt;2011-5-28 21:19:09 Skydark&lt;br /&gt;
（其实我个人倾向于当PC版游戏已经下市后，发布移植版为原制作组推广旧作，比如鸑鷟现在已经买不到了的这种）&lt;/p&gt;
&lt;p&gt;2011-5-28 21:43:32 Skydark&lt;br /&gt;
（如果我喜欢这个游戏，我是愿意免费给他们做成ONS版的，怎么用交给他们，但是我害怕时限，也害怕商业利益带来的硬性需求，也就是说，纯爱和纯技术部分没问题，其他部分我只能站在外头了，橘子传我就是自留了）&lt;/p&gt;
&lt;p&gt;2011-5-28 22:16:05 Skydark&lt;br /&gt;
（报酬请先别谈，我说过几次我的态度了）&lt;/p&gt;
&lt;p&gt;2011-5-28 22:18:31 Skydark&lt;br /&gt;
（我只对技术有兴趣，而且局限在兴趣上，毕竟我本行和图形界面其实是没啥关系的，所以其他部分我不想考虑，毕竟我们有补助，比起资金时间才是更敏感的，现在还没空玩雪之本境，我至少要过一遍确定是不是个好游戏，尽管就目前解开的样子来看比较有信心）&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;最后的&lt;a href="http://bbs.9gal.com/read.php?tid=319111"&gt;最后&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;矛盾的核心从移植向ACGF商业化移动。&lt;/p&gt;
&lt;p&gt;不知道别人能否接受，但恕我直言，你们现在的解释我个人很失望。&lt;/p&gt;
&lt;p&gt;我只能说，也许组内有些娃娃或成年人，可以被你们口中美妙的理想或大饼所打动。
但如果你们真的想说服组外的人，&lt;strong&gt;请不要试图只用激昂的言语打动别人，请拿行动证明，否则只会让人觉得你们比什么都不说的时候还不靠谱&lt;/strong&gt;。
借 Linus 的一句名言，&lt;strong&gt;Talk is cheap. Show me the code.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尤其是，不要在言语中混进去虚假或夸大的部分，或者试图用它来遮掩什么。
你要知道，在一锅被你形容的很美味的汤里的一粒老鼠屎，会比原先更有杀伤力。&lt;/p&gt;
&lt;p&gt;——虽然在我原先的想法里这贴就没想让太多人看到(发邮件时忘记提醒冰枫这里是纯私人领域了，原本我只想得到几个移植者的意见)，我原本是可以更毫无顾虑的说话的。&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="alert alert-warning"&gt;
尚未完成，可能因为心情问题再也不会完成。
&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id="_7"&gt;反思：为何移植？&lt;/h2&gt;
&lt;h3 id="_8"&gt;移植的初衷与价值&lt;/h3&gt;
&lt;hr /&gt;
&lt;h2 id="_9"&gt;结语&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;这次事件由误会造成，由误会加深(虽然最终决裂不见得是误会)。人与人的沟通永远是个难题。&lt;/li&gt;
&lt;li&gt;A组的问题在于，对内没有尽早统一意见，对外交涉时难以说到对方最关注的点上。H的发言过于浮夸和自耀，立场摇摆不定，容易引起他人不满。组内成员成分混杂，很多有发言权的人圈子狭小，对很多事情一知半解。&lt;/li&gt;
&lt;li&gt;C组的问题在于，首先将对手打上下限标签，因此部分内容显夸大，还有部分消息未经明确和考究即视为证据传播。XXXC论坛因长期有讽刺风格发言，因此对一些攻击性内容过于宽容。&lt;/li&gt;
&lt;li&gt;A组商业化和合法化进程应并重，现状是世人对前者的知情度远超后者。
事实上，在合法化完成之前不应该谈商业化。但我担心&lt;strong&gt;&lt;em&gt;已经迟了&lt;/em&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;补：galgame吧看到&lt;a href="http://tieba.baidu.com/p/1457504262?pn=2"&gt;psi巨36楼和96楼的回复&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原来狐狸那群人是被形象进去的，风月是被形象进去的，xx鸟是去做形象工程的，前几天那些腐女也都是去当模特了。&lt;/p&gt;
&lt;p&gt;没错可能总体下来概率是不大，但是哪怕有一点危险咱都不能让咱这些他妈的无私奉献去日点文本屁好处拿不到的弟兄们担。&lt;/p&gt;
&lt;p&gt;你们期待还能玩到汉化作品。我们只期待我们还能安稳过完一辈子。&lt;/p&gt;
&lt;p&gt;弟兄，体谅点行不，手动咸湿哭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;后补:&lt;/p&gt;
&lt;p&gt;在这件事情过去很久后，很多细节随着时间流逝开始走样。
比如这个&lt;a href="http://zhidao.baidu.com/question/471470593.html"&gt;百度知道回答&lt;/a&gt;，就让我感到一种“所有黑锅都让ACGF背”的感觉，比如把妹乃萌组解散也划到ACGF的问题上了，这很不好。
之前还有一次，某人在acgfuture吧发帖要自己“汉化”并移植纯白交响曲，结果当场揭露盗用汉化文本，也一度被认为是ACGF相关。
这个虽然可以理解(毕竟直接发到吧里去了，而且该人就去那里，算是ACGF躺着中枪了……)，但还是很不好。&lt;/p&gt;
&lt;p&gt;有关商业化的危险度，最麻烦的是它是个定时炸弹。
对于有关的人来说，无论风险如何(如评论所言，我认为赤印的影响比此事件更值得注意一些，毕竟 H 一般是声音更大一点，动的更早但是完成不见得早，抱歉这是我的个人印象……)，有规避的想法是很正常的，警惕性更高也是正常的。
其实事不关己高高挂起是人之常情，有关潜在危险的评价也好，有关移动平台的价值也好。
毕竟我也是在成为 Linuxer 后才关心可移植性的。
不过对于授权这件事情，我的观点一直是：&lt;strong&gt;如果不能说服他们，就按照游戏规则来&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在这个时间点上，某吧里有位神人正在&lt;a href="http://tieba.baidu.com/p/2059223805"&gt;秀&lt;/a&gt;，当然该吧(原?)吧主都看不下去了，这个应该属于个人行为。
与此人此事相关的联动还有&lt;a href="http://tieba.baidu.com/p/2059342643"&gt;这里&lt;/a&gt;和&lt;a href="http://tieba.baidu.com/f?kz=2057912224"&gt;这里&lt;/a&gt;。
此外，我还在QQ群中看到了混入该移植群的人转发的此人打算“汉化”的方式，顿感泪流满面。&lt;/p&gt;
&lt;p&gt;所以说，现在移植授权这么难拿，ACGF事件虽然影响很大，但是还是离不开很多补刀人士的倾力帮助的。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;其实我不想再后补了：&lt;/p&gt;
&lt;p&gt;有人想拿这文当论据。
这本不应该是问题，不过我还是不得不借用下&lt;a href="http://tieba.baidu.com/p/2218849828?pid=30502434740&amp;amp;cid=#30502434740"&gt;O 君的话&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;高中阅读都有通读全文的要求，你要和人说自己的看法你就应该把这些你当做依据的东西看个通透再来和人说，而不是引用别人的观点然后每当他人说了什么你就把别人的观点扔给他然后说一句自己看，这不是你的观点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按理说，这种事情是不需要提醒的。
老实说，读者如果不清楚我每段的用意我是完全理解的，毕竟我不是写文的料，一篇水文不值一提。
但是现状是甚至有人读到最后都不清楚哪些事情是没有实际在台面上发生的而哪些事情是实际发生的，哪些人是当事人哪些人有什么样的态度，这让我很困惑。&lt;/p&gt;</summary><category term="贵圈真乱"></category></entry><entry><title>Hello, world! (你好，世界！)</title><link href="http://blog.skydark.info/test/2012/03/08/hello-world/" rel="alternate"></link><published>2012-03-08T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-03-08:test/2012/03/08/hello-world/</id><summary type="html">
&lt;h2 id="test1"&gt;Test1&lt;/h2&gt;

&lt;h3 id="test2"&gt;Test2&lt;/h3&gt;

&lt;p&gt;尝试从GAE转移到github上，测试用意。&lt;/p&gt;

&lt;p&gt;Add: 感觉不错，打算常驻了，迁移的时候顺便整理下以前的东西，发现太私人了……
&lt;span class="label label-warning"&gt;测试&lt;strong&gt;span&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div class="label label-danger"&gt;
  &lt;p&gt;测试&lt;em&gt;div&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://appblog.skydark.info"&gt;My old blog&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test Python Code:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlighter-coderay"&gt;&lt;div class="CodeRay"&gt;
  &lt;div class="code"&gt;&lt;pre&gt;&lt;span class="line-numbers"&gt;&lt;a href="#n1" name="n1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;import&lt;/span&gt; &lt;span style="color:#B44;font-weight:bold"&gt;girlfriend&lt;/span&gt;
&lt;span class="line-numbers"&gt;&lt;a href="#n2" name="n2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;del&lt;/span&gt; girlfriend
&lt;span class="line-numbers"&gt;&lt;a href="#n3" name="n3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style="color:#080;font-weight:bold"&gt;def&lt;/span&gt; &lt;span style="color:#06B;font-weight:bold"&gt;helloworld&lt;/span&gt;():
&lt;span class="line-numbers"&gt;&lt;a href="#n4" name="n4"&gt;4&lt;/a&gt;&lt;/span&gt;    print(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;span style="color:#D20"&gt;Hello, world!&lt;/span&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="line-numbers"&gt;&lt;a href="#n5" name="n5"&gt;5&lt;/a&gt;&lt;/span&gt;    print(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;span style="color:#D20"&gt;你好，世界&lt;/span&gt;&lt;span style="color:#710"&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class="line-numbers"&gt;&lt;a href="#n6" name="n6"&gt;6&lt;/a&gt;&lt;/span&gt;helloworld()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="test"></category></entry><entry><title>关于空轨OVA2……</title><link href="http://blog.skydark.info/acg/2012/03/03/sora-no-kiseki-ova2/" rel="alternate"></link><published>2012-03-03T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-03-03:acg/2012/03/03/sora-no-kiseki-ova2/</id><summary type="html">&lt;p&gt;终于下了熟肉看了……
很庆幸，上次已经吐过充分多的槽，所以这次可以省点了……&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;飞船其实都没崩来着？乔丝特其实也没崩来着？小丑其实也没崩来着？公主竟然也……不算崩来着(还是怨哪……)？玲竟然也没崩来着(似乎听到了某非人的欢呼声)？是我适应了么……&lt;/p&gt;
&lt;p&gt;不过这片子怎么没有剑帝啊，啥，你说看到了？那一定是幻觉没跑的……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;洛连特大家都睡了你们都没事是因为主角光环么？一定是的吧……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;凯文神父没有了之后果然是神发展么……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;银之意志真耐听……另外约修亚真的是自己在和空气打斗，不要被幻觉蒙蔽了……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;过去的跳飞机弱爆了……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;艾丝蒂尔和约修亚直到最后一幕才不崩么……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我猜古代龙和阿加特都已经没脾气了…&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="acg"></category></entry><entry><title>为什么我在Galgame吧推荐3days</title><link href="http://blog.skydark.info/acg/2012/02/15/why-3days-is-better-than-X/" rel="alternate"></link><published>2012-02-15T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-02-15:acg/2012/02/15/why-3days-is-better-than-X/</id><summary type="html">&lt;p&gt;今天Galgame吧突然爆发一股反3days风。
诚然这少不了某些跟风党无良推荐的原因，
但我觉得这种讨论往往会把一竿子打的过多，
所以在贴吧写了点&lt;a href="http://tieba.baidu.com/p/1414016529?pn=2"&gt;感言&lt;/a&gt;。
稍为修改记录在这里了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;感谢第一个推荐给我3days的人，虽然我不知道是看谁的帖子看到的了。&lt;/p&gt;
&lt;p&gt;3days远在玩之前就知道它是猎奇作品了……因为这样的介绍实在是随处可见。
说实在的，沙耶3days恋狱腐姬经常并称为猎奇GAL的代表，
而下载3days的时候恐怕都能在介绍里看到“拳打沙耶，脚踢月狂”什么的(虽然事实上根本不是那么回事)。
就算新人啥都没注意到，假如他下的时候看不见介绍，或者没去找介绍光看到有人推荐就闭着眼直接去下了玩了，我觉得他不是智力有问题就是智力有问题，也怪不得别人吧。&lt;/p&gt;
&lt;p&gt;言归正传，在接触3days之前我是不接受猎奇的。
不是因为不接受血腥成分，而是因为觉得那种作品纯靠猎奇吸引眼球，剧情上不会有什么出彩感人的地方……
直到3days告诉我猎奇和纯爱本来就没有什么矛盾之处。
是的，3days的猎奇是吸引眼球用的噱头，这当然不影响它是一部纯爱作品。
在感情自然流露，亲密的接触中突然出现的黑衣人的残忍举动
实际上也的确给了我最初轮回的最大动力……
尽管我承认看他次数太多也会觉得有一种无奈的喜感就是了。
猎奇实际上在其中起到的基本就是这样的作用，
而从头到尾的基调一直是纯爱，不仅在结局也在过程，我想玩的人会去细细品味。
受不了日常太多的废萌作的人其实并不太少，我想推荐3days是合适的。&lt;/p&gt;
&lt;p&gt;其实所谓推荐，就是把自己喜欢的东西介绍给可能喜欢的人。
因为3days猎奇方面确实太著名，我相信去搜3days得到的结论大多是猎奇，
所以我实在不希望太多人因此而错过。
尤其是那些明确标榜不喜欢猎奇的人， 没准也是曾怀有我之前那样的想法的人。
当然，如果说它不猎奇那的确是在误导，但是猎奇和纯爱是两个概念。
我想推荐的时候说明&amp;ldquo;这是披着猎奇的纯爱&amp;rdquo;是好的。
但假若没有说，如果是认真推荐3days的，很有可能是默认对方知道或能够知道它是猎奇作的。
我认为别人推荐的东西要自己调查一下再去玩，下载的时候顺便看看介绍等等是起码的能力。&lt;/p&gt;
&lt;p&gt;总的来说，推荐总归只是推荐而已，
如果不去推荐，又怎能知道对方是不是潜在的同好呢？
要说的话，不分青红皂白到处推荐才是有问题的。
但不管怎样，提问的是自己，最后整合信息做出判断的还是自己。
那些求推荐的帖子，基本一句话结束，GAL的世界这么庞大，去推荐啥啊？
就算你不说到具体在哪几个中抉择，哪怕说说你的偏好和认识也成啊。
而且你就一句话提问，我去回复一篇作文，还要左叮咛右嘱咐，得有多有闲情逸致。
有些人觉得给新人推荐3days太重口了点，还是这么说，
&lt;em&gt;&amp;ldquo;如果不去推荐，又怎能知道对方是不是潜在的同好呢？&amp;rdquo;&lt;/em&gt;
以沙耶为入门作的人其实不少，我不认为3days比沙耶重口。
倘若他明确说明不接受猎奇，那自然会去解释为何3days是披着猎奇外衣的纯爱作；
倘若他明确说明玩过沙耶并且不接受，那自然会避开3days.
但假如每次见到推荐都要提醒别人百度一下，总感觉教的太多了点。
总把对方当作小孩子看也是一种不尊重，
毕竟这是18X作品，就算没有成年也应该有玩成年游戏起码的判断能力吧。&lt;/p&gt;
&lt;p&gt;另外看到吧里有个人玩完后说3days根本不是神作啊云云，然后接着是各种不着谱的评价。
首先得说的是，似乎没多少人把3days说成&amp;ldquo;神作&amp;rdquo;
。LASS是个小会社，它靠3days也没有一下子大翻身(对他们而言真正成功的显然是11eyes)。
我见到的用来描述3days的常见的形容词中最高端的也就是&amp;ldquo;纯爱大作&amp;rdquo;。
然后，神作这个词本身就是主观评价，对别人而言是神作的东西对你是粪作一点都不奇怪，
最经典的例子恐怕是使KID社倒闭的Remember11，评价基本是两极的。
这个道理实在是过于浅显，我想连这个不清楚的人，应该属于缺乏判断力的一种。
说实在的，现在&amp;ldquo;神作&amp;rdquo;一词基本是贬义词了，
这和很多人评价门槛过低、四处贴神作标签有关。
这么多游戏，总归有那么几款是能正中红心的，对个人而言有那么几款十分追捧确实不奇怪。
然而见个游戏就打神作标签自然是很不靠谱的行为。
但话又说回来，3days虽然有我们这些很喜欢的人，但是捧为神作的确实不多。
3days的OP被捧为神曲的倒是不少，我个人完全认同这种想法。
我移植的时候也刻意强调过，
到播OP的地方，哪怕设备不支持在ONS中直接进行视频播放，也请暂停下来在游戏外播放一次OP.
我无意中在bilibili看到的用这个OP做的HOTD的MAD也是我推3days的动力之一。&lt;/p&gt;
&lt;p&gt;最后，3days的确是个披着猎奇的纯爱好游戏，这和多少人用坑新人的想法去推荐没有关系。&lt;/p&gt;
</summary><category term="acg"></category><category term="3days"></category><category term="lass"></category></entry><entry><title>奈奈生日快乐！</title><link href="http://blog.skydark.info/acg/2012/01/21/happy-birthday-nana!/" rel="alternate"></link><published>2012-01-21T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-01-21:acg/2012/01/21/happy-birthday-nana!/</id><summary type="html">&lt;p&gt;：）&lt;/p&gt;
</summary><category term="acg"></category></entry><entry><title>Rate My Life</title><link href="http://blog.skydark.info/life/2012/01/07/rate-my-life/" rel="alternate"></link><published>2012-01-07T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-01-07:life/2012/01/07/rate-my-life/</id><summary type="html">&lt;table style="border: 1px solid #333333; margin: 10px;" cellspacing="0"&gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="border: none; font: bold 16px sans-serif; background: #ffddbb; color: #000000; padding: 5px; margin: 0px; text-align: center;" colspan="2"&amp;gt;This Is My Life, Rated&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="width: 85px; padding: 5px; font: bold 18px sans-serif; text-align: left; background: none repeat scroll 0% 0% #ffffcc; color: #000000;"&amp;gt;Life:&amp;lt;/td&amp;gt;
&amp;lt;td style="width: 240px; padding: 5px 5px 5px 0px; font: bold 18px sans-serif; text-align: left; vertical-align: middle; background: none repeat scroll 0% 0% #ffffff; color: #000000;"&amp;gt;&amp;lt;img style="height: 12px; border: 1px solid #000000; border-left: none; vertical-align: middle; padding: 0px; margin: 0px;" src="&lt;a href="http://www.monkeyquiz.com/img/yelgrebar.gif"&gt;http://www.monkeyquiz.com/img/yelgrebar.gif&lt;/a&gt;" alt="" width="98" height="12" /&amp;gt; 4.9&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="width: 85px; padding: 5px; font: bold 12px sans-serif; text-align: left; background: none repeat scroll 0% 0% #ffffcc; color: #000000;"&amp;gt;Mind:&amp;lt;/td&amp;gt;
&amp;lt;td style="width: 240px; padding: 5px 5px 5px 0px; font: bold 12px sans-serif; text-align: left; border: medium none; vertical-align: middle; background: none repeat scroll 0% 0% #ffffff; color: #000000;"&amp;gt;&amp;lt;img style="height: 12px; border: 1px solid #000000; border-left: none; vertical-align: middle; padding: 0px; margin: 0px;" src="&lt;a href="http://www.monkeyquiz.com/img/yelbar.gif"&gt;http://www.monkeyquiz.com/img/yelbar.gif&lt;/a&gt;" alt="" width="92" height="12" /&amp;gt; 4.6&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="width: 85px; padding: 5px; font: bold 12px sans-serif; text-align: left; background: none repeat scroll 0% 0% #ffffcc; color: #000000;"&amp;gt;Body:&amp;lt;/td&amp;gt;
&amp;lt;td style="width: 240px; padding: 5px 5px 5px 0px; font: bold 12px sans-serif; text-align: left; border: medium none; vertical-align: middle; background: none repeat scroll 0% 0% #ffffff; color: #000000;"&amp;gt;&amp;lt;img style="height: 12px; border: 1px solid #000000; border-left: none; vertical-align: middle; padding: 0px; margin: 0px;" src="&lt;a href="http://www.monkeyquiz.com/img/yelgrebar.gif"&gt;http://www.monkeyquiz.com/img/yelgrebar.gif&lt;/a&gt;" alt="" width="106" height="12" /&amp;gt; 5.3&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="width: 85px; padding: 5px; font: bold 12px sans-serif; text-align: left; background: none repeat scroll 0% 0% #ffffcc; color: #000000;"&amp;gt;Spirit:&amp;lt;/td&amp;gt;
&amp;lt;td style="width: 240px; padding: 5px 5px 5px 0px; font: bold 12px sans-serif; text-align: left; border: medium none; vertical-align: middle; background: none repeat scroll 0% 0% #ffffff; color: #000000;"&amp;gt;&amp;lt;img style="height: 12px; border: 1px solid #000000; border-left: none; vertical-align: middle; padding: 0px; margin: 0px;" src="&lt;a href="http://www.monkeyquiz.com/img/yelgrebar.gif"&gt;http://www.monkeyquiz.com/img/yelgrebar.gif&lt;/a&gt;" alt="" width="108" height="12" /&amp;gt; 5.4&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="width: 85px; padding: 5px; font: bold 12px sans-serif; text-align: left; background: none repeat scroll 0% 0% #ffffcc; color: #000000;"&amp;gt;Friends/Family:&amp;lt;/td&amp;gt;
&amp;lt;td style="width: 240px; padding: 5px 5px 5px 0px; font: bold 12px sans-serif; text-align: left; border: medium none; vertical-align: middle; background: none repeat scroll 0% 0% #ffffff; color: #000000;"&amp;gt;&amp;lt;img style="height: 12px; border: 1px solid #000000; border-left: none; vertical-align: middle; padding: 0px; margin: 0px;" src="&lt;a href="http://www.monkeyquiz.com/img/oryelbar.gif"&gt;http://www.monkeyquiz.com/img/oryelbar.gif&lt;/a&gt;" alt="" width="64" height="12" /&amp;gt; 3.2&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="width: 85px; padding: 5px; font: bold 12px sans-serif; text-align: left; background: none repeat scroll 0% 0% #ffffcc; color: #000000;"&amp;gt;Love:&amp;lt;/td&amp;gt;
&amp;lt;td style="width: 240px; padding: 5px 5px 5px 0px; font: bold 12px sans-serif; text-align: left; border: medium none; vertical-align: middle; background: none repeat scroll 0% 0% #ffffff; color: #000000;"&amp;gt;&amp;lt;img style="height: 12px; border: 1px solid #000000; border-left: none; vertical-align: middle; padding: 0px; margin: 0px;" src="&lt;a href="http://www.monkeyquiz.com/img/redbar.gif"&gt;http://www.monkeyquiz.com/img/redbar.gif&lt;/a&gt;" alt="" width="16" height="12" /&amp;gt; 0.8&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="width: 85px; padding: 5px; font: bold 12px sans-serif; text-align: left; background: none repeat scroll 0% 0% #ffffcc; color: #000000;"&amp;gt;Finance:&amp;lt;/td&amp;gt;
&amp;lt;td style="width: 240px; padding: 5px 5px 5px 0px; font: bold 12px sans-serif; text-align: left; border: medium none; vertical-align: middle; background: none repeat scroll 0% 0% #ffffff; color: #000000;"&amp;gt;&amp;lt;img style="height: 12px; border: 1px solid #000000; border-left: none; vertical-align: middle; padding: 0px; margin: 0px;" src="&lt;a href="http://www.monkeyquiz.com/img/grebar.gif"&gt;http://www.monkeyquiz.com/img/grebar.gif&lt;/a&gt;" alt="" width="116" height="12" /&amp;gt; 5.8&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td style="border: none; border-top: 1px solid #333333; font: bold 14px sans-serif; background: #ffeedd; padding: 5px; margin: 0px; text-align: center;" colspan="2"&amp;gt;&amp;lt;a style="color: #0000ff;" href="&lt;a href="http://www.monkeyquiz.com/life/rate_my_life.html"&amp;gt;Take"&gt;http://www.monkeyquiz.com/life/rate_my_life.html"&amp;gt;Take&lt;/a&gt; the Rate My Life Quiz&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;&lt;/table&gt;</summary><category term="生活"></category></entry><entry><title>好久没post了，总结下最近的状况</title><link href="http://blog.skydark.info/life/2012/01/07/these-f-days/" rel="alternate"></link><published>2012-01-07T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2012-01-07:life/2012/01/07/these-f-days/</id><summary type="html">&lt;p&gt;主要是最近考试快死了……12月30日至1月3日三门考试一门监考一篇论文一个大项目(吉源君扛住了，泪流满面)……&lt;/p&gt;
&lt;p&gt;高级逻辑学试着用landslide配合MathJax做了个课件，感觉效果还不错。这课估计大家成绩都不错，一共就那么几个人，虽然没数据库与知识库那么夸张就是了……&lt;/p&gt;
&lt;p&gt;算法考试被分治法的题压抑了，用O(n)判断n个数中是否有一个出现超过一半，考场上只写了个O(nlog n)的，于是考完只听到耳边飘过了句&amp;ldquo;中位数&amp;rdquo;，然后就是以头抢砖表情了……小师妹一如既往地恶意卖萌，考前说要挂，考后和师兄(助教)交流后对我说&amp;ldquo;哎呀，咱俩都没挂&amp;rdquo;(我回复的原话:&amp;ldquo;喂，你怎么可能挂……&amp;rdquo;)，看到成绩后说考差了，于是不幸地被群众发现这尼玛的在对着屏幕上的98说太差了……&lt;/p&gt;
&lt;p&gt;模式识别基本是靠吉源君过的，泪流满面……&lt;/p&gt;
&lt;p&gt;数据库与知识库据说我们实验室的传统是都去选然后都考的很烂，我继续继承发扬此优良传统……嘛，这课其实收获蛮大的，我的意思是，起码成功地督促我补上了没上过的数据库概论……当然如果下学期师弟师妹过来一定要提醒他们选了这课就不要多选课了，这一千多页没有水的ppt想一周看完压力还是很大的……不过贾师兄期末隐身到连考试都没去，大家都联系不到，搞不清楚是啥状况……&lt;/p&gt;
&lt;p&gt;计算语言学是五门专业课唯一没出分的，也是预计最烂的一门，首先大项目我是1v3失败，然后考试的时候是给解释问名字……要是反过来其实我还记得……当然这年头还出填空题和判断题的真心少见就是了……总之这学期复习啥都觉得时间不够草草了事，下学期坚决不选这么多课了(主要是低估了顶三门课的英语和顶两门课的助教，至于半门课的政治也没出分……)&lt;/p&gt;
&lt;p&gt;老板出的数理逻辑卷子真心厚道，可惜还是很多同学答的悲剧了，嘛我这个当年也没好好学现在才开始补回来也没啥资格说就是了……当然说是厚道，有些题还是蛮压力的，比如把&amp;ldquo;白日依山尽，黄河入海流，欲穷千里目，更上一层楼&amp;rdquo;翻译成一阶语言啥的……批了一天半好歹批完了，然后批完了和师兄师妹去K歌，好好吼了一下午——然后本学期第一次一点前睡着，真的累了……= =&lt;/p&gt;
&lt;p&gt;这几天就死宅一下，收拾收拾9号圆润地滚回老家，顺便想想怎么抵抗家母的减肥之怒……&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最近开始上&lt;a href="https://plus.google.com/117704226616638577311"&gt;G+&lt;/a&gt;了，感觉蛮合胃口的。&lt;/p&gt;
&lt;p&gt;回家前给系统各个软件update了一下，然后FF的各种扩展都凌乱了……&lt;/p&gt;
&lt;p&gt;最后，mark: &lt;a href="http://code.google.com/p/onssaver/"&gt;onssaver&lt;/a&gt;&lt;/p&gt;
</summary><category term="学业"></category><category term="PC"></category><category term="ons"></category></entry><entry><title>于是实验室的电脑一直跑在10M上……</title><link href="http://blog.skydark.info/python/2011/12/16/10m/" rel="alternate"></link><published>2011-12-16T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-12-16:python/2011/12/16/10m/</id><summary type="html">&lt;p&gt;RT，那是个千兆网卡……= =&lt;/p&gt;
&lt;p&gt;于是经历了更换驱动-&amp;gt;更新内核-&amp;gt;内核太新编译不了显卡驱动又降了个稍旧的-&amp;gt;换网线-&amp;gt;换网口终于成功，于是答案是最后一个……(求兔斯基以头抢砖表情)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本周倒是完全照着计划来了，除了模式识别的论文阅读，战斗力十足的吉源君课上就做出了几乎完整的ppt，让我狂汗不已……(继续兔斯基以头抢砖表情)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;明天(今天)北京的高中同学聚会，于是集合地点不知道怎么走，去问小师妹，被师兄师姐各种BS了一顿……喂喂喂，我不就是死宅了四年了么……&lt;/p&gt;
&lt;p&gt;当然这就意味着明天不会有啥输出了，考虑到一共还有两周时间，有三门考试一门英语口语一个论文一个大项目一个助教期末监考批卷子，三门考试有千页无 水ppt的数据库与知识库，有只上了一半课以内容零散著称并且已经在project上坑了我了的计算语言学，有谁都不知道难度的算法，下周还要正常上课一 周，突然感觉会死……&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;作为数理逻辑助教，为了方便给同学期末弄课件，用bottle临时搭了个站点，刷刷就写出来了，真的是太简洁了……&lt;/p&gt;
&lt;p&gt;也是因为在宿舍连这个站点太慢才怀疑并发现实验室电脑网速有问题的，虽然最根本的问题在于在用bottle自己的单进程服务，然而MathJax各种绘图连接太多……后来换了server就好了……&lt;/p&gt;
&lt;p&gt;当然在线版课件颇蛋碎就是了……&lt;/p&gt;
</summary><category term="python"></category><category term="学业"></category><category term="PC"></category></entry><entry><title>我想我是疯了……</title><link href="http://blog.skydark.info/life/2011/12/11/mad/" rel="alternate"></link><published>2011-12-11T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-12-11:life/2011/12/11/mad/</id><summary type="html">&lt;p&gt;RT，计算语言学明天的deadline，其大作业目前没有跑通即没有试验结果，还缺试验结果评估部分和实验报告，而且明天上午有模式识别下午有数理逻辑助教(晚上高级逻辑学取消了)，然则我今天一整天都在悠闲，好吧也许是上一周(这一周)平均睡眠四小时的缘故有点恍惚，总之从结果上讲就是破罐子破摔了……&lt;/p&gt;
&lt;p&gt;结论：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下学期绝对不选这么多课;&lt;/li&gt;
&lt;li&gt;选之前打听好情况，准备好照应;&lt;/li&gt;
&lt;li&gt;禁止拖延——呃，考虑到我一向放纵，需要有人撵一撵，可惜离开高中已经四年半了。本来按理说需要撵的人进这学校甚至bao bo都有问题的，只是我从来不拒绝gift而已。&lt;/li&gt;
&lt;li&gt;控制情绪。周六表现的心态太糟糕，我想师兄师妹父母还有刚好打电话过来的苡昕都受到了我情绪的影响，反过来也让自己的情绪更糟。必须要反省。&lt;/li&gt;
&lt;li&gt;总结我现在需要的：自制，责任感，博大宽容，诚实守信。第一个我表现最好的时候是高中买台版风色和追加林的时候，那时控制饮食其实很好，当然不幸的是后来一度关系破裂就放弃了。第二个据说最好的办法是找个老婆，很不幸的是我的二次元因为俗事导致了断层，虽然惭愧但不得不说，最近对自己的二次元本命们有些忽视，可能需要更好的刺激。最后两个是初中时班主任总结的我的优点，再度不幸地，我认为自己已经丢干净了。至少我对成败不如以前淡然，对该完成的工作不如以前守信。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;下周的schedule，计划不如变化，而且做事情耗的时间总是比计划的多一倍，但是现在已经没有多一倍的机会了。&lt;/p&gt;
&lt;p&gt;周一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上午：模式识别课。之前如果能起床，考虑计算语言学实验评估部分。课上可考虑完成其作业。&lt;/li&gt;
&lt;li&gt;中午：下午助教的一点准备。完成计算语言学评估部分。&lt;/li&gt;
&lt;li&gt;下午：老板的数理逻辑助教。考虑课上赶计算语言学报告。&lt;/li&gt;
&lt;li&gt;晚上：完成并提交计算语言学报告。因为肯定是一个失败性报告，不得不违反自己作风地在报告中尝试说请性言辞。因此提交报告后在实验室阳台罚站。由于时间紧迫，以不感冒为要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;周二：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上午：如果模式识别作业没有完成早上继续。如果完成，开始准备英语作业。之后是小讨论班。&lt;/li&gt;
&lt;li&gt;中午：完成英语作业。时间估计不够。&lt;/li&gt;
&lt;li&gt;下午：算法课。虽然这部分应该不考，但该去听了。不能像上周那样以期末堆积为借口。但课上要带上算法导论，作为复习和准备明年的博士资格考试。&lt;/li&gt;
&lt;li&gt;晚上：计算语言学课。根据通知了解是否需要上。如果不上，完成政治论文。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;周三：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上午：早晨的英语课。上午剩下的时间完成英语作业。&lt;/li&gt;
&lt;li&gt;中午：如果上午没有完成立刻完成。然后批改数理逻辑作业。&lt;/li&gt;
&lt;li&gt;下午：数据库与知识库。可能是最后几节课了，必去。开始准备复习/预习其千页课件。不能用之前那种慢动作做slide的复习方式了。直接上草图。&lt;/li&gt;
&lt;li&gt;晚上：继续批改作业。同时这是政治论文的deadline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;周四：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上午：早晨的英语课。接下来是模式识别。&lt;/li&gt;
&lt;li&gt;中午：政治课，提交论文。&lt;/li&gt;
&lt;li&gt;下午：模式识别文献阅读。&lt;/li&gt;
&lt;li&gt;晚上：锻炼。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;周五：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上午：算法课。预计因为久违的锻炼不会起床太早。&lt;/li&gt;
&lt;li&gt;中午：模式识别文献阅读-continue。&lt;/li&gt;
&lt;li&gt;下午：组会。&lt;/li&gt;
&lt;li&gt;晚上：模式识别文献阅读-continue。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;周六：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全天：和吉源把模式识别的期中文献报告清理掉。如果周一和吉源无法商量好，与前面的部分交换顺序。这一天一定要清理完。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;周日：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全天：休息。忘掉下一周的所有问题。要比今天休息的彻底以保持高效。另，Project Euler今天已经完成预定一周的任务，因此之前除非真的提前完成其它任务(完全不可能)不得打开，因为太耗费时间也太容易上瘾。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;其它的感想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Google plus 确实蛮有趣。尤其对我这种本来就不怎么上人人的。&lt;/li&gt;
&lt;li&gt;Google Schemer 这个 idea 真心不错。可惜暂时不敢把想做的事情放上去公开。&lt;/li&gt;
&lt;li&gt;在实验室渡过晚上是很没有效率的做法，尤其是为了写程序的话。除非deadline，否则不得采用这种做法。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bilibili.tv/video/av183186/"&gt;av183186&lt;/a&gt;于是这个视频太内涵了，又附。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;正如松本行弘所言，为一个不明确的事物附上一个（好的）名字有非比寻常的意义，能够发挥超过想象的作用。希望把计划写在这里能起到预期的一点点作用&lt;/p&gt;
</summary><category term="学业"></category></entry><entry><title>要死了</title><link href="http://blog.skydark.info/life/2011/11/19/dead/" rel="alternate"></link><published>2011-11-19T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-11-19:life/2011/11/19/dead/</id><summary type="html">&lt;p&gt;RT，最近task堆积的过多了……&lt;/p&gt;
&lt;p&gt;祝存活，略难……&lt;/p&gt;
</summary><category term="学业"></category></entry><entry><title>新入了个ac100</title><link href="http://blog.skydark.info/mobile/2011/11/08/ac100/" rel="alternate"></link><published>2011-11-08T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-11-08:mobile/2011/11/08/ac100/</id><summary type="html">&lt;p&gt;RT，跟随炮神脚步，二手900,
考虑到是之前大促销999的那批货，我该坎不少价才是的，但是我懒……&lt;/p&gt;
&lt;p&gt;于是相当于入了个10寸上网本，
宿舍无线是个问题
（自己以前给本子编译内核的时候不知道哪里折腾出了毛病没法创建wifi热点，并且重复我很懒），
所以装好11.10后勉强先换上了lxde——
虽然unity不如传说中那样一开机就占用500M，但是确实占了300M左右，
换lxde后没做其它优化就90M……&lt;/p&gt;
&lt;p&gt;等明后天去实验室折腾吧XD
考虑到arm源国内找不着(除了骨头的karmic源)，
到时候还得搞个本地源……&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;GAE调整收费策略后发现micolog的Datastore Read Operations颇为可观，
虽然是个个人日记性质的地方，今天刷了不到10次也用了1%的资源……&lt;/p&gt;
&lt;p&gt;感觉google最近越来越远geek近商业了，虽然这个应该有不少是micolog自己的问题……&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;偶然看到的&lt;a href="http://jandan.net/2011/08/25/2young-2naive.html"&gt;测试&lt;/a&gt;，还好我现在颇为正常……&lt;/p&gt;
</summary><category term="mobile"></category><category term="linux"></category><category term="test"></category></entry><entry><title>空轨这OVA要闹哪样……</title><link href="http://blog.skydark.info/acg/2011/11/06/sora-no-kiseki-ova/" rel="alternate"></link><published>2011-11-06T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-11-06:acg/2011/11/06/sora-no-kiseki-ova/</id><summary type="html">&lt;p&gt;画面崩老早就预料到了……233&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虽然实际看下来，一但接受了这种设定的话……(兔斯基撞墙表情)&lt;/li&gt;
&lt;li&gt;尽管看到最后还是想问这位玩着棒子的孙悟空您哪位，白头发的衰男您哪位，操着大妈音的哥特装御姐您哪位……&lt;/li&gt;
&lt;li&gt;即使在这种设定下，果然还是公主赛高啊嗷嗷！洗浴的时候也是！&lt;/li&gt;
&lt;li&gt;虽然洗浴的时候文艺青年和普通青年共浴的场景屏幕上飘过了一屏幕的yooooo……子安武人的声音还是如此销魂……&lt;/li&gt;
&lt;li&gt;嘛，地震虫倒是高还原……&lt;/li&gt;
&lt;li&gt;额外收获，导力器是触屏操作XD&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是就算接受了这种设定，这尼玛的剧本是要干啥……&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各种飞速跃进(第一句话就把FC结束了，B站上一堆人看到这里表示剧终……)&lt;/li&gt;
&lt;li&gt;各种乱入(约修亚:hi, 大家想我么 乔斯特:尼玛我就这么点时间和约修亚在一起编剧你还抢！) &lt;/li&gt;
&lt;li&gt;各种悲催(瘦狼你现在肯定想一拳爆掉编剧，尼玛正面对约修亚会被压制最后还被萝莉救(雾香:所以说你这种男人弱爆了……金:瘦狼咱俩一起揍编剧，尼玛我就出来踢了两脚破烂……)) &lt;/li&gt;
&lt;li&gt;甚至还有群众喜闻乐见的NTR(玲:我才没有用怨妇的表情看着约修亚和艾斯蒂尔啊绝对没有啊啊啊啊)…… &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;算了，成本所限OVA肯定做不完就只好原创可以理解，但是也别这样啊……&lt;/p&gt;
&lt;p&gt;至于音乐除了ED基本都是继承游戏音乐，倒还好，ED蛮不错的……&lt;/p&gt;
&lt;p&gt;总体而言，其实其它方面还好，一但以fans向的心态看进去倒也蛮怀念的，
就尼玛剧本太坑爹了，不管什么理由，真心不好接受这种设定……(兔斯基以头抢砖&amp;times;40)&lt;/p&gt;
</summary><category term="acg"></category></entry><entry><title>留给10年后的自己</title><link href="http://blog.skydark.info/acg/2011/10/30/10-years-after/" rel="alternate"></link><published>2011-10-30T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-10-30:acg/2011/10/30/10-years-after/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.bilibili.tv/video/av161741"&gt;av161741&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.bilibili.tv/video/av101457"&gt;av101457&lt;/a&gt;&lt;/p&gt;
</summary><category term="acg"></category></entry><entry><title>那谁，生日快乐，你懂的</title><link href="http://blog.skydark.info/life/2011/10/25/hb-to-zm/" rel="alternate"></link><published>2011-10-25T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-10-25:life/2011/10/25/hb-to-zm/</id><summary type="html">&lt;p&gt;RT, 工作顺利，早找帅哥, XD&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天老板的机子又崩了，最后……好吧，清灰+关蜂鸣器之……&lt;/p&gt;
&lt;p&gt;今天身体颇不适，就这样吧……&lt;/p&gt;
</summary><category term="生活"></category></entry><entry><title>上帝看来很缺程序员……</title><link href="http://blog.skydark.info/programming/2011/10/25/rip-mcc/" rel="alternate"></link><published>2011-10-25T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-10-25:programming/2011/10/25/rip-mcc/</id><summary type="html">&lt;p&gt;RT, John McCarthy也去了，RIP……&lt;/p&gt;
</summary><category term="programming"></category><category term="AI"></category></entry><entry><title>普鲁斯特问卷</title><link href="http://blog.skydark.info/test/2011/10/16/i-am/" rel="alternate"></link><published>2011-10-16T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-10-16:test/2011/10/16/i-am/</id><summary type="html">&lt;p&gt;RT, 偶然看到的，遂回答一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;你认为最完美的快乐是怎样的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最希望拥有哪种才华？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最恐惧的是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你目前的心境怎样？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还在世的人中你最钦佩的是谁？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你认为自己最伟大的成就是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你自己的哪个特点让你最觉得痛恨？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最喜欢的旅行是哪一次？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最痛恨别人的什么特点？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最珍惜的财产是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最奢侈的是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你认为程度最浅的痛苦是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你认为哪种美德是被过高的评估的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最喜欢的职业是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你对自己的外表哪一点不满意？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最后悔的事情是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还在世的人中你最鄙视的是谁？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最喜欢男性身上的什么品质？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你使用过的最多的单词或者是词语是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最喜欢女性身上的什么品质？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最伤痛的事是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最看重朋友的什么特点？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你这一生中最爱的人或东西是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你希望以什么样的方式死去？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;何时何地让你感觉到最快乐？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你可以改变你的家庭一件事，那会是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你能选择的话，你希望让什么重现？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你的座右铭是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;!--more--&gt;
现在的我的回答：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;你认为最完美的快乐是怎样的？&lt;/p&gt;
&lt;p&gt;自由地做自己想做的事情&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最希望拥有哪种才华？&lt;/p&gt;
&lt;p&gt;创造性的头脑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最恐惧的是什么？&lt;/p&gt;
&lt;p&gt;困在回忆的迷宫中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你目前的心境怎样？&lt;/p&gt;
&lt;p&gt;浮躁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还在世的人中你最钦佩的是谁？&lt;/p&gt;
&lt;p&gt;云风/汉公/dwing？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你认为自己最伟大的成就是什么？&lt;/p&gt;
&lt;p&gt;活着&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你自己的哪个特点让你最觉得痛恨？&lt;/p&gt;
&lt;p&gt;散漫拖延&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最喜欢的旅行是哪一次？&lt;/p&gt;
&lt;p&gt;无，因为不喜欢旅行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最痛恨别人的什么特点？&lt;/p&gt;
&lt;p&gt;指指点点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最珍惜的财产是什么？&lt;/p&gt;
&lt;p&gt;真心朋友，无论性别，无论次元&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最奢侈的是什么？&lt;/p&gt;
&lt;p&gt;有大把的时间，和可以利用这大把时间的动力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你认为程度最浅的痛苦是什么？&lt;/p&gt;
&lt;p&gt;肉体损伤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你认为哪种美德是被过高的评估的？&lt;/p&gt;
&lt;p&gt;谦虚。不是因为谦虚有什么不对的，而是因为1.  这应该是里所应当的;2. 有时候不是谦虚，是真心话……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最喜欢的职业是什么？&lt;/p&gt;
&lt;p&gt;自由的程序员&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你对自己的外表哪一点不满意？&lt;/p&gt;
&lt;p&gt;全部。非要说的话，眼睛&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最后悔的事情是什么？&lt;/p&gt;
&lt;p&gt;浪费了大把的时间，而且有时还浪费时间幻想&amp;ldquo;如果&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还在世的人中你最鄙视的是谁？&lt;/p&gt;
&lt;p&gt;靠出格事情炒作自己的人&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最喜欢男性身上的什么品质？&lt;/p&gt;
&lt;p&gt;有责任感，懂得承诺，豪爽&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你使用过的最多的单词或者是词语是什么？&lt;/p&gt;
&lt;p&gt;&amp;ldquo;= =&amp;rdquo;.  好吧，英文可能是just，中文最近应该是&amp;ldquo;弱爆了&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最喜欢女性身上的什么品质？&lt;/p&gt;
&lt;p&gt;坚强体贴独立&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最伤痛的事是什么？&lt;/p&gt;
&lt;p&gt;做了数不清的傻事&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你最看重朋友的什么特点？&lt;/p&gt;
&lt;p&gt;多建议，少干涉，谈的来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你这一生中最爱的人或东西是什么？&lt;/p&gt;
&lt;p&gt;我很没良心，所以谈最爱的时候实在不知道怎么回答……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你希望以什么样的方式死去？&lt;/p&gt;
&lt;p&gt;身边无牵无挂，安静地睡去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;何时何地让你感觉到最快乐？&lt;/p&gt;
&lt;p&gt;真要说的话……面对二次元的她的时候&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你可以改变你的家庭一件事，那会是什么？&lt;/p&gt;
&lt;p&gt;让父母更健康&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你能选择的话，你希望让什么重现？&lt;/p&gt;
&lt;p&gt;不选择，我害怕&amp;ldquo;如果&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你的座右铭是什么？&lt;/p&gt;
&lt;p&gt;talk less, read much, do more&amp;mdash;&amp;mdash;但是一直没有做到。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="生活"></category></entry><entry><title>试了下arch……</title><link href="http://blog.skydark.info/linux/2011/10/14/arch/" rel="alternate"></link><published>2011-10-14T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-10-14:linux/2011/10/14/arch/</id><summary type="html">&lt;p&gt;RT，因为梁鑫在旁边用Fedora跑Gnome3勾起了我的欲望
(P.S.:虽然老实说，我发现我现在自己的机子完全能假装gnome3使了……= =)，
于是昨天蛋疼地开始动手装arch……&lt;/p&gt;
&lt;p&gt;拜完Delek大后开始在虚拟机里试验，轻松愉快，而且感觉也很好，
于是晚上回宿舍一方面打给老板的report一边捣鼓……&lt;/p&gt;
&lt;p&gt;于是得到的教训是：别把虚拟机和实体机当一回事……&lt;/p&gt;
&lt;p&gt;嘛，最后就是毁了boot分区，
然后因为是自己编译的内核，用恢复盘进去chroot然后dpkg，淡定地恢复了，虚惊一场……&lt;/p&gt;
&lt;p&gt;想了想用什么DE，最后果断还是KDE了，
发现我这台机子上KDE在arch上跑的比Gnome2在Ubuntu上还舒服(虽然开机载入DE是慢些)。
pacman也挺方便的，要说不好的话就是教育网yaourt有点压力……&lt;/p&gt;
&lt;p&gt;201108版，FF7, Python2.7+3.X，压力颇大……
不过还好python2.7还是能无障碍地跑起前段时间整的remembernote的。
以后有空的时候慢慢想办法保持两个系统同步，以前那些胡写一通的脚本是该清理清理了……&lt;/p&gt;
&lt;p&gt;P.S.:于是昨天没睡觉今天竟然毫无感觉——当然我一向是延迟一天的反应速度……&lt;/p&gt;
&lt;p&gt;P.S.2:最后发给老板的是6页的E文报告，和师兄们同感的是，
"你写的果然是水啊"
"反正本来这题目就是水的不是么……"
"……倒也是……"&lt;/p&gt;
</summary><category term="linux"></category><category term="arch"></category><category term="学业"></category></entry><entry><title>RIP, R</title><link href="http://blog.skydark.info/programming/2011/10/13/rip,-r/" rel="alternate"></link><published>2011-10-13T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-10-13:programming/2011/10/13/rip,-r/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Bye, Ritchie!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="programming"></category></entry><entry><title>老乔走好</title><link href="http://blog.skydark.info/pc/2011/10/06/goodbye-jobs/" rel="alternate"></link><published>2011-10-06T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-10-06:pc/2011/10/06/goodbye-jobs/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.apple.com/stevejobs/"&gt;http://www.apple.com/stevejobs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然对苹果的东西以及乔布斯本人都不感冒，但是他的确改变了世界。祝走好。&lt;/p&gt;
</summary><category term="PC"></category></entry><entry><title>Fate Zero</title><link href="http://blog.skydark.info/acg/2011/10/02/fate-zero/" rel="alternate"></link><published>2011-10-02T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-10-02:acg/2011/10/02/fate-zero/</id><summary type="html">&lt;p&gt;RT, 这次无论质量还是长度都是诚意满满啊嗷嗷！&lt;/p&gt;
&lt;p&gt;又见虫爷，虽然很多人萌小凛(确实很萌啦……)，Sakura小时候也真心……懂的……
可惜雁夜没有用40个道场换主角光环的机会，尤其在看到他和小樱交换约定的时候，真心哀叹啊……&lt;/p&gt;
&lt;p&gt;不过这次最大的亮点还是Iris啊，话说bilibili上飘过弹幕说这届人妻真心好，我很赞同XD&lt;/p&gt;
&lt;p&gt;韦伯感觉更受了……
官方字幕刚说完&amp;ldquo;你的身体在我之下&amp;rdquo;亚历山大就出现了何其压力山大啊！
不过官方字幕嘛……呃，有就已经很不错了不是……= =||&lt;/p&gt;
&lt;p&gt;这学期有的燃了……然则这学期的课程压力……(兔斯基拍脸&amp;times;40)&lt;/p&gt;
</summary><category term="acg"></category><category term="type-moon"></category></entry><entry><title>和师兄战香山</title><link href="http://blog.skydark.info/life/2011/09/24/mountain/" rel="alternate"></link><published>2011-09-24T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-09-24:life/2011/09/24/mountain/</id><summary type="html">&lt;p&gt;RT，没想到我是战斗力比较好的……&lt;/p&gt;
&lt;p&gt;三国杀啥的完全不会啊嗷！= =||||&lt;/p&gt;
&lt;p&gt;回来的时候到了饭点于是晚饭也在外头灭的……&lt;/p&gt;
&lt;p&gt;回来的时候看到实验室已经家具全面替换了，腐师妹辛苦了，于是你今晚坐的位置我预定了……(兔斯基捶地表情)&lt;/p&gt;
&lt;p&gt;嘛，总之痛苦的是明天……吧……= =&lt;/p&gt;
&lt;p&gt;另外明天博士班的聚会就不去了，一整周绷着弦，我要个周末不过分吧……= =|&lt;/p&gt;
</summary><category term="生活"></category></entry><entry><title>入学体检</title><link href="http://blog.skydark.info/life/2011/09/20/i-hate-it/" rel="alternate"></link><published>2011-09-20T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-09-20:life/2011/09/20/i-hate-it/</id><summary type="html">&lt;p&gt;RT,WTF,为了给一个确定的结果补充上过程，结果把两天里为数不多的空闲时间全搭进去了……&lt;/p&gt;
&lt;p&gt;以后能不进校医院就坚决不进，有心理阴影了……&lt;/p&gt;
</summary><category term="生活"></category></entry><entry><title>中秋</title><link href="http://blog.skydark.info/python/2011/09/12/rnote/" rel="alternate"></link><published>2011-09-12T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-09-12:python/2011/09/12/rnote/</id><summary type="html">&lt;p&gt;RT，虽然没感觉就是= =&lt;/p&gt;
&lt;p&gt;昨天和高中同学聚了一次……
东哥还是一如既往地稳健，健健内功不减当年，安东对pku非常兴奋，至于鑫爷……
一抖就是个大内幕啊XD&lt;/p&gt;
&lt;p&gt;最近在用Karrigell做上学期就想折腾的笔记软件，
虽然前些天看GAE一度考虑用Django，不过果然我不想花太多时间……= =&lt;/p&gt;
&lt;p&gt;就模仿这个blog现在的风格做了……&lt;/p&gt;
</summary><category term="生活"></category><category term="python"></category></entry><entry><title>开学相关</title><link href="http://blog.skydark.info/life/2011/08/31/hi-school/" rel="alternate"></link><published>2011-08-31T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-08-31:life/2011/08/31/hi-school/</id><summary type="html">&lt;p&gt;RT，因为这个假期过的无比郁闷，所以这一周都在懒散着……&lt;/p&gt;
&lt;p&gt;朝圣师兄原来是硕转博，学号和我差一个压力很大，当然一次集体活动都没去也压力很大……&lt;/p&gt;
&lt;p&gt;班长姓和小胡一样(这句似乎有槽点?……),名和妹妹一样，跟着老裘的，
而且为了方便收材料写自己联系方式时已经开始写实验室地址了，
让我这个在同一间实验室占着座位不去的家伙压力山大……
今天还把我当副班了，原因是副班和我一样是个男的略黑的戴眼镜的胖子
(我尽力写上了我能想到的共同点……)，
嘛还好她应该不知道我和她一个实验室，
另外不知道牟老师的学生是不是已经出现了，总之各种灵压中……&lt;/p&gt;
&lt;p&gt;最近体重又疯狂的……呃，于是今天去了康美乐，这不是一般的压力……
在英派斯好歹有减肥的有老头有太太们，在康美乐只剩猛男们了……
在某臂力器械上我上了50拉了20个做了两组表示压力了
(&amp;ldquo;不要以为胖子就有劲了!&amp;rdquo;——桶子)，
然后发现某猛男在背后微笑看我，我知趣闪边，
于是他顺手就把插槽插到了很靠下的地方狂拉不止，我只知道一定过了100……
至于跑步机那边，总之就没个低速的，
还好我本来就不打算跑跑步机，我更喜欢五四的跑道……&lt;/p&gt;
&lt;p&gt;另外英语入学考63,以我以前的惯例不是60才对么？不是60才对么？
嘛总之刚好在中间水平，虽然我知道一定是阅读往上拉其它的完全低于平均水平就是了
虽然这次阅读也垃了压力中……&lt;/p&gt;
&lt;p&gt;嘛，总结的话，目前所有的感受都是：&lt;strong&gt;压力山大&lt;/strong&gt;……&lt;/p&gt;
&lt;p&gt;没了……&lt;/p&gt;
</summary><category term="生活"></category><category term="学业"></category></entry><entry><title>电脑莫名其妙地坏了，又莫名其妙地好了……</title><link href="http://blog.skydark.info/pc/2011/08/08/play-on-me/" rel="alternate"></link><published>2011-08-08T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-08-08:pc/2011/08/08/play-on-me/</id><summary type="html">&lt;p&gt;RT，我当时就在老爸面前冲着电脑大吼fxxk和shxt了……&lt;/p&gt;
&lt;p&gt;还是一如既往地寂寞……算了，总之先备份吧……&lt;/p&gt;
</summary><category term="PC"></category></entry><entry><title>假期在家访问app突然抽搐了……</title><link href="http://blog.skydark.info/life/2011/08/04/app/" rel="alternate"></link><published>2011-08-04T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-08-04:life/2011/08/04/app/</id><summary type="html">&lt;p&gt;然后想起用的ipv6的host……= =&lt;/p&gt;
&lt;p&gt;这个假期过的无比郁闷，省略号，以上。&lt;/p&gt;
</summary><category term="生活"></category></entry><entry><title>助手生日快乐！</title><link href="http://blog.skydark.info/acg/2011/07/24/my-wife/" rel="alternate"></link><published>2011-07-24T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-07-24:acg/2011/07/24/my-wife/</id><summary type="html">&lt;p&gt;RT，助手俺的嫁！&amp;gt;_&amp;lt;!&lt;/p&gt;
</summary><category term="acg"></category></entry><entry><title>SGKQ神同人竟然有人翻译了！</title><link href="http://blog.skydark.info/acg/2011/07/23/sgkq/" rel="alternate"></link><published>2011-07-23T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-07-23:acg/2011/07/23/sgkq/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.moonmemory.com/author/deepblue"&gt;http://www.moonmemory.com/author/deepblue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老早就听说这神同人了，不会日文一直没机会读，泪流满面啊！&lt;/p&gt;
&lt;p&gt;开头确实比SG原作出彩的多，
当然部分可能是因为一开始男主就知道大多数信息，
而且有些地方不用像游戏脚本那样写的那么详细的缘故，
但是不得不佩服作者的确有想法，
健速君你哭吧XD……&lt;/p&gt;
&lt;p&gt;不过总感觉一开始大家都太乖了啊，男主收获了那么多情报……= =&lt;/p&gt;
&lt;p&gt;于是加入催坑行列……话说这个有人做成游戏没？总觉得挺合适的……&lt;/p&gt;
&lt;p&gt;下午冰焰过来面基，压力山大……特指想起QQ头像的时候，虽然我更没资格这么说就是了……= =&lt;/p&gt;
</summary><category term="acg"></category><category term="生活"></category></entry><entry><title>最近又没啥进展……</title><link href="http://blog.skydark.info/life/2011/07/17/no-progress/" rel="alternate"></link><published>2011-07-17T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-07-17:life/2011/07/17/no-progress/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;要做的列表很长一张……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但是啥都没做……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;老板表示让我和范师兄一块儿教他高二升高三的儿子计算机知识，压力山大中……
他儿子读国际学校用苹果，
老板表示要找mac下的软件，于是虚拟机装mac花了两天还失败了，压力山大&amp;times;2……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;体重呼呼往上涨中……（兔斯基撞墙表情&amp;times;4）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="生活"></category><category term="学业"></category></entry><entry><title>今天搬宿舍要死了……</title><link href="http://blog.skydark.info/life/2011/07/10/i-am-dead/" rel="alternate"></link><published>2011-07-10T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-07-10:life/2011/07/10/i-am-dead/</id><summary type="html">&lt;p&gt;RT，无力中……&lt;/p&gt;
&lt;p&gt;P.S.:果然我们本科住的是北大最好的宿舍么……压力巨大中……&lt;/p&gt;
</summary><category term="生活"></category></entry><entry><title>脏翅膀汉化了！</title><link href="http://blog.skydark.info/transplant/2011/07/02/eustia-ch/" rel="alternate"></link><published>2011-07-02T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-07-02:transplant/2011/07/02/eustia-ch/</id><summary type="html">&lt;p&gt;RT，虽然是昨晚的事情……&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一开始看到&lt;a href="http://tieba.baidu.com/f?kz=1122942289"&gt;这个帖子&lt;/a&gt;还半信半疑；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结果真的在7月1日的最后半小时放出来了，而且还不是来福的组：&lt;a href="http://bbs.sumisora.org/read.php?tid=11002023"&gt;http://bbs.sumisora.org/read.php?tid=11002023&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;而且Staff：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Staff：&lt;/p&gt;
&lt;p&gt;程序、翻译：さくらD_Clys&lt;/p&gt;
&lt;p&gt;修图：八云 瑠璃桜&lt;/p&gt;
&lt;p&gt;测试、后期、分流：Air&lt;/p&gt;
&lt;p&gt;特别鸣谢：晓美 焔酱
简单地说，是一个人花了两个月战翻了3M+的文本……战斗力直奔500万啊！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后这才发现&lt;a href="http://tieba.baidu.com/f?kz=1062813995"&gt;黑历史&lt;/a&gt; 4楼 大神说两个月就两个月霸气十足啊……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;感言，佩服心态和气度：&lt;a href="http://tieba.baidu.com/f?kz=1127330482"&gt;http://tieba.baidu.com/f?kz=1127330482&lt;/a&gt;
 其中去联系移植的指的是某H君，他看到后就去联系了，H君的热情还是惊人的……= =
 嘛，不过我本以为这个假期结束前能汉化就很快了，所以当真没心理准备……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当然这个撞坑也评价不一，略……&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;汉化脚本已经拆了，
有两个文件反编译出错，是因为用来确定脚本结束位置的1B000000定位错误，
直接修改汉化脚本最末尾搞掉，已过试玩版情节部分OK。
有些乱码和aiy+数字是汉化问题，囧……&lt;/p&gt;
&lt;p&gt;当然现在还有个严重的问题是因为没有心理准备，系统那块还没开始摸，另外需要测试君无误……&lt;/p&gt;
</summary><category term="ons"></category><category term="acg"></category></entry><entry><title>昨天在PGM上耗的时间太多了……</title><link href="http://blog.skydark.info/transplant/2011/07/01/pgm/" rel="alternate"></link><published>2011-07-01T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-07-01:transplant/2011/07/01/pgm/</id><summary type="html">&lt;p&gt;RT,昨天唯一比较学术(?)的是找老板讨论下学期ML课件的样式问题……
(呃，等下，学术么……再等下，时间范围只是&amp;ldquo;昨天&amp;rdquo;么……= =)&lt;/p&gt;
&lt;p&gt;首先编译出了Linux版，对我来说这是一切的前提……= =&lt;/p&gt;
&lt;p&gt;libnge2用git最新版，更新cmake才能编译通过，
之前因为这个浪费了不少时间，感谢snowman和NC叔……
PGM是要修改不少地方才能过去的，PGM默认是开着PSP支持的这点很那啥……
另外那个makefile写的太不照顾我这种非IDE用户了……&lt;/p&gt;
&lt;p&gt;然后Android版一番折腾编译过去了，但是qemu里一跑就no respond是闹哪样……
好吧我猜是你找不到pgm.ini还是……但是stderr在哪里……= =
总之Android开发实在不熟，还是拜托给natdon君好了……&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;然后关于libnge2和PGM的一点初印象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;libnge2是个看上去还不错的项目。
依NC叔的说法，出发点比较赞，API也稳定了，LGPL也比较方便，现在也逐渐脱离SDL了。
比较不爽的是nge_timer.c里那个&lt;code&gt;timer_create&lt;/code&gt;和&lt;code&gt;&amp;lt;timer.h&amp;gt;&lt;/code&gt;里的同名函数冲突。
另外linux版和android版目前似乎还是缺点功能……
linux版还好说
(还是说，用git最新版，结果搞得我不得不在虚拟机里装了个win版git……万恶的教育网)，
android版image_ext那些类似image_conv之类的似乎都找不到了……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PGM个人不能说太欣赏。&lt;/p&gt;
&lt;p&gt;还是这么说，首先PGM就是针对PSP设计的，
 且不说代码里用&lt;code&gt;#if !defined(WIN) &amp;amp;&amp;amp; !defined(IPHONEOS)&lt;/code&gt;来表示&lt;code&gt;#ifdef PSP&lt;/code&gt;的语义，
 单说不支持鼠标操作就泪流满面了，连开发win版GAL也是不够的
 (另外在随意翻贴时发现有人抱怨没有回想模式)……
 当然我相信这个要弥补不是大问题，但是这是个设计理念的问题。&lt;/p&gt;
&lt;p&gt;PGM的c/cpp代码的主要的作用是为libnge2做了一个lua的wrapper和一个package支持
 (呃，我不大喜欢这种非要pack起来才能run的方式，test和patch很累的……)，
 然后在lua代码层上整合了一整套函数，
 相比而言lua那边才算重头，毕竟前身AMP是AVGMakerTemplate，其Template其实在lua这边。&lt;/p&gt;
&lt;p&gt;但是lua那边提供的那套函数给人感觉又有些……
 怎么说呢，以nscripter比较，
 虽然nscripter对移植者而言有这样那样的麻烦，但它还是works的，
 PGM没有给我一种&amp;ldquo;换后会改善生活&amp;rdquo;的感觉，
 尽管它有lua支持这一利器，但上面搭建的这层给我的却是更加不灵活的感觉，
 我相信这是我的错觉，但是这里谈的是第一印象所以就无所谓了。&lt;/p&gt;
&lt;p&gt;还有一个类似找茬的……
 来自&lt;a href="http://www.iacger.com/forum.php?mod=viewthread&amp;amp;tid=39266"&gt;NC叔的征召&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;ldquo;PGM的目标是打败ons，krkr引擎，从稳定性和易用性上，psp平台已经达到了。
（市场占有率）&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我承认我看完后感觉很违和……
 我不喜欢以打败别人为目标的system，至于后半句还是不评价了……&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;嘛，不过我这其实是属于站着说话不腰疼的那种我懂的，反正我一向只会去碰上层的东西……= =&lt;/p&gt;
</summary><category term="ons"></category><category term="pgm"></category></entry><entry><title>祝LJL同学生日快乐！</title><link href="http://blog.skydark.info/life/2011/06/26/ljl/" rel="alternate"></link><published>2011-06-26T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-06-26:life/2011/06/26/ljl/</id><summary type="html">&lt;p&gt;RT，咳咳……&lt;/p&gt;
&lt;p&gt;刚和从米国归来的位老大还有呆子狗屎垚腐败回来，
和位老大谈起以前奥赛的岁月，突然觉得自己好老啊
(另外请在讨论我的个人问题之前先讨论某呆子的问题，我是自豪的二次元党谢谢)=.=||&lt;/p&gt;
&lt;p&gt;结果发短信错过了一个多小时XD= =&lt;/p&gt;
&lt;p&gt;虽然我承认我本来想买套助手的衣服送她cos的(因为脑补中实在是太般配了XD)，
但是最终果然还是没有鼓起勇气捶地……= =||||&lt;/p&gt;
&lt;p&gt;就要去法国了，祝一切顺利，那个，虽然不知道你另一半情况如何，总之祝那方面也顺利XD&lt;/p&gt;
</summary><category term="生活"></category></entry><entry><title>考试，聚餐，脏翅膀</title><link href="http://blog.skydark.info/transplant/2011/06/19/eustia/" rel="alternate"></link><published>2011-06-19T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-06-19:transplant/2011/06/19/eustia/</id><summary type="html">&lt;p&gt;RT，昨天是和师兄他们聚餐，今天是和北京的二中人们聚餐……
为了防止连轴+连续多日睡眠不佳，昨晚没敢陪师兄通宵……= =&lt;/p&gt;
&lt;p&gt;昨天考完AI后，本科最后一次考试结束了……虽然成绩和本科无关了就是……= =||&lt;/p&gt;
&lt;p&gt;脏翅膀RT, 考前就有的想法，当时刚摸出offset，在发愁底下指令的含义，
结果就在最近，
TLWiki上的Kingshriek大写了BGI引擎脚本的反汇编器(其实还有汇编回去的……)……狂拜之……&lt;/p&gt;
&lt;p&gt;然后稍作修改做了个伪反编译器，
称为&amp;ldquo;伪&amp;rdquo;是因为连定义函数都不能反编译，我是手动反编译函数的……
毕竟是为了ONS移植，还是不要连函数实现都细节化比较方便，粒度还是粗些的好。&lt;/p&gt;
&lt;p&gt;底下要猜的函数还是蛮多的……
另外还有两个奇葩的opcode 0x309和0x30e，
出现在aiy10090/aiy10220和aiy50170中，非常诡异……mark一下&lt;/p&gt;
&lt;p&gt;简中体验版全部反编译通过，测试效果……光看图嘛嘛，其实还是缺了不少- -&lt;/p&gt;
&lt;p&gt;&lt;img src="http://skydblog.appspot.com/media/aghza3lkYmxvZ3INCxIFTWVkaWEYuY4DDA/screenshot7.jpg" alt="脏翅膀截图"&gt;&lt;/p&gt;
&lt;p&gt;P.S.:反编译其实应该是隔壁裘老师实验室研究的东西吧喂……XD&lt;/p&gt;
</summary><category term="学业"></category><category term="生活"></category><category term="ons"></category></entry><entry><title>雾之本境</title><link href="http://blog.skydark.info/transplant/2011/06/13/fog/" rel="alternate"></link><published>2011-06-13T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-06-13:transplant/2011/06/13/fog/</id><summary type="html">&lt;p&gt;嘛，其实是昨天的事情……
昨晚9点半左右看到的，11点半左右除系统移植完成，
就是那个分辨率纠了个结……= =||&lt;/p&gt;
&lt;p&gt;各方面讲，确实是个不错的作品……
因为是Demo所以故事只开了个惊悚的头，
期待正式版啊XD(然则网银空虚中……= =||||)&lt;/p&gt;
</summary><category term="ons"></category><category term="sptime"></category></entry><entry><title>早栗妹子你好~</title><link href="http://blog.skydark.info/acg/2011/06/10/demonophobia/" rel="alternate"></link><published>2011-06-10T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-06-10:acg/2011/06/10/demonophobia/</id><summary type="html">&lt;p&gt;&lt;a href="http://tieba.baidu.com/f?kz=1104534465"&gt;http://tieba.baidu.com/f?kz=1104534465&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然昨晚（今早？）为了一个bug产生的bug（= =）纠结了很久……嘛，先这样……&lt;/p&gt;
&lt;p&gt;下午答辩，准备中……&lt;/p&gt;
&lt;p&gt;好吧，答辩被羞辱了……= =……
讲的忘我了，严重超时，然后被羞辱下台，嘛，虽然综述性的东西本来是没啥可讲的……
总之过high了就是了……= =||&lt;/p&gt;
</summary><category term="acg"></category><category term="汉化"></category><category term="学业"></category></entry><entry><title>中招了= =||</title><link href="http://blog.skydark.info/pc/2011/06/05/virus/" rel="alternate"></link><published>2011-06-05T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-06-05:pc/2011/06/05/virus/</id><summary type="html">&lt;p&gt;RT, Win32/Almanahe.b, 怪不得前段时间win7总是说打不开XXexe，
不过也正因为如此，实体机的win7是干净的……&lt;/p&gt;
&lt;p&gt;看来以后虚拟机也要注意安全啊……这个毒感染了全部exe，泪流满面中……&lt;/p&gt;
</summary><category term="PC"></category></entry><entry><title>雪之本境移植纪念</title><link href="http://blog.skydark.info/transplant/2011/06/03/snowtrap/" rel="alternate"></link><published>2011-06-03T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-06-03:transplant/2011/06/03/snowtrap/</id><summary type="html">&lt;p&gt;&lt;img src="/images/transplant/snowtrap_title.jpg" alt="snow_title"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/transplant/snowtrap_start.jpg" alt="snow_start"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/transplant/snowtrap_load.jpg" alt="snow_load"&gt;&lt;/p&gt;
&lt;p&gt;如题如图……这次追求高还原度有点蛋疼，还好昨天战斗力特别旺盛……&lt;/p&gt;
&lt;p&gt;嘛，毕设自老板审完后连审查表都发给我("代我交")后顿时没战斗力了……
表上连成绩都带上了啊！我之前的纠结战斗算毛线啊！= =||||&lt;/p&gt;
&lt;p&gt;（顺便，才知道只要host里将appspot站点的ip映为google的ip就可以万能穿了，
因为google的任何服务器都可以当其服务的代理，
通过解析url转发到google提供的真实的服务上……
其实之前用wallproxy的时候知道这点，但是没注意到可以在这里用上XD）&lt;/p&gt;
&lt;p&gt;晚上和老板师兄一起在农园三楼聚了个餐，我们桌6个人的战斗力比老板他们8个人还NB……= =||&lt;/p&gt;
&lt;p&gt;不过老板谈笑间，这几周的安排顿时紧凑多了……= =||||&lt;/p&gt;
</summary><category term="ons"></category><category term="学业"></category><category term="sptime"></category></entry><entry><title>一张渣桌面</title><link href="http://blog.skydark.info/life/2011/05/27/desktop/" rel="alternate"></link><published>2011-05-27T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-05-27:life/2011/05/27/desktop/</id><summary type="html">&lt;p&gt;&lt;img src="http://skydblog.appspot.com/media/aghza3lkYmxvZ3INCxIFTWVkaWEYyd8CDA/Screenshot.png" alt="一张渣桌面"&gt;&lt;/p&gt;
&lt;p&gt;RT，几天前截的……&lt;/p&gt;
&lt;p&gt;毕设玩脱了……&lt;/p&gt;
&lt;p&gt;每时每刻都想睡觉……&lt;/p&gt;
&lt;p&gt;想干的事情列表超过十项，必须干的事情加上就二十项了，然则全部没进度……&lt;/p&gt;
&lt;p&gt;结论：困扰多年的症状的病名终于找到了，叫五月病……(捶地)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;补充下下午流程：&lt;/p&gt;
&lt;p&gt;去ATM提钱未果*2-&amp;gt;照毕业照-&amp;gt;去ATM提钱未果-&amp;gt;申请老板的数理逻辑助教-&amp;gt;去ATM提钱未果
……= =……&lt;/p&gt;
</summary><category term="学业"></category><category term="acg"></category></entry><entry><title>PSP ONS移植……</title><link href="http://blog.skydark.info/transplant/2011/05/15/psp-ons/" rel="alternate"></link><published>2011-05-15T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-05-15:transplant/2011/05/15/psp-ons/</id><summary type="html">&lt;p&gt;昨晚翻腾秽翼的尤斯蒂娅时无意发现的……日本技术宅们没有上限……捶地……= =&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://harupspgame.blog64.fc2.com/"&gt;harupspgame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://briefcase.yahoo.co.jp/bc/qmbqmbqm/lst?.dir=/"&gt;harupspgameFiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ameblo.jp/mdash/theme-10007280942.html"&gt;mdash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://savaiv.blog81.fc2.com/"&gt;savaiv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nanajigen.mad.buttobi.net/"&gt;七次元&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（好吧，终于明白221大移植的夜明开头的注释里的七次元、暗黑微笑来自哪里了……不幸地发现，在夜君的fate之前，几乎全部移植都来自日本友人啊……= =）&lt;/p&gt;
&lt;p&gt;另：偶尔接触了demonophobia……也就顺便碰到了HSP引擎……当然也接触到了那回早栗妹子……（捶地）&lt;/p&gt;
&lt;p&gt;昨天下午郭巴来面试，和呆子老曹垚哥一起绕学校逛了一圈然后踢球踢残了……果然长期宅着成废人了么……= =&lt;/p&gt;
&lt;p&gt;至于毕设什么的……可持续化捶地中……&lt;/p&gt;
</summary><category term="ons"></category></entry><entry><title>实妹相伴的大泉君</title><link href="http://blog.skydark.info/transplant/2011/05/01/real-sister/" rel="alternate"></link><published>2011-05-01T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-05-01:transplant/2011/05/01/real-sister/</id><summary type="html">&lt;p&gt;RT，移植纪念，没这个挂头上就安心学术了，毛，再不学术来不及了……&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/transplant/realsister.jpg" alt="实妹相伴的大泉君"&gt;&lt;/p&gt;
</summary><category term="ons"></category></entry><entry><title>于是一周费掉了……</title><link href="http://blog.skydark.info/transplant/2011/04/28/no-time-to-waste/" rel="alternate"></link><published>2011-04-28T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-04-28:transplant/2011/04/28/no-time-to-waste/</id><summary type="html">&lt;p&gt;RT，完全不在状态，最近还感冒了……&lt;/p&gt;
&lt;p&gt;毕设选了个过宽的题目，纠结，所以最后这周完全没心情管它……&lt;/p&gt;
&lt;p&gt;试着闹腾kr-&amp;gt;ns，实验对象是11eyes，实妹，ExE，鸑鷟和橙子传，
于是在kagex的world系统的打击下我成功地决定放弃掉了，
于是wc了一下发现堆了1200行，
但是乱到不想整下去（再次说明这周是纠结状态就是了）……shability了……&lt;/p&gt;
&lt;p&gt;（呃，其间发生过一次Win7吃了我600行代码也是原因之一，虽然又救回来了……）&lt;/p&gt;
</summary><category term="ons"></category><category term="学业"></category></entry><entry><title>结果又和mink大撞上了……</title><link href="http://blog.skydark.info/python/2011/04/18/hi-mink/" rel="alternate"></link><published>2011-04-18T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-04-18:python/2011/04/18/hi-mink/</id><summary type="html">&lt;p&gt;RT，最早在智器粉丝团碰到mink大的时候，他在研究E17,于是我也蛋疼的写了点东西……&lt;/p&gt;
&lt;p&gt;结果最近在研究PySide+QML的时候，又撞回&lt;a href="http://blog.csdn.net/mink365"&gt;mink大的博客&lt;/a&gt;了XD……&lt;/p&gt;
&lt;p&gt;好吧，顺便汗一个下午一直在想怎样在Python中返回一个dict给QML用，
结果各种不幸，竟然还碰到了Segment fault……
然后一下午的成果是发现自己被坑了：
&lt;a href="http://groups.google.com/group/pyside/browse_thread/thread/cc6b07c89dd67be0"&gt;http://groups.google.com/group/pyside/browse_thread/thread/cc6b07c89dd67be0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;……= =||||&lt;/p&gt;
&lt;p&gt;P.S.:发现自己的拖延症和逃避心理越来越严重了，
昨晚在Netwalker上过了夜明的菲娜线（好吧，221这个到底裁了没……），
还在为两位的认真和坚决感动，今天瞧瞧自己……还是如故么……&lt;/p&gt;
</summary><category term="pyside"></category><category term="python"></category></entry><entry><title>绯月.苍雪</title><link href="http://blog.skydark.info/acg/2011/04/07/9baka/" rel="alternate"></link><published>2011-04-07T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-04-07:acg/2011/04/07/9baka/</id><summary type="html">&lt;p&gt;RT，菊爆党被党爆菊，原地复活威武&lt;/p&gt;
</summary><category term="acg"></category><category term="贵圈真乱"></category></entry><entry><title>石头门！</title><link href="http://blog.skydark.info/acg/2011/04/04/my-christina/" rel="alternate"></link><published>2011-04-04T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-04-04:acg/2011/04/04/my-christina/</id><summary type="html">&lt;p&gt;RT！助手！语无伦次！就是这样！&lt;/p&gt;
&lt;p&gt;P.S.1:很紧凑啊……
不过预料之中，半年番，对照炸鸡影像版34集(虽然各集长度不等，而且有一集打工战士ED)，
现在位置在第2集中间……对了，追番的同时回顾影像版好了……&lt;/p&gt;
&lt;p&gt;P.S.2.:然则nico渣画质+助手你的头发虽然早知道了但是还是想问怎么了+砍了OPED什么的nico你不能这样啊……)&lt;/p&gt;
</summary><category term="acg"></category><category term="infinity"></category></entry><entry><title>神MAD</title><link href="http://blog.skydark.info/acg/2011/03/25/headless-sister/" rel="alternate"></link><published>2011-03-25T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-03-25:acg/2011/03/25/headless-sister/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.bilibili.tv/video/av72957/"&gt;av72957&lt;/a&gt;
RT，知道两作的都懂的……&lt;/p&gt;
&lt;p&gt;上一个看完同样感受的是&lt;a href="http://www.bilibili.tv/video/av24097/"&gt;av24097&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;小圆脸的第三话（现在又加上了第十话）常年挂在bilibili首页上……
同志们你们还是让学姐安息吧XD……
（P.S.:元首每看一集都要到河北省来，现在不播了还要到河北省来……）&lt;/p&gt;
&lt;p&gt;另外关于小圆脸的评价，我很赞同
&lt;a href="http://tieba.baidu.com/f?kz=1032880680"&gt;秋风的意见（小圆脸剧透注意）&lt;/a&gt;……&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;顺便，这两天倒腾下python+mysql，十来行搞定的东西因为要在windows底下跑多花了N个小时……&lt;/p&gt;
&lt;p&gt;得出结论：&lt;a href="http://code.google.com/p/pymysql/"&gt;http://code.google.com/p/pymysql/&lt;/a&gt;，
MySQLdb还是算了吧……&lt;/p&gt;
</summary><category term="acg"></category><category term="python"></category></entry><entry><title>于是通了刻痕和沙耶……</title><link href="http://blog.skydark.info/acg/2011/03/10/galgame/" rel="alternate"></link><published>2011-03-10T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-03-10:acg/2011/03/10/galgame/</id><summary type="html">&lt;p&gt;在有那么多要干的事情的情况下还凌晨四点半破刻痕下午去实验室的时间待宿舍破沙耶大丈夫？&lt;/p&gt;
&lt;p&gt;嘛，反正这周心情烦躁身体不适……好吧，又是不出活的借口，我坦白地承认错误……T_T&lt;/p&gt;
&lt;p&gt;没太多时间写感受和想法了，简单地就流程说几句吧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;刻痕为啥起名叫刻痕= =？233&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;刻痕的素质眼前一亮啊，气氛音乐都挺不错的，bg和剧情多少和KQ关联这个再说……
虽然刻痕2里那些特效反而我很难受……
而且全是硬写进去的XD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;刻痕1后头展开的……是不是太快了？= =
刻痕2里头人物性格变化有点微妙……
嘛嘛，不能太多要求了……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;呃， 刻痕12通了后还是有些迷的地方……
为啥隔段时间封闭空间里要起雾……
刻痕1里头墙壁对面的手是啥……
终结指令2里说知道的人只有那几位，
1里不仅医生A知道，而且还说那指令是为了坑叛徒的爹用的，
还说会发生有趣的事情（是啥……）
……etc……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;沙耶其实通完了感觉挺治愈的啊！XD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好吧，其实开始沙耶的时候有过关档，最让我感到猎奇的一张CG是沙耶旁边有个正常女孩（可怜的遥啊……）……
上次和高师兄和贾师兄吃饭的时候大致谈过治愈系结局，
所以没开始玩前陡然觉得这CG才最TM猎奇啊嗷！= =&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="acg"></category></entry><entry><title>搞了台PC-Z1</title><link href="http://blog.skydark.info/mobile/2011/03/05/pc-z1/" rel="alternate"></link><published>2011-03-05T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-03-05:mobile/2011/03/05/pc-z1/</id><summary type="html">&lt;p&gt;RT，sharp的netwalker系列，跑jaunty，懒得折腾&amp;amp;&amp;amp;upgrade中，唯一麻烦的是gcc版本太低……&lt;/p&gt;
&lt;p&gt;用的很high啊XD！终于找到和胃的东西了！&lt;/p&gt;
&lt;p&gt;以上……&lt;/p&gt;
</summary><category term="mobile"></category></entry><entry><title>小屋聚了个会……</title><link href="http://blog.skydark.info/life/2011/02/16/600/" rel="alternate"></link><published>2011-02-16T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-02-16:life/2011/02/16/600/</id><summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;某联一如既往的歌神啊，老徐你点歌点的好……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;带着宠物猫（自称老婆）的某人果然还是很气质啊……&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;忘了跟冷说带扑克了结果俩姑娘（该说一帅哥一女么XD）去买了副，然后发现俺已经不会打了，郭巴表示和这货一帮打四人保简直是……= =||&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虽然我已经把所有人类说完了，但还是得说，和某非人比体重差距拉大了，这很不好……&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="生活"></category></entry><entry><title>陪妹妹逛了一天</title><link href="http://blog.skydark.info/life/2011/02/12/my-dear-sister/" rel="alternate"></link><published>2011-02-12T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-02-12:life/2011/02/12/my-dear-sister/</id><summary type="html">&lt;p&gt;RT，好久不见了……还是老样子，虽然我没资格这么说就是了XD……= =&lt;/p&gt;
&lt;p&gt;约10点在书城门口会合，结果十点过了才发现我在门外她在门里……= =|&lt;/p&gt;
&lt;p&gt;她买了个奶茶，我买了个咖啡，然后一起去某pizza店聊天……好吧，其实是先去那里的，然后发现那边没开门……显然啊，才10点又不是饭点……&lt;/p&gt;
&lt;p&gt;然后去佳世客逛了一圈，游戏厅的声音太吵了……她对日本印象不佳，不过也就是"不佳"这层吧……&lt;/p&gt;
&lt;p&gt;然后去麦凯乐顶楼买了个柚子茶（味道略猎奇）聊了一下午，主要聊了下大学生活和初中回忆，也有聊理想，以及婚嫁的问题（呃，她表示压力，我表示无压力……不过果然瓶子想法相通啊），有时也聊了下国事（……），她比我热血啊XD&lt;/p&gt;
&lt;p&gt;回来逛了下蛋糕店，虽然还是没买……咱俩对生日都早就淡定了XD&lt;/p&gt;
&lt;p&gt;3月就要去韩国了，于是身边一个个都飞走了，就咱这个土鳖……= =||&lt;/p&gt;
&lt;p&gt;P.S.:老实说，和一个不是女朋友的女孩子自然地一块儿边走边聊的感觉真是太好了～（好吧，其实这才是最想表达的心情吧，咳咳……）&lt;/p&gt;
</summary><category term="生活"></category><category term="sister"></category></entry><entry><title>3days</title><link href="http://blog.skydark.info/transplant/2011/01/28/3days/" rel="alternate"></link><published>2011-01-28T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-01-28:transplant/2011/01/28/3days/</id><summary type="html">&lt;p&gt;&lt;img src="/images/transplant/3days1.jpg" alt="3days"&gt;&lt;/p&gt;
&lt;p&gt;移植完成纪念，没了……&lt;/p&gt;
</summary><category term="ons"></category><category term="lass"></category><category term="3days"></category></entry><entry><title>于是要回家了……</title><link href="http://blog.skydark.info/life/2011/01/15/gohome/" rel="alternate"></link><published>2011-01-15T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-01-15:life/2011/01/15/gohome/</id><summary type="html">&lt;p&gt;嗯，家里断网……于是实验室项目……于是毕业设计……于是资料……于是五和……各种捶地……以上&lt;/p&gt;
</summary><category term="生活"></category></entry><entry><title>卧勒个去！</title><link href="http://blog.skydark.info/python/2011/01/14/wtf/" rel="alternate"></link><published>2011-01-14T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-01-14:python/2011/01/14/wtf/</id><summary type="html">&lt;p&gt;查了一晚上加一上午的bug，然后我现在觉得很有可能是我用的e库太旧了……&lt;/p&gt;
&lt;p&gt;V5和PC上不一致就罢了，PC上text_set莫名其妙地段错误算啥，
关掉后台预分割后还是会在update_screen后0.X秒莫名其妙地段错误，
而且只有第一次载入并且书签在那里时会这样，
第二次无事，从头载入无事，GB2312无事(关键是我在内部转过，最终结果都是utf8...)，
V5上mink的svn版无事……XD&lt;/p&gt;
&lt;p&gt;算了……&lt;/p&gt;
</summary><category term="e17"></category><category term="python"></category></entry><entry><title>2011.1.11 Infinity</title><link href="http://blog.skydark.info/acg/2011/01/10/2011.1.11-infinity/" rel="alternate"></link><published>2011-01-10T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-01-10:acg/2011/01/10/2011.1.11-infinity/</id><summary type="html">&lt;p&gt;This story has not finished yet.&lt;/p&gt;
&lt;p&gt;Truth is not revealed.&lt;/p&gt;
&lt;p&gt;And it circulates through an incident...&lt;/p&gt;
&lt;p&gt;It is an infinity loop!&lt;/p&gt;
</summary><category term="infinity"></category></entry><entry><title>试了下cython包装epdf，还有SDL</title><link href="http://blog.skydark.info/python/2011/01/08/cython-epdf-sdl/" rel="alternate"></link><published>2011-01-08T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-01-08:python/2011/01/08/cython-epdf-sdl/</id><summary type="html">&lt;p&gt;cython真是个好东西，用来包装c库确实省时省力……&lt;/p&gt;
&lt;p&gt;epdf似乎说法是被E17项目遗弃改成eyesight了？
忘了在哪里似乎扫到了这么眼，看了下eyesight，
现阶段似乎是把pdf,dvi,ps的后端整合到一起了……
嘛，先不管了，完全照着python-evas的源码照葫芦画瓢地写了个货，
it works我就已经泪流满面了，
虽然只去包装了smart_pdf,document,page，而且包装完了仍然是C风格，
完全不pythonic啊……&lt;/p&gt;
&lt;p&gt;至于SDL嵌入窗口(呃，显然，是打算ONS嵌入窗口，虽然其实完全没有实际意义啊嗷嗷！= =)，一开始以为比较容易:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;SDL_WINDOWID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;the_xid_of_embbed_xwindow ./onscripter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后发现input完全传不过去……&lt;/p&gt;
&lt;p&gt;最后解决办法是改ONS的源码，原理如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SDL_SysWMinfo&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;SDL_VERSION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this is important!&lt;/span&gt;
    &lt;span class="n"&gt;SDL_GetWMInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x11&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock_func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//XUnmapWindow(info.info.x11.display, info.info.x11.window);&lt;/span&gt;
    &lt;span class="c1"&gt;//XReparentWindow(info.info.x11.display, info.info.x11.window, xid, 0, 0);&lt;/span&gt;
    &lt;span class="n"&gt;XReparentWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x11&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x11&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wmwindow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x11&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlock_func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然一开始会突然显示一个ONS窗口……&lt;/p&gt;
&lt;p&gt;ref:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://sdl.beuc.net/sdl.wiki/FAQ_GUI"&gt;http://sdl.beuc.net/sdl.wiki/FAQ_GUI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://old.nabble.com/getting-X11-%28or-windows%29-events-when-SDL_WINDOWID-is-set-td17059020.html"&gt;http://old.nabble.com/getting-X11-%28or-windows%29-events-when-SDL_WINDOWID-is-set-td17059020.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.hu.freepascal.org/lists/fpc-pascal/2007-November/015709.html"&gt;http://www.hu.freepascal.org/lists/fpc-pascal/2007-November/015709.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;呃，P.S.:google的时候不小心看到了这个：
&lt;a href="http://www.rpgchina.net/read-htm-tid-25470.html"&gt;http://www.rpgchina.net/read-htm-tid-25470.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;泪流满面地近距离围观john_he大……&lt;/p&gt;
</summary><category term="e17"></category><category term="python"></category><category term="ons"></category></entry><entry><title>大条了</title><link href="http://blog.skydark.info/life/2011/01/04/cuptool/" rel="alternate"></link><published>2011-01-04T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-01-04:life/2011/01/04/cuptool/</id><summary type="html">&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;五、资格复审及录取&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在发出录取通知书之前，将对获得初取资格的免试生，按以下要求进行资格复审，通过者方可被录取，未通过者，将被取消录取资格，由学生所在学校本科教务部门按本科学籍管理规定办理相应手续。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;完成本科培养方案规定的所有课程及实践环节（含毕业论文或实习）的学分要求；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;毕业论文或实习成绩应在“良”以上；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;取得初取资格后，本科必修、限选及公选课程不得出现不及格；&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自取得初取资格至入学报到之日未受过任何处分。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;随机过程随机过，是么……&lt;/p&gt;
&lt;p&gt;自己的习惯是卷子上会的就是会，不会的要么空着(大多数情况)要么是个人看了也知道是胡诌，
基本答上多少就是多少分，这次答上的分数50～60，
自己明确其中15～20是明显的胡诌，比第二次考完物理的感觉还糟糕(P.S.:那次68)，
关键是看着卷子觉得确实都不难(假如是大岳叔那样大家都不会就罢了)，就是都没答上，
这好似已经不只是湿态的问题了吧……&lt;/p&gt;
&lt;p&gt;而且这学期的课普遍都感觉糟糕，明天是另一个叫英语的坑，5次考英语三次60一次456的等着被人说保了后玩脱了吧，感觉心态有点像大二下的时候，发力都不知道力跑哪里了，然后就莫名其妙地惨淡了……&lt;/p&gt;
&lt;p&gt;好似从高二那个11月开始心态就一直有问题了，把它当成随机过程研究下？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;喂，别开玩笑了啊！丢人可以丢习惯么！&lt;/strong&gt;&lt;/p&gt;
</summary><category term="学业"></category></entry><entry><title>马上要2011.1.11了啊</title><link href="http://blog.skydark.info/acg/2011/01/03/2011.1.11/" rel="alternate"></link><published>2011-01-03T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2011-01-03:acg/2011/01/03/2011.1.11/</id><summary type="html">&lt;p&gt;不是说光棍节，那是2011.11.11 11:11:11的事情……&lt;/p&gt;
&lt;p&gt;R11这个天坑，估计也不会有什么奇迹般的补完了吧……
倒是更期待贴吧活动，尽管恰好连续三天的三俗……= =||&lt;/p&gt;
&lt;p&gt;总之，那天注意日本的空难吧，唉。&lt;/p&gt;
&lt;p&gt;话说回来，该考虑试着移植R11么…………
虽然明白自己完全没那本事，
虽然在考虑WFSP和3days，
虽然连移植OK都称不上的Fate现在还在被挑bug……
菜的一塌糊涂啊，欲望、能力、时间这仨东西和钱一样，不怕没有，就怕不够&amp;gt;_&amp;lt;!
（这个时候该对米炮羡慕嫉妒么……撞墙）&lt;/p&gt;
&lt;p&gt;P.S.:吉源今晚在折腾窗口管理器，结果被fvwm吓着了……
果然大家面对应随考试都虚的淡定了么……= =||||&lt;/p&gt;
&lt;p&gt;P.S.2:christina下一步是ebook和setting，完成后就先找人测试吧，
呃，虽然：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;会有人愿意用么……（各种泪流满面……一边时间不够一边做这个杀时间么……）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;果然还是壕三最合适么……（墙君，你怎么碎了……）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="infinity"></category></entry><entry><title>一张图</title><link href="http://blog.skydark.info/python/2010/12/28/Christina/" rel="alternate"></link><published>2010-12-28T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2010-12-28:python/2010/12/28/Christina/</id><summary type="html">&lt;p&gt;&lt;img src="http://skydblog.appspot.com/media/aghza3lkYmxvZ3IMCxIFTWVkaWEYkU4M/Screenshot-Christina.jpg" alt="Christina"&gt;&lt;/p&gt;
</summary><category term="e17"></category><category term="python"></category></entry><entry><title>无勒个题</title><link href="http://blog.skydark.info/python/2010/12/26/christina-wc/" rel="alternate"></link><published>2010-12-26T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2010-12-26:python/2010/12/26/christina-wc/</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;skydark@skydark-laptop:~/projects/christina$ wc *.py cmodel/*.py *.xml
  &lt;span class="m"&gt;250&lt;/span&gt;   &lt;span class="m"&gt;659&lt;/span&gt;  &lt;span class="m"&gt;7627&lt;/span&gt; animator.py
  &lt;span class="m"&gt;42&lt;/span&gt;   &lt;span class="m"&gt;108&lt;/span&gt;  &lt;span class="m"&gt;1385&lt;/span&gt; ChAppFrame.py
  &lt;span class="m"&gt;74&lt;/span&gt;   &lt;span class="m"&gt;201&lt;/span&gt;  &lt;span class="m"&gt;2738&lt;/span&gt; ChAppView.py
  &lt;span class="m"&gt;98&lt;/span&gt;   &lt;span class="m"&gt;240&lt;/span&gt;  &lt;span class="m"&gt;3133&lt;/span&gt; ChButtonBar.py
  &lt;span class="m"&gt;202&lt;/span&gt;   &lt;span class="m"&gt;553&lt;/span&gt;  &lt;span class="m"&gt;7141&lt;/span&gt; ChWindow.py
  &lt;span class="m"&gt;9&lt;/span&gt;     &lt;span class="m"&gt;7&lt;/span&gt;   &lt;span class="m"&gt;124&lt;/span&gt; common.py
  &lt;span class="m"&gt;14&lt;/span&gt;    &lt;span class="m"&gt;16&lt;/span&gt;   &lt;span class="m"&gt;156&lt;/span&gt; error.py
  &lt;span class="m"&gt;15&lt;/span&gt;    &lt;span class="m"&gt;32&lt;/span&gt;   &lt;span class="m"&gt;314&lt;/span&gt; model.py
  &lt;span class="m"&gt;197&lt;/span&gt;   &lt;span class="m"&gt;679&lt;/span&gt;  &lt;span class="m"&gt;7648&lt;/span&gt; mouser.py
  &lt;span class="m"&gt;437&lt;/span&gt;  &lt;span class="m"&gt;1301&lt;/span&gt; &lt;span class="m"&gt;14027&lt;/span&gt; parser.py
  &lt;span class="m"&gt;163&lt;/span&gt;   &lt;span class="m"&gt;393&lt;/span&gt;  &lt;span class="m"&gt;4908&lt;/span&gt; player.py
  &lt;span class="m"&gt;67&lt;/span&gt;   &lt;span class="m"&gt;371&lt;/span&gt;  &lt;span class="m"&gt;3111&lt;/span&gt; test_parser.py
  &lt;span class="m"&gt;121&lt;/span&gt;   &lt;span class="m"&gt;409&lt;/span&gt;  &lt;span class="m"&gt;3843&lt;/span&gt; util.py
  &lt;span class="m"&gt;358&lt;/span&gt;   &lt;span class="m"&gt;944&lt;/span&gt; &lt;span class="m"&gt;12473&lt;/span&gt; widget.py
  &lt;span class="m"&gt;193&lt;/span&gt;   &lt;span class="m"&gt;519&lt;/span&gt;  &lt;span class="m"&gt;6610&lt;/span&gt; cmodel/fs.py
  &lt;span class="m"&gt;221&lt;/span&gt;   &lt;span class="m"&gt;745&lt;/span&gt;  &lt;span class="m"&gt;7408&lt;/span&gt; cmodel/image.py
  &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt; cmodel/__init__.py
  &lt;span class="m"&gt;117&lt;/span&gt;   &lt;span class="m"&gt;233&lt;/span&gt;  &lt;span class="m"&gt;3766&lt;/span&gt; cmodel/media.py
  &lt;span class="m"&gt;29&lt;/span&gt;   &lt;span class="m"&gt;102&lt;/span&gt;  &lt;span class="m"&gt;1475&lt;/span&gt; fs.xml
  &lt;span class="m"&gt;37&lt;/span&gt;   &lt;span class="m"&gt;120&lt;/span&gt;  &lt;span class="m"&gt;1830&lt;/span&gt; image.xml
  &lt;span class="m"&gt;36&lt;/span&gt;   &lt;span class="m"&gt;125&lt;/span&gt;  &lt;span class="m"&gt;1539&lt;/span&gt; media.xml
  &lt;span class="m"&gt;35&lt;/span&gt;    &lt;span class="m"&gt;81&lt;/span&gt;  &lt;span class="m"&gt;1070&lt;/span&gt; test.xml
  &lt;span class="m"&gt;2715&lt;/span&gt;  &lt;span class="m"&gt;7838&lt;/span&gt; &lt;span class="m"&gt;92326&lt;/span&gt; 总用量
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="e17"></category></entry><entry><title>蛋痛地写了个parser...</title><link href="http://blog.skydark.info/python/2010/12/21/christina-parser/" rel="alternate"></link><published>2010-12-21T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2010-12-21:python/2010/12/21/christina-parser/</id><summary type="html">&lt;p&gt;RT，昨晚加今天早上，今早主要是加上运算及优先级，本来想严格照着编译原理来的，后来心想反正大概意图心里有底，就照着感觉来了，昨晚一口气写了300行，一次运行除了一点syntax error竟然直接通过了，泪流满面啊，这是彩票概率事件么...（捶地）&lt;/p&gt;
&lt;p&gt;P.S.:写完了发现果然是激情产物，实际在Project christina中...会用上么...（继续黑子捶地貌）&lt;/p&gt;
</summary><category term="e17"></category><category term="python"></category></entry><entry><title>被Elementary折腾的虚了……</title><link href="http://blog.skydark.info/python/2010/12/14/try-elementary/" rel="alternate"></link><published>2010-12-14T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2010-12-14:python/2010/12/14/try-elementary/</id><summary type="html">&lt;p&gt;RT，test blog......&lt;/p&gt;
&lt;p&gt;最近在用Python-elementary写给SmartQ V5测试玩的东西，
被折磨的一塌糊涂，各种奇怪的bug
（Button的on_mouse_up_add会收到三个完全相同的event，
table没有unpack，progressbar只有方向为垂直的时候才能全条捕获mouse event，
etc......），各种文档丢失......&lt;/p&gt;
&lt;p&gt;另外连VLC的时候也各种欢乐，V5和PC上的VLC用的rc还不一样，相比而言V5的倒是好处理的多......&lt;/p&gt;
&lt;p&gt;相比之下此前各种连不上还算小事了XD：
&lt;a href="http://forum.ubuntu.org.cn/viewtopic.php?f=63&amp;amp;t=308440"&gt;在Ubuntu中文的提问&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;嘛，虽然说折腾也是乐趣嘛，囧。&lt;/p&gt;
</summary><category term="e17"></category><category term="python"></category><category term="数码"></category></entry><entry><title>欢迎使用Micolog</title><link href="http://blog.skydark.info/test/2010/12/11/welcome-to-micolog/" rel="alternate"></link><published>2010-12-11T00:00:00+08:00</published><author><name>Skydark Chen</name></author><id>tag:blog.skydark.info,2010-12-11:test/2010/12/11/welcome-to-micolog/</id><summary type="html">&lt;p&gt;欢迎使用micolog. 这是您的第一篇博客. 您可以修改或删除这篇文章，开始您精彩的独立Blog之旅。&lt;/p&gt;
</summary><category term="test"></category></entry></feed>